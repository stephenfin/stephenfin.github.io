<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Stephen Finucane (Fin-oo-can)</title>
    <link>https://that.guru/blog/</link>
    <description>Recent content in Blogs on Stephen Finucane (Fin-oo-can)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-IE</language>
    <lastBuildDate>Fri, 07 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://that.guru/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SQLAlchemy Relationships Without Foreign Keys (And How to Replace &#39;backref&#39; With &#39;back_populates&#39;)</title>
      <link>https://that.guru/blog/sqlalchemy-relationships-without-foreign-keys/</link>
      <pubDate>Fri, 07 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://that.guru/blog/sqlalchemy-relationships-without-foreign-keys/</guid>
      <description>&lt;p&gt;When implementing relationships in SQLAlchemy models, you will generally need
to cross-reference one model from another, ideally in a bidirectional manner.
Historically, the mechanism to do this has been the &lt;code&gt;relationship.backref&lt;/code&gt;
keyword. However, as noted in the &lt;a href=&#34;https://docs.sqlalchemy.org/en/14/orm/backref.html&#34;&gt;SQLAlchemy
documentation&lt;/a&gt;, this keyword should now be considered legacy
and the &lt;code&gt;relationship.back_populates&lt;/code&gt; migration preferred instead. There are a
couple of reasons for this. Quoting from the docs:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;a href=&#34;https://docs.sqlalchemy.org/en/14/orm/relationship_api.html#sqlalchemy.orm.relationship.params.backref&#34;&gt;&lt;code&gt;relationship.backref&lt;/code&gt;&lt;/a&gt; keyword should be considered legacy,
and use of &lt;a href=&#34;https://docs.sqlalchemy.org/en/14/orm/relationship_api.html#sqlalchemy.orm.relationship.params.back_populates&#34;&gt;&lt;code&gt;relationship.back_populates&lt;/code&gt;&lt;/a&gt; with explicit
[&lt;code&gt;relationship()&lt;/code&gt;][relationship] constructs should be preferred. Using
individual &lt;code&gt;relationship()&lt;/code&gt; constructs provides advantages including that
both ORM mapped classes will include their attributes up front as the class
is constructed, rather than as a deferred step, and configuration is more
straightforward as all arguments are explicit. New &lt;a href=&#34;https://peps.python.org/pep-0484/&#34;&gt;&lt;strong&gt;PEP 484&lt;/strong&gt;&lt;/a&gt;
features in SQLAlchemy 2.0 also take advantage of attributes being explicitly
present in source code rather than using dynamic attribute generation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The SQLAlchemy docs &lt;a href=&#34;https://docs.sqlalchemy.org/en/14/orm/backref.html&#34;&gt;include a guide on migrating tables&lt;/a&gt;,
(as well as a great overview on &lt;a href=&#34;https://docs.sqlalchemy.org/en/14/orm/basic_relationships.html&#34;&gt;relationships in
general&lt;/a&gt;), however, this guide assumes you are using
foreign key constraints in your models and using the auto-incrementing primary
key field as your reference. To be honest, you probably should be using foreign
keys since without these &lt;a href=&#34;https://stackoverflow.com/questions/3433975/why-use-foreign-key-constraints-in-mysql&#34;&gt;you have no way to enforce referential
integrity&lt;/a&gt; but say you can&amp;rsquo;t use them or don&amp;rsquo;t want to, how does
one migrate? The below examples should hopefully guide you in migrating these.&lt;/p&gt;
&lt;h2 id=&#34;one-to-many&#34;&gt;One-to-Many&lt;/h2&gt;
&lt;p&gt;The &lt;em&gt;one-to-many&lt;/em&gt; pattern is the simpler one to migrate. Consider the following
example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; uuid
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sqlalchemy &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; sa
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sqlalchemy &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; orm
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;BASE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; orm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;declarative_base()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt;(BASE):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __tablename__ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Column(sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Integer, primary_key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    uuid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Column(sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;String(&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;), nullable&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Column(sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;String)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Address&lt;/span&gt;(BASE):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __tablename__ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;addresses&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __tableargs__ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;addresses_user_uuid_idx&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user_uuid&amp;#39;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Column(sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Integer, primary_key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user_uuid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Column(sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;String(&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;), nullable&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; orm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;relationship(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;User&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        backref&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;addresses&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        primaryjoin&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Address.user_uuid == User.uuid&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        foreign_keys&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;user_uuid,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    engine &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_engine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sqlite://&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    session &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; orm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sessionmaker(bind&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;engine)()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    BASE&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;metadata&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_all(engine)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; User(name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;John Doe&amp;#39;&lt;/span&gt;, uuid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;str(uuid&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;uuid4()))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    session&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(user)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    session&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;commit()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Address(user_uuid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;uuid)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    session&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(address)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    session&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;commit()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;# Users&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; user &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; session&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(User)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;all():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;User: name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;# Addresses&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; address &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; session&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(Address)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;all():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Address: user=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;address&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;user_uuid&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    main()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Before looking at migrating from &lt;code&gt;backref&lt;/code&gt; to &lt;code&gt;back_populates&lt;/code&gt;, it&amp;rsquo;s worth
understanding what&amp;rsquo;s going on here. You&amp;rsquo;ll note that we have a relationship
from the &lt;code&gt;Address&lt;/code&gt; model back to the &lt;code&gt;User&lt;/code&gt; model. This has the &lt;code&gt;backref&lt;/code&gt;
keyword set on it, allowing you to reference related addresses from instances
of &lt;code&gt;User&lt;/code&gt;, however it also has &lt;code&gt;primaryjoin&lt;/code&gt; and &lt;code&gt;foreign_keys&lt;/code&gt; keywords set.
These are necessary because the &lt;code&gt;user_uuid&lt;/code&gt; column does not have a foreign key
constraint present. You can confirm this running the above and looking at the
schemas dumped in the output.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;❯ python test_o2m.py
# Users
User: name=John Doe

# Addresses
Address: user=fa1b9773-e0a2-465e-a1e6-1c6434b682ad

# Schemas

CREATE TABLE &amp;#34;user&amp;#34; (
        id INTEGER NOT NULL,
        uuid VARCHAR(36) NOT NULL,
        name VARCHAR,
        PRIMARY KEY (id)
)



CREATE TABLE addresses (
        id INTEGER NOT NULL,
        user_uuid VARCHAR(36) NOT NULL,
        PRIMARY KEY (id)
)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Because we don&amp;rsquo;t have a foreign key present, SQLAlchemy isn&amp;rsquo;t able to determine
the join condition. This necessitates the addition of the &lt;code&gt;primaryjoin&lt;/code&gt; and
&lt;code&gt;foreign_keys&lt;/code&gt; keywords to guide SQLAlchemy on resolving these relations.
Removing these keywords will yield an error message.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sqlalchemy.exc.NoForeignKeysError: Can&amp;#39;t find any foreign key relationships between &amp;#39;addresses&amp;#39; and &amp;#39;user&amp;#39;.
&lt;/code&gt;&lt;/pre&gt;&lt;aside class=&#34;admonition note&#34;&gt;
	
	
	&lt;div class=&#34;admonition-content&#34;&gt;&lt;p&gt;An alternative to the &lt;code&gt;foreign_keys&lt;/code&gt; argument is to annotate the join condition
with the &lt;code&gt;foreign()&lt;/code&gt; annotation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; orm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;relationship(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;User&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    backref&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;addresses&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    primaryjoin&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Address.user_uuid == foreign(User.uuid)&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/aside&gt;

&lt;p&gt;The only other unusual thing here is that we&amp;rsquo;re using a field other than &lt;code&gt;id&lt;/code&gt;
to reference things, namely a &lt;code&gt;uuid&lt;/code&gt; field on both models. There&amp;rsquo;s no real
reason to do this here but this was the case in the models that I had to
migrate and it makes things a little more complicated and &amp;ldquo;real-world&amp;rsquo;y&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Now that we understand what&amp;rsquo;s going, it&amp;rsquo;s time to look at switching from
&lt;code&gt;backref&lt;/code&gt; to &lt;code&gt;back_populates&lt;/code&gt;. It turns out to be pretty simple for one-to-many
models like this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; uuid
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sqlalchemy &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; sa
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sqlalchemy &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; orm
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;BASE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; orm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;declarative_base()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt;(BASE):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __tablename__ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Column(sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Integer, primary_key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    uuid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Column(sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;String(&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;), nullable&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Column(sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;String)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    addresses &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; orm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;relationship(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Address&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        primaryjoin&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;User.uuid == Address.user_uuid&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        back_populates&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        foreign_keys&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Address.user_uuid&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Address&lt;/span&gt;(BASE):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __tablename__ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;addresses&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __tableargs__ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;addresses_user_uuid_idx&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;user_uuid&amp;#39;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Column(sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Integer, primary_key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user_uuid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Column(sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;String(&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;), nullable&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; orm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;relationship(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;User&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        primaryjoin&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Address.user_uuid == User.uuid&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        back_populates&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;addresses&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        foreign_keys&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;user_uuid,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    engine &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_engine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sqlite://&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    session &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; orm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sessionmaker(bind&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;engine)()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    BASE&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;metadata&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_all(engine)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; User(name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;John Doe&amp;#39;&lt;/span&gt;, uuid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;str(uuid&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;uuid4()))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    session&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(user)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    session&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;commit()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Address(user_uuid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;uuid)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    session&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(address)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    session&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;commit()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;# Users&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; user &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; session&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(User)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;all():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;User: name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;user&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;# Addresses&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; address &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; session&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(Address)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;all():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Address: user=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;address&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;user_uuid&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    main()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Looking at the diff for these two files, we see the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;diff --git test_o2m.py test_o2m.py
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;index 4f23221..f865045 100644
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--- test_o2m.py
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+++ test_o2m.py
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;@@ -14,6 +14,13 @@ class User(BASE):
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;     uuid = sa.Column(sa.String(36), nullable=False)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     name = sa.Column(sa.String)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+    addresses = orm.relationship(
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+        &amp;#39;Address&amp;#39;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+        primaryjoin=&amp;#39;User.uuid == Address.user_uuid&amp;#39;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+        back_populates=&amp;#39;user&amp;#39;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+        foreign_keys=&amp;#39;Address.user_uuid&amp;#39;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+    )
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; class Address(BASE):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     __tablename__ = &amp;#39;addresses&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;@@ -26,8 +33,8 @@ class Address(BASE):
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     user = orm.relationship(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &amp;#39;User&amp;#39;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-        backref=&amp;#39;addresses&amp;#39;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;         primaryjoin=&amp;#39;Address.user_uuid == User.uuid&amp;#39;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+        back_populates=&amp;#39;addresses&amp;#39;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;         foreign_keys=user_uuid,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     )
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So for the &lt;code&gt;Address&lt;/code&gt; model, we have simply replaced the &lt;code&gt;backref&lt;/code&gt; keyword with
&lt;code&gt;back_populates&lt;/code&gt;. For the &lt;code&gt;User&lt;/code&gt; model, we have added a new relationship. This
is mostly the inverse of the relationship on the &lt;code&gt;Address&lt;/code&gt; model and only the
&lt;code&gt;foreign_key&lt;/code&gt; argument points to the same field (a foreign field in the
&lt;code&gt;Address&lt;/code&gt; model case).&lt;/p&gt;
&lt;p&gt;Overall, this isn&amp;rsquo;t a difficult migration. Migrating many-to-many models could
be a little trickier though. Let&amp;rsquo;s see.&lt;/p&gt;
&lt;h2 id=&#34;many-to-many&#34;&gt;Many-to-Many&lt;/h2&gt;
&lt;p&gt;Now consider the following example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; uuid
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sqlalchemy &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; sa
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sqlalchemy &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; orm
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;BASE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; orm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;declarative_base()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;association_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Table(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;association&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    BASE&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;metadata,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Column(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;parent_uuid&amp;#39;&lt;/span&gt;, sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;String(&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;), primary_key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Column(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;child_uuid&amp;#39;&lt;/span&gt;, sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;String(&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;), primary_key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Parent&lt;/span&gt;(BASE):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __tablename__ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;parents&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __table_args__ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;parents_uuid_idx&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;uuid&amp;#39;&lt;/span&gt;, unique&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Column(sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Integer, primary_key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    uuid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Column(sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;String(&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;), nullable&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Column(sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;String)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Child&lt;/span&gt;(BASE):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __tablename__ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;children&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __table_args__ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;children_uuid_idx&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;uuid&amp;#39;&lt;/span&gt;, unique&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Column(sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Integer, primary_key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    uuid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Column(sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;String(&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;), nullable&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Column(sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;String)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    parents &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; orm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;relationship(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Parent&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        secondary&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;association&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        primaryjoin&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Child.uuid == association.c.child_uuid&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        secondaryjoin&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;association.c.parent_uuid == Parent.uuid&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        backref&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;children&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    engine &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_engine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sqlite://&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    session &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; orm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sessionmaker(bind&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;engine)()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    BASE&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;metadata&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_all(engine)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Parent(name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;John Doe&amp;#39;&lt;/span&gt;, uuid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;str(uuid&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;uuid4()))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    session&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(parent)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    session&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;commit()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Child(name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Jimmy Doe&amp;#39;&lt;/span&gt;, uuid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;str(uuid&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;uuid4()))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    session&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(child)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    session&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;commit()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    parent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;children&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(child)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;# Parents&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; parent &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; session&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(Parent)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;all():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        children &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; parent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;children]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Parent: name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;parent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, children=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;children&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;# Children&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; child &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; session&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(Child)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;all():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        parents &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; child&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parents]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Child: name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;child&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, parents=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;parents&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    main()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Again, there are a couple of things to consider here. Firstly, since this is a
many-to-many relationship, we need a so-called &lt;em&gt;join table&lt;/em&gt; (also known as a
&lt;em&gt;association table&lt;/em&gt; in SQLAlchemy or a &lt;em&gt;through table&lt;/em&gt; in Django). The
necessitates the use of the &lt;code&gt;secondary&lt;/code&gt; keyword to indicate the association
table. Next up, once again we do not have a foreign key constraint present
meaning we need to inform SQLAlchemy how the join should be managed. The use of
the association table means we must specify not only &lt;code&gt;primaryjoin&lt;/code&gt; but also
&lt;code&gt;secondaryjoin&lt;/code&gt;: the former describes the relationship from &lt;code&gt;Child&lt;/code&gt; to the
association table, while the latter describes the relationship from the
association table to &lt;code&gt;Parent&lt;/code&gt;. Finally, once again we&amp;rsquo;re using a &lt;code&gt;uuid&lt;/code&gt; field
for referencing to makes things a little more like the real world.&lt;/p&gt;
&lt;p&gt;Now to switch from &lt;code&gt;backref&lt;/code&gt; to &lt;code&gt;back_populates&lt;/code&gt; once again.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; uuid
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sqlalchemy &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; sa
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sqlalchemy &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; orm
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;BASE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; orm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;declarative_base()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;association_table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Table(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;association&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    BASE&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;metadata,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Column(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;parent_uuid&amp;#39;&lt;/span&gt;, sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;String(&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;), primary_key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Column(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;child_uuid&amp;#39;&lt;/span&gt;, sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;String(&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;), primary_key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Parent&lt;/span&gt;(BASE):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __tablename__ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;parents&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __table_args__ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;parents_uuid_idx&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;uuid&amp;#39;&lt;/span&gt;, unique&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Column(sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Integer, primary_key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    uuid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Column(sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;String(&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;), nullable&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Column(sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;String)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    children &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; orm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;relationship(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Child&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        secondary&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;association&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        primaryjoin&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Parent.uuid == association.c.parent_uuid&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        secondaryjoin&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;association.c.child_uuid == Child.uuid&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        back_populates&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;parents&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Child&lt;/span&gt;(BASE):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __tablename__ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;children&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    __table_args__ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Index(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;children_uuid_idx&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;uuid&amp;#39;&lt;/span&gt;, unique&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Column(sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Integer, primary_key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    uuid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Column(sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;String(&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;), nullable&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Column(sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;String)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    parents &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; orm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;relationship(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Parent&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        secondary&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;association&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        primaryjoin&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Child.uuid == association.c.child_uuid&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        secondaryjoin&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;association.c.parent_uuid == Parent.uuid&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        back_populates&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;children&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    engine &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sa&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_engine(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sqlite://&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    session &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; orm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sessionmaker(bind&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;engine)()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    BASE&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;metadata&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;create_all(engine)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Parent(name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;John Doe&amp;#39;&lt;/span&gt;, uuid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;str(uuid&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;uuid4()))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    session&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(parent)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    session&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;commit()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    child &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Child(name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Jimmy Doe&amp;#39;&lt;/span&gt;, uuid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;str(uuid&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;uuid4()))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    session&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(child)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    session&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;commit()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    parent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;children&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(child)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;# Parents&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; parent &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; session&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(Parent)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;all():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        children &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; parent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;children]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Parent: name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;parent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, children=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;children&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;# Children&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; child &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; session&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(Child)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;all():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        parents &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; child&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parents]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Child: name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;child&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, parents=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;parents&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    main()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Looking at the diff for these two files, we see the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;diff --git test_m2m.py test_m2m.py
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;index 948942f..d1dc0d4 100644
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--- test_m2m.py
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+++ test_m2m.py
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;@@ -25,6 +25,14 @@ class Parent(BASE):
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;     uuid = sa.Column(sa.String(36), nullable=False)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     name = sa.Column(sa.String)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+    children = orm.relationship(
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+        &amp;#39;Child&amp;#39;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+        secondary=&amp;#39;association&amp;#39;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+        primaryjoin=&amp;#39;Parent.uuid == association.c.parent_uuid&amp;#39;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+        secondaryjoin=&amp;#39;association.c.child_uuid == Child.uuid&amp;#39;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+        back_populates=&amp;#39;parents&amp;#39;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+    )
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; class Child(BASE):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     __tablename__ = &amp;#39;children&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;@@ -41,7 +49,7 @@ class Child(BASE):
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;         secondary=&amp;#39;association&amp;#39;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         primaryjoin=&amp;#39;Child.uuid == association.c.child_uuid&amp;#39;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         secondaryjoin=&amp;#39;association.c.parent_uuid == Parent.uuid&amp;#39;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-        backref=&amp;#39;children&amp;#39;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+        back_populates=&amp;#39;children&amp;#39;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;     )
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is nearly identical to the changes required for migrating the one-to-many
models. Once again, we simply replace &lt;code&gt;backref&lt;/code&gt; with &lt;code&gt;back_populates&lt;/code&gt; on the
relationship that is defined. We then define a new &lt;code&gt;relationship&lt;/code&gt; on the
&lt;code&gt;Parent&lt;/code&gt; model which has an inverse of the primary and secondary joins given
for the &lt;code&gt;Child&lt;/code&gt; model relationship.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;So that&amp;rsquo;s how you migrate from &lt;code&gt;backref&lt;/code&gt; to &lt;code&gt;back_populates&lt;/code&gt; on models without
foreign key constraints present. This likely isn&amp;rsquo;t broadly useful but hopefully
it will help someone that encounters this.&lt;/p&gt;
&lt;p&gt;The code for this blog post can be found on &lt;a href=&#34;https://github.com/stephenfin/sqlalchemy-relationships-demo&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Closing the OpenStackClient (and OpenStackSDK) Gaps</title>
      <link>https://that.guru/blog/closing-openstackclient-gaps/</link>
      <pubDate>Fri, 29 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://that.guru/blog/closing-openstackclient-gaps/</guid>
      <description>&lt;p&gt;The unified OpenStack command-line client project, &lt;code&gt;python-openstackclient&lt;/code&gt;
(OSC), has been around &lt;a href=&#34;https://github.com/openstack/python-openstackclient/commit/f4b5ef39f6f84e66af532583040c9be7556e9b69&#34;&gt;for over a decade&lt;/a&gt;. As noted in the
&lt;a href=&#34;https://github.com/openstack/python-openstackclient/blob/master/README.rst&#34;&gt;README&lt;/a&gt;, &amp;ldquo;[t]he primary goal is to provide a unified shell command
structure and a common language to describe operations in OpenStack.&amp;rdquo; In
essence, this means OSC should replace the shell command implementations of the
various project-specific clients, such as &lt;code&gt;python-novaclient&lt;/code&gt; and
&lt;code&gt;python-glanceclient&lt;/code&gt;. It &lt;em&gt;does not&lt;/em&gt; aim to replace the client library
implementations (Python binding) of these libraries: that task is handled by
another project, the unified OpenStack client library, &lt;code&gt;openstacksdk&lt;/code&gt; (SDK).&lt;/p&gt;
&lt;p&gt;For most high-level &amp;ldquo;simpler&amp;rdquo; OpenStack-related activities, OSC has long been
&amp;ldquo;good enough&amp;rdquo; as it provided the ability to do CRUD operations on the essential
resources in a cloud including instances, volumes and images. However, as soon
as you started trying to use more advanced or less common features, you&amp;rsquo;d run
into a swathe of feature gaps. These would generally mean having to revert to
using the legacy project-specific clients like &lt;code&gt;python-novaclient&lt;/code&gt; (e.g. &lt;code&gt;nova foo&lt;/code&gt;) or &lt;code&gt;python-glanceclient&lt;/code&gt; (&lt;code&gt;glance foo&lt;/code&gt;). There were exceptions to this,
most notably &lt;a href=&#34;https://github.com/openstack/python-neutronclient/commit/3a64a7a166be25d40436fd40c8351a79267bd3c4&#34;&gt;neutronclient&lt;/a&gt;, but ultimately the
result of this partial switchover was a poor user experience that was more
confusing than it should have been.&lt;/p&gt;
&lt;p&gt;Over the course of the past number of cycles (starting with Train), there has
been a concerted effort to close these gaps and achieve feature parity between
the shells of the various legacy clients and OSC. As of Yoga, we have
effectively achieved this for &lt;a href=&#34;https://github.com/openstack/python-novaclient/commit/0fb7190c062a08a3969a71955c014e3a572cdc9e&#34;&gt;nova&lt;/a&gt; and are well on
our way to doing so for &lt;a href=&#34;https://review.opendev.org/q/topic:cinder-gaps&#34;&gt;cinder&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve put together a little FAQ below that should be helpful in helping people
understand what has gone into this effort and how you can identify features
gaps to to be closed.&lt;/p&gt;
&lt;h2 id=&#34;how-do-we-determine-where-these-gaps-lie&#34;&gt;How do we determine where these gaps lie?&lt;/h2&gt;
&lt;p&gt;Unfortunately, pretty manually. OSC only aims to implement support for the six
&amp;ldquo;core&amp;rdquo; services: nova, neutron, keystone, cinder, glance, and swift. We provide
&lt;a href=&#34;https://github.com/openstack/python-openstackclient/tree/master/doc/source/cli/data&#34;&gt;CSV files&lt;/a&gt; mapping commands found in the legacy clients with their
OSC equivalents. The first step is looking for obvious gaps in this document,
by which I mean missing entries for an OSC equivalent to a given legacy client
command.&lt;/p&gt;
&lt;aside class=&#34;admonition note&#34;&gt;
	
	
	&lt;div class=&#34;admonition-content&#34;&gt;OSC doesn&amp;rsquo;t aim to provide a 1:1 mapping to the underlying APIs it calls. There
are also commands or options which are historical baggage and don&amp;rsquo;t need to be
exposed. This means there are commands that we will never implement. However,
these should be explicitly called out with &lt;code&gt;WONTFIX&lt;/code&gt; comments rather than left
blank.&lt;/div&gt;
&lt;/aside&gt;

&lt;p&gt;The next step is looking for command that should exist in those documents but
don&amp;rsquo;t. This is pretty easy: just run e.g. &lt;code&gt;nova help&lt;/code&gt;, capture the output, and
reformat it so that it resembles the CSV file (this would actually be one of
the few good places where scripting could help!). It&amp;rsquo;s worth noting that many
of the legacy clients change their help output depending on the API version
requested so you should run this a couple of times with different API versions.
For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ OS_COMPUTE_API_VERSION&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;2.88 nova help
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The final and most involved step required is examining individual commands.
There are two things we&amp;rsquo;re concerned with: missing options and missing
microversion support. Assessing the first can be achieved similarly to
identifying missing commands: just run e.g. &lt;code&gt;nova help boot&lt;/code&gt;, capture the
output and compare the options supported with those supported by the
equivalent OSC command (&lt;code&gt;openstack server create&lt;/code&gt; in this case). The second
is a little trickier and usually involves manual inspection of the
corresponding shell and client library code in the legacy code. You could also
look at the API reference documentation for the particular service but projects
like Cinder have large documentation gaps that means the client is a better
source of truth.&lt;/p&gt;
&lt;h2 id=&#34;how-do-i-fix-them&#34;&gt;How do I fix them?&lt;/h2&gt;
&lt;p&gt;Just push a patch. It probably makes sense to push a highly WIP patch first
since OSC has some design conventions, noted in the &lt;a href=&#34;https://docs.openstack.org/python-openstackclient/latest/contributor/&#34;&gt;contributor
guide&lt;/a&gt;, which can take some time to get a feel for. There
are also plenty of existing examples to look for: search for the topics
&lt;code&gt;cinder-gaps&lt;/code&gt; and &lt;code&gt;nova-gaps&lt;/code&gt; to get an idea.&lt;/p&gt;
&lt;h2 id=&#34;what-about-non-core-projects&#34;&gt;What about non-&amp;ldquo;core&amp;rdquo; projects?&lt;/h2&gt;
&lt;p&gt;OSC is built on top of &lt;a href=&#34;https://github.com/openstack/osc-lib&#34;&gt;&lt;code&gt;osc-lib&lt;/code&gt;&lt;/a&gt;, which is in turn built on top of
&lt;a href=&#34;https://github.com/openstack/cliff&#34;&gt;&lt;code&gt;cliff&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;cliff&lt;/code&gt; is highly extensible and provides a number of hook
points that allow users to build plugins which can extend an existing CLI tool.
Projects like &lt;a href=&#34;https://github.com/openstack/python-manilaclient/blob/2c3d29313c18015f73982269401761608b9ece45/setup.cfg#L34-L155&#34;&gt;&lt;code&gt;manila&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/openstack/python-ironicclient/blob/489bb43058d446a577377cff5828e98d13c79967/setup.cfg#L29-L127&#34;&gt;&lt;code&gt;ironic&lt;/code&gt;&lt;/a&gt; and
&lt;a href=&#34;https://github.com/openstack/python-cyborgclient/blob/501d9f3e2c3a161b2ec0ae433d6c8b1f4ae32ea9/setup.cfg#L31-L52&#34;&gt;&lt;code&gt;cyborg&lt;/code&gt;&lt;/a&gt; all provide their own OSC plugins. This is also the
mechanism that neutron uses to provide &lt;a href=&#34;https://github.com/openstack/python-neutronclient/blob/7467c710f624aee80de8ef487e5b2c0e78143214/setup.cfg#L32-L172&#34;&gt;more advanced commands&lt;/a&gt;.
Many of these projects never had a legacy client to speak of, so there are
fewer (if any) gaps to worry about.&lt;/p&gt;
&lt;h2 id=&#34;what-about-openstacksdk&#34;&gt;What about OpenStackSDK?&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;re working on that too and the work has been mostly going on in parallel.
There has been debate on whether newly added commands should use SDK or the
legacy client under the hood. I tend to favour using the latter first and
switching to SDK later since it makes it easier to compare the OSC and legacy
client shell implementations during development and review. In addition, an OSC
command can sometimes be the first real-world user of the SDK implementation
which can highlight bugs. This is particularly an issue for the quirkier, less
utilized APIs. It would be a shame to get stuck implementing an OSC command due
to an SDK bug. The sole exception to this is where library clients have removed
support for an API, such as Cinder dropping support for API v2 in &lt;a href=&#34;https://github.com/openstack/python-cinderclient/commit/cb5235250cc10957b4392764b1dc3a6757784da5&#34;&gt;cinderclient
9.0.0&lt;/a&gt;. In this case, we&amp;rsquo;ve no choice but to use SDK.&lt;/p&gt;
&lt;h2 id=&#34;where-can-i-get-more-info--how-can-i-get-involved&#34;&gt;Where can I get more info? / How can I get involved?&lt;/h2&gt;
&lt;p&gt;Just ask! You can find us on IRC at
&lt;a href=&#34;irc://irc.oftc.net/#openstack-sdks&#34;&gt;#openstack-sdks&lt;/a&gt; (OFTC) or via email at
&lt;a href=&#34;mailto:openstack-discuss@openstack.org&#34;&gt;openstack-discuss@openstack.org&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Issues pairing Beats Studio Buds</title>
      <link>https://that.guru/blog/beats-studio-buds-pairing/</link>
      <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://that.guru/blog/beats-studio-buds-pairing/</guid>
      <description>&lt;p&gt;I recently had an issue pairing a set of &lt;a href=&#34;https://www.beatsbydre.com/earbuds/studio-buds&#34;&gt;Beats Studio Buds&lt;/a&gt; to my
laptop. The Apple website suggests that pairing the headphones &lt;a href=&#34;https://support.apple.com/en-us/HT212254&#34;&gt;was as simple
as pressing the system button until the LED started flashing white&lt;/a&gt;.
However, this wasn&amp;rsquo;t happening. Instead, I was seeing three red LED flashes
each time I opened the case and pressing the button did nothing. Attempting to
reset the headphones &lt;a href=&#34;https://support.apple.com/en-us/HT212505&#34;&gt;by holding the system button for 15 seconds&lt;/a&gt;
didn&amp;rsquo;t help either. After 30+ minutes of messing with various bluetooth
headphones, I realized the issue was neither the Linux Bluetooth stack (for
once!) or a defective button in the case: I simply needed to charge the case.
Three red LED flashes indicates a dead case battery. Having put the case
charging (yay, USB C), things paired just fine. TIL.&lt;/p&gt;
&lt;p&gt;Leaving this here since Google wasn&amp;rsquo;t all that helpful when I tried looking for
similar issues.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reproducing DevStack-based OSC Gate Jobs Locally</title>
      <link>https://that.guru/blog/reproducing-devstack-gate-jobs-locally/</link>
      <pubDate>Tue, 14 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://that.guru/blog/reproducing-devstack-gate-jobs-locally/</guid>
      <description>&lt;p&gt;The &lt;code&gt;python-openstackclient&lt;/code&gt; project provides two types of tests: &lt;a href=&#34;https://opendev.org/openstack/python-openstackclient/src/branch/master/openstackclient/tests/unit&#34;&gt;unit
tests&lt;/a&gt; with mocked server responses and &lt;a href=&#34;https://opendev.org/openstack/python-openstackclient/src/branch/master/openstackclient/tests/functional&#34;&gt;functional
tests&lt;/a&gt; that require a real server deployed. The latter expect a
specific DevStack-based deployment and attempts to run these tests against a
&amp;ldquo;standard&amp;rdquo; DevStack deployment with minimal configuration or a deployment
created by another tool with result in a lot of test failures.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;==============================
Failed 48 tests - output below:
==============================

setUpClass (openstackclient.tests.functional.network.v2.test_network_meter_rule.TestMeterRule)
----------------------------------------------------------------------------------------------

Captured traceback:
~~~~~~~~~~~~~~~~~~~
    Traceback (most recent call last):

      File &amp;#34;/home/fedora/python-openstackclient/openstackclient/tests/functional/network/v2/test_network_meter_rule.py&amp;#34;, line 34, in setUpClass
    json_output = json.loads(cls.openstack(

      File &amp;#34;/home/fedora/python-openstackclient/openstackclient/tests/functional/base.py&amp;#34;, line 74, in openstack
    return execute(

      File &amp;#34;/home/fedora/python-openstackclient/openstackclient/tests/functional/base.py&amp;#34;, line 41, in execute
    raise exceptions.CommandFailed(

    tempest.lib.exceptions.CommandFailed: Command &amp;#39;openstack --os-cloud=devstack-admin network meter create -f json 82c6e512857e40d78e86b9db54c66e73&amp;#39; returned non-zero exit status 1.
stdout:

stderr:
b&amp;#39;ResourceNotFound: 404: Client Error for url: http://140.211.166.52:9696/v2.0/metering/metering-labels, The resource could not be found.\n&amp;#39;


openstackclient.tests.functional.network.v2.test_network_qos_rule.NetworkQosRuleTestsBandwidthLimit.test_qos_rule_create_delete
-------------------------------------------------------------------------------------------------------------------------------

Captured traceback:
~~~~~~~~~~~~~~~~~~~
    Traceback (most recent call last):

      File &amp;#34;/home/fedora/python-openstackclient/openstackclient/tests/functional/network/v2/test_network_qos_rule.py&amp;#34;, line 161, in setUp
    self.openstack(

      File &amp;#34;/home/fedora/python-openstackclient/openstackclient/tests/functional/base.py&amp;#34;, line 74, in openstack
    return execute(

      File &amp;#34;/home/fedora/python-openstackclient/openstackclient/tests/functional/base.py&amp;#34;, line 41, in execute
    raise exceptions.CommandFailed(

    tempest.lib.exceptions.CommandFailed: Command &amp;#39;openstack --os-cloud=devstack-admin network qos policy create qos_policy_178299ca49d544bb9d5c145ee4c71d80&amp;#39; returned non-zero exit status 1.
stdout:

stderr:
b&amp;#39;ResourceNotFound: 404: Client Error for url: http://140.211.166.52:9696/v2.0/qos/policies, The resource could not be found.\n&amp;#39;


openstackclient.tests.functional.network.v2.test_network_qos_rule.NetworkQosRuleTestsBandwidthLimit.test_qos_rule_list
----------------------------------------------------------------------------------------------------------------------

...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But how does one actually configure their system appropriately. Docs are
non-existent but we know that the CI works so clearly that&amp;rsquo;s a good starting
place. As you&amp;rsquo;ll likely know if you&amp;rsquo;re reading this, the OpenStack community
uses &lt;a href=&#34;https://zuul-ci.org/&#34;&gt;Zuul&lt;/a&gt; for testing. You can see the zuul job configuration for
projects in either a &lt;code&gt;.zuul.yaml&lt;/code&gt; file or in various YAML files in a &lt;code&gt;.zuul.d&lt;/code&gt;
directory, both of which can be found in the root directory of the project.
&lt;em&gt;python-openstackclient&lt;/em&gt; uses the former, which you can see
&lt;a href=&#34;https://github.com/openstack/python-openstackclient/blob/master/.zuul.yaml&#34;&gt;here&lt;/a&gt;. Looking at that, we can see the definition for the
&lt;a href=&#34;https://github.com/openstack/python-openstackclient/blob/ed304992eb/.zuul.yaml#L80-L114&#34;&gt;&lt;code&gt;osc-functional- devstack&lt;/code&gt; job&lt;/a&gt;, which inherits from
the &lt;a href=&#34;https://github.com/openstack/python-openstackclient/blob/ed304992eb/.zuul.yaml#L40-L78&#34;&gt;&lt;code&gt;osc-functional-devstack-base&lt;/code&gt; job&lt;/a&gt;, which
in turns inherits from the &lt;a href=&#34;https://github.com/openstack/devstack/blob/8eede1fc3/.zuul.yaml#L822-L836&#34;&gt;&lt;code&gt;devstack-tox-functional&lt;/code&gt;
job&lt;/a&gt; and so on&amp;hellip;&lt;/p&gt;
&lt;p&gt;Looking at the &lt;code&gt;osc-functional-devstack&lt;/code&gt; job, we can see that it enables the
neutron DevStack plugin and sets a couple of neutron-related feature flags and
some other misc attributes in DevStack via the &lt;a href=&#34;https://github.com/openstack/python-openstackclient/blob/ed304992eb/.zuul.yaml#L87-L113&#34;&gt;&lt;code&gt;devstack_plugins&lt;/code&gt;
&lt;code&gt;devstack_services&lt;/code&gt;, and &lt;code&gt;devstack_localrc&lt;/code&gt; job variables,
respectively&lt;/a&gt;. You can see the documentation for these
variables &lt;a href=&#34;https://docs.openstack.org/devstack/latest/zuul_roles.html&#34;&gt;in the DevStack docs&lt;/a&gt; and
you can use the codesearch.o.o service to figure out what enabling each of these
services or specifying those extra config variables will do, like &lt;a href=&#34;https://codesearch.opendev.org/?q=neutron-conntrack-helper&amp;amp;i=nope&amp;amp;literal=nope&amp;amp;files=&amp;amp;excludeFiles=&amp;amp;repos=&#34;&gt;this
one&lt;/a&gt;. If you want to see the definition of the Ansible role
that these variables are being passed to, &lt;a href=&#34;https://github.com/openstack/devstack/blob/8eede1fc3/roles/write-devstack-local-conf/library/devstack_local_conf.py&#34;&gt;you can look at that
too&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you read through all the docs, you&amp;rsquo;ll eventually come to the conclusion that
to get this to work locally, you&amp;rsquo;re going to need to add the following to your
&lt;code&gt;local.conf&lt;/code&gt; when deploying DevStack:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Plugin configuration
enable_plugin neutron https://opendev.org/openstack/neutron

# Service configuration
## Disable OVN services
disable_service br-ex-tcpdump
disable_service br-int-flows
disable_service ovn-controller
disable_service ovn-northd
disable_service ovs-vswitchd
disable_service ovsdb-server
disable_service q-ovn-metadata-agent

## Neutron services
enable_service q-agt
enable_service q-dhcp
enable_service q-l3
enable_service q-meta
enable_service neutron-network-segment-range
enable_service neutron-segments
enable_service q-metering
enable_service q-qos
enable_service neutron-tag-ports-during-bulk-creation
enable_service neutron-conntrack-helper

# Misc configuration
Q_AGENT=openvswitch
Q_ML2_TENANT_NETWORK_TYPE=vxlan
Q_ML2_PLUGIN_MECHANISM_DRIVERS=openvswitch
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Add this to your otherwise uncomplicated &lt;code&gt;local.conf&lt;/code&gt; and in theory things
should just work (TM). There might be more to it but hopefully there&amp;rsquo;s enough
here for folks to figure out how to debug things if so.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Resolving an annoying PyQt Warning in OpenStackClient</title>
      <link>https://that.guru/blog/openstackclient-qt-warning/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://that.guru/blog/openstackclient-qt-warning/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve recently been seeing the following warning when running &lt;code&gt;openstack&lt;/code&gt;
commands locally:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ openstack server list -n -f yaml
QSocketNotifier: Can only be used with threads started with QThread
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This made no sense: OSC doesn&amp;rsquo;t use Qt so why am I seeing errors related to
this? I also was only seeing it on one host. What gives? Well it took me a
while but it turned out this wasn&amp;rsquo;t due to OSC or even one of its direct
dependencies: it was an indirect dependency, &lt;code&gt;pyperclip&lt;/code&gt;. By exporting
&lt;code&gt;PYTHONPROFILEIMPORTTIME=1&lt;/code&gt;, I was able to figure out what import caused the
error:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ export PYTHONPROFILEIMPORTTIME=1
$ openstack server list -n -f yaml
import time: self [us] | cumulative | imported package
import time:       647 |        647 |   _io
...
import time:       160 |        345 |   osc_lib.command.commandmanager
import time:       280 |        280 |           _compat_pickle
import time:       227 |        227 |           _pickle
import time:        64 |         64 |               org
import time:        16 |         79 |             org.python
import time:        15 |         93 |           org.python.core
import time:       650 |       1248 |         pickle
import time:       523 |       1771 |       logging.handlers
import time:       161 |        161 |               wcwidth.table_wide
import time:       342 |        342 |               wcwidth.table_zero
import time:       129 |        129 |               wcwidth.unicode_versions
import time:       267 |        897 |             wcwidth.wcwidth
import time:       199 |       1096 |           wcwidth
import time:     12691 |      13786 |         cmd2.ansi
import time:       113 |        113 |           cmd2.constants
import time:      1116 |       1228 |         cmd2.argparse_custom
import time:       183 |        183 |             cmd2.exceptions
import time:       922 |        922 |             cmd2.utils
import time:       235 |       1340 |           cmd2.command_definition
import time:       955 |        955 |           cmd2.table_creator
import time:       404 |       2698 |         cmd2.argparse_completer
import time:       264 |        264 |           cmd
import time:       328 |        328 |             _sysconfigdata__linux_x86_64-linux-gnu
import time:      1251 |       1578 |           pydoc
import time:       133 |        133 |             codeop
import time:       181 |        314 |           code
import time:       151 |        151 |                 attr._compat
import time:       102 |        102 |                   attr._config
import time:       181 |        181 |                     attr.exceptions
import time:       107 |        287 |                   attr.setters
import time:      2597 |       2985 |                 attr._make
import time:       180 |       3315 |               attr.converters
import time:       132 |        132 |               attr.filters
import time:      3697 |       3697 |               attr.validators
import time:       161 |        161 |               attr._cmp
import time:       139 |        139 |               attr._funcs
import time:       573 |        573 |               attr._version_info
import time:       142 |        142 |               attr._next_gen
import time:       285 |       8439 |             attr
import time:       264 |        264 |               shlex
import time:      3435 |       3698 |             cmd2.parsing
import time:      1509 |      13645 |           cmd2.plugin
import time:       364 |        364 |                 _ctypes
import time:       186 |        186 |                 ctypes._endian
import time:       589 |       1138 |               ctypes
import time:       306 |       1444 |             pyperclip
import time:        76 |         76 |             gtk
import time:        71 |         71 |             qtpy
import time:       220 |        220 |             PyQt5
import time:        54 |         54 |               qtpy
import time:        17 |         71 |             qtpy.QtWidgets
import time:       342 |        342 |               PyQt5.sip
import time:      6530 |       6530 |               PyQt5.QtCore
import time:      5953 |       5953 |               PyQt5.QtGui
import time:     14655 |      27478 |             PyQt5.QtWidgets
QSocketNotifier: Can only be used with threads started with QThread
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As for why I wasn&amp;rsquo;t seeing this on other hosts: those other hosts didn&amp;rsquo;t have
PyQT5 installed.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo dnf remove PyQt5
Dependencies resolved.
=====================================================================================================================================================================================================================
 Package                                                     Architecture                                 Version                                                Repository                                     Size
=====================================================================================================================================================================================================================
Removing:
 python3-qt5                                                 x86_64                                       5.15.6-3.fc36                                          @fedora                                       7.0 M
Removing dependent packages:
 krop                                                        noarch                                       0.5.1-13.fc36                                          @fedora                                       6.5 k
Removing unused dependencies:
 poppler-qt5                                                 x86_64                                       22.01.0-3.fc36                                         @fedora                                       632 k
 python-qt5-rpm-macros                                       noarch                                       5.15.6-3.fc36                                          @fedora                                       143
 python3-PyPDF2                                              noarch                                       1.26.0-19.fc36                                         @fedora                                       520 k
 python3-krop                                                noarch                                       0.5.1-13.fc36                                          @fedora                                       225 k
 python3-poppler-qt5                                         x86_64                                       21.1.0-5.fc36                                          @fedora                                       562 k
 python3-pyqt5-sip                                           x86_64                                       12.9.0-3.fc36                                          @fedora                                       154 k
 python3-qt5-base                                            x86_64                                       5.15.6-3.fc36                                          @fedora                                        17 M
 qt5-qtconnectivity                                          x86_64                                       5.15.3-1.fc36                                          @fedora                                       1.4 M

Transaction Summary
=====================================================================================================================================================================================================================
Remove  10 Packages

Freed space: 28 M
Is this ok [y/N]: y
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I&amp;rsquo;d installed &lt;code&gt;krop&lt;/code&gt; at some point and it had dragged in various Python
dependencies as a result. The ultimate fix probably exists somewhere in
pyperclip (or even PyQt5) but uninstalling things was enough to get rid of this
annoying warning.&lt;/p&gt;
&lt;p&gt;Hopefully Google finds this page in case anyone is similarly frustrated by
this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Handling the switch to the Cloud Controller Manager (CCM) with OpenShift Operators</title>
      <link>https://that.guru/blog/user-managed-configuration-in-cccmo/</link>
      <pubDate>Mon, 09 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://that.guru/blog/user-managed-configuration-in-cccmo/</guid>
      <description>&lt;p&gt;Recent versions of Kubernetes have begun moving functionality that previously
existed in the core project out to separate projects. One such set of
functionality is the cloud provider-specific code, which is now handled by the
&lt;a href=&#34;https://kubernetes.io/docs/concepts/architecture/cloud-controller/&#34;&gt;Cloud Controller Manager&lt;/a&gt; project. This is well described in the
&lt;a href=&#34;https://kubernetes.io/docs/tasks/administer-cluster/running-cloud-controller/&#34;&gt;Kubernetes documentation&lt;/a&gt;.&lt;/p&gt;
&lt;aside class=&#34;admonition note&#34;&gt;
	
	
	&lt;div class=&#34;admonition-content&#34;&gt;Cloud providers implemented using Cloud Controller Manager may be referred to
as &lt;em&gt;external&lt;/em&gt; cloud providers (after the argument used to inform &lt;code&gt;kublet&lt;/code&gt; to
use CCM, &lt;code&gt;--cloud-provider=external&lt;/code&gt;) while the existing in-tree cloud
providers may be referred to as &lt;em&gt;internal&lt;/em&gt; or &lt;em&gt;legacy&lt;/em&gt; cloud providers. We use
these terms throughout.&lt;/div&gt;
&lt;/aside&gt;

&lt;p&gt;In the 4.12 release, we hope to switch OpenShift deployments running on
OpenStack clouds from the legacy OpenStack cloud provider to the external
OpenStack cloud provider, &lt;a href=&#34;https://github.com/kubernetes/cloud-provider-openstack/blob/master/docs/openstack-cloud-controller-manager/using-openstack-cloud-controller-manager.md&#34;&gt;OpenStack Cloud Controller Manager (OCCM)&lt;/a&gt;.
There are a couple of steps needed to make this happen, one of which is taking
user-provided configuration for the legacy cloud provider and mapping it to
configuration for the shiny new external cloud provider. This is necessary to
ensure any user-provided configuration is retained and the upgrade doesn&amp;rsquo;t
break the deployment. In the case of the OpenStack provider, this configuration
is INI-style and thankfully quite similar for both the legacy and external
cloud provider implementations.&lt;/p&gt;
&lt;p&gt;To handle the migration of configuration in OpenShift deployments, we are
relying on the &lt;a href=&#34;https://github.com/openshift/cluster-cloud-controller-manager-operator&#34;&gt;Cluster Cloud Controller Manager Operator (CCCMO)&lt;/a&gt;. This
operator is already responsible for managing the lifecycle of CCM on OpenShift
deployments, including configuration of CCM, so naturally it is a good fit for
this kind of task. A detailed description of the changes we ultimately made,
along with motivation for same, can be found &lt;a href=&#34;https://github.com/openshift/enhancements/pull/1009&#34;&gt;in this enhancement&lt;/a&gt;
(the &lt;a href=&#34;https://github.com/openshift/cluster-cloud-controller-manager-operator/pull/178&#34;&gt;pull request itself&lt;/a&gt; is probably quite helpful also, if you read Go)
but I hope to explain them at a high level here since the paradigms used are
similar to those found in other operators and are being used to manage other
complex upgrades, such as the switch from in-tree block storage drivers to
Cluster Storage Interface (CSI) drivers.&lt;/p&gt;
&lt;h2 id=&#34;how-cccmo-generates-configuration&#34;&gt;How CCCMO generates configuration&lt;/h2&gt;
&lt;p&gt;The first step in understanding how CCCMO can be used to manage the migration
of configuration is to examine how CCCMO sources configuration - specifically
user-provided configuration - and uses this to generate the configuration
actually used for CCM. Once we understand this, we can decide at what points to
hook in and customise or translate this user-provided configuration. We can
also use this model in other operators. Thankfully, in the case of CCCMO this
sourcing and generation of configuration is pretty simple.&lt;/p&gt;
&lt;p&gt;Firstly, the operator attempt to retrieve config from the
&lt;code&gt;openshift-config-managed / kube-cloud-config&lt;/code&gt; config map:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ oc get cm/kube-cloud-config -n openshift-config-managed -o yaml
apiVersion: v1
data:
  cloud.conf: |
    [Global]
    secret-name = openstack-credentials
    secret-namespace = kube-system
    region = regionOne
    [LoadBalancer]
    use-octavia = True
kind: ConfigMap
metadata:
  creationTimestamp: &amp;quot;2022-02-25T17:01:58Z&amp;quot;
  name: kube-cloud-config
  namespace: openshift-config-managed
  resourceVersion: &amp;quot;3853&amp;quot;
  uid: c23c14b7-66db-431c-a723-59439f946f80
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This can be seen &lt;a href=&#34;https://github.com/openshift/cluster-cloud-controller-manager-operator/blob/fde5bd72/pkg/controllers/cloud_config_sync_controller.go#L63-L68&#34;&gt;here&lt;/a&gt;.
The reason that it searches for this config map specifically is historical:
this is the config map generated by the &lt;a href=&#34;https://github.com/openshift/cluster-config-operator&#34;&gt;Cluster Config Operator (CCO)&lt;/a&gt;,
which is used to configure the legacy cloud provider (among other things). CCO
manipulates user-provided configuration for some cloud providers (specifically
AWS and Azure) so I guess the idea here was to avoid re-implementing this
transformation logic in CCCMO. Everything in the &lt;code&gt;openshift-config-managed&lt;/code&gt;
namespace is owned by CCO and is not intended to be modified by a user (in
fact, attempts to modify it will likely be futile and the operator will quickly
erase those changes).&lt;/p&gt;
&lt;p&gt;If the lookup of the &lt;code&gt;openshift-config-managed / kube-cloud-config&lt;/code&gt; config map
fails, we attempt to retrieve configuration from the &lt;code&gt;openshift-config / cloud-provider-config&lt;/code&gt; config map:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ oc get cm/cloud-provider-config -n openshift-config -o yaml
apiVersion: v1
data:
  config: |
    [Global]
    secret-name = openstack-credentials
    secret-namespace = kube-system
    region = regionOne
    [LoadBalancer]
    use-octavia = True
kind: ConfigMap
metadata:
  creationTimestamp: &amp;quot;2022-02-25T17:00:15Z&amp;quot;
  name: cloud-provider-config
  namespace: openshift-config
  resourceVersion: &amp;quot;1802&amp;quot;
  uid: 45bda3c8-8866-4aea-92be-921502ff2055
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This can be seen &lt;a href=&#34;https://github.com/openshift/cluster-cloud-controller-manager-operator/blob/fde5bd72/pkg/controllers/cloud_config_sync_controller.go#L73-L87&#34;&gt;here&lt;/a&gt;.
Once again, the reason we use this config map is historical and is based on
what CCO uses. While things in the &lt;code&gt;openshift-config-managed&lt;/code&gt; namespace are
not user editable, the &lt;code&gt;openshift-config&lt;/code&gt; namespace is the namespace for
&amp;ldquo;user-managed&amp;rdquo; configuration or configuration that things like operators are
not allowed to modify.&lt;/p&gt;
&lt;aside class=&#34;admonition note&#34;&gt;
	
	
	&lt;div class=&#34;admonition-content&#34;&gt;&lt;p&gt;The &lt;strong&gt;name&lt;/strong&gt; of this config map (as opposed to the namespace) is actually
cloud/infrastructure dependent and this is simply the OpenStack name. It is
defined as an attribute on the &lt;code&gt;cluster&lt;/code&gt; infrastructure resource.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ oc get infrastructure/cluster -o jsonpath=&amp;quot;{.spec.cloudConfig.name}&amp;quot;
cloud-provider-config
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/aside&gt;

&lt;p&gt;If the both lookup fails, we error out. However, this is unlikely since the
installer should create it as seen
&lt;a href=&#34;https://github.com/openshift/installer/blob/fd00a659/pkg/asset/manifests/cloudproviderconfig.go#L78-L93&#34;&gt;here&lt;/a&gt;.
Assuming one of them does exist, we sync whatever we found to the
&lt;code&gt;openshift-cloud-controller-manager / cloud-conf&lt;/code&gt; config map:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ oc get cm/cloud-conf -n openshift-cloud-controller-manager -o yaml
apiVersion: v1
data:
  cloud.conf: |
    [Global]
    secret-name = openstack-credentials
    secret-namespace = kube-system
    region = regionOne
    [LoadBalancer]
    use-octavia = True
kind: ConfigMap
metadata:
  creationTimestamp: &amp;quot;2022-02-25T17:01:08Z&amp;quot;
  name: cloud-conf
  namespace: openshift-cloud-controller-manager
  resourceVersion: &amp;quot;2519&amp;quot;
  uid: cbbeedaf-41ed-41c2-9f37-4885732d3677
&lt;/code&gt;&lt;/pre&gt;
&lt;aside class=&#34;admonition note&#34;&gt;
	
	
	&lt;div class=&#34;admonition-content&#34;&gt;&lt;p&gt;You can list all config maps in a namespace like this using:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ oc get cm -n openshift-cloud-controller-manager \
    -o jsonpath=&#39;{range .items[*]}{.metadata.name}{&amp;quot;\n&amp;quot;}{end}&#39;
ccm-trusted-ca
cloud-conf
kube-root-ca.crt
openshift-service-ca.crt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/aside&gt;

&lt;p&gt;This can be seen &lt;a href=&#34;https://github.com/openshift/cluster-cloud-controller-manager-operator/blob/fde5bd72/pkg/controllers/cloud_config_sync_controller.go#L96-L100&#34;&gt;here&lt;/a&gt;.
In this instance, the namespace isn&amp;rsquo;t actually locked in. It is possible to
configure the &lt;code&gt;cluster-controller-manager-operator&lt;/code&gt; binary with a &lt;code&gt;--namespace&lt;/code&gt;
argument and this option defaults to &lt;code&gt;openshift-cloud-controller-manager&lt;/code&gt;, as
seen &lt;a href=&#34;https://github.com/openshift/cluster-cloud-controller-manager-operator/blob/fde5bd72/cmd/cluster-cloud-controller-manager-operator/main.go#L85-L89&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;how-cccmo-handles-upgrades&#34;&gt;How CCCMO handles upgrades&lt;/h2&gt;
&lt;p&gt;(for OpenStack clouds on OpenShift 4.11 or later)&lt;/p&gt;
&lt;p&gt;So now that we understand how CCCMO sources user-provided configuration and
generates the resulting configuration used by Cloud Controller Manager, it&amp;rsquo;s
time to examine how we&amp;rsquo;ve decided to handle the migration of configuration for
legacy cloud providers to configuration suitable for external cloud provides.
As noted above, previously CCCMO took user-provided configuration from a config
map in one namespace and copied it to a config map in another namespace. It
should be pretty obvious that there&amp;rsquo;s no reason this copy has to be a
straightforward copy: we could modify the input config map before we dump it
back out. This is of course exactly what we did.&lt;/p&gt;
&lt;p&gt;Starting with the upcoming OpenShift 4.11 release, CCCMO provides configuration
&amp;ldquo;transformers&amp;rdquo;. Transformers simply load configuration provided by users, do
some basic validation, and then transform things by dropping options that are
no longer relevant, adding options that are now necessary, and renaming or
modifying options that have changed between the legacy. This idea isn&amp;rsquo;t
particularly novel - as noted previously, CCO was already doing something very
similar for AWS and Azure - but it works. Annoyingly these transformers must be
cloud-specific since the CCM binary used for each cloud provider expects a
radically different configuration files (in the case of the OpenStack cloud
provider this is an INI-style configuration file while Azure expects a
YAML-formatted file). As a result, we have only implemented the OpenStack
transformer for now. However, in the future we will likely implement additional
transformers for at least AWS and Azure since as noted previously CCO is
already doing some transformation here.&lt;/p&gt;
&lt;p&gt;Specifically, the transformer for OpenStack clouds in CCCMO currently does the
following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Drops the &lt;code&gt;[Global] secret-name&lt;/code&gt;, &lt;code&gt;[Global] secret-namespace&lt;/code&gt;, and &lt;code&gt;[Global] kubeconfig-path&lt;/code&gt; options, since these aren&amp;rsquo;t applicable for the external
cloud provider (the first two are OpenShift-only modifications). This inline
configuration has been replaced by configuration stored in a &lt;code&gt;clouds.yaml&lt;/code&gt;
file. Speaking of which&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Adds the &lt;code&gt;[Global] use-clouds&lt;/code&gt;, &lt;code&gt;[Global] clouds-file&lt;/code&gt;, and &lt;code&gt;[Global] cloud&lt;/code&gt;
options.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Drops the entire &lt;code&gt;[BlockStorage]&lt;/code&gt; section since external cloud providers are
no longer responsible for anything storage&amp;rsquo;y (this is now handled by Cluster
Storage Interface (CSI) drivers, including the Manila CSI driver and Cinder
CSI driver)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Adds or sets the &lt;code&gt;[LoadBalancer] use-octavia&lt;/code&gt; and &lt;code&gt;[LoadBalancer] enabled&lt;/code&gt;
options, depending on the specific deployment configuration (i.e. is Kuryr in
use?)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of this can be seen &lt;a href=&#34;https://github.com/openshift/cluster-cloud-controller-manager-operator/blob/13a37fe2/pkg/cloud/openstack/openstack.go#L136-L213&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Hopefully this helps shine a little light on how CCCMO (and to a lesser degree,
CCM and CCO) works and operates, at least from a OpenStack perspective. For
most users, none of the above should matter: the OpenShift documentation
describes how configuration of the cloud provider, be it internal or external,
should happen via the &lt;code&gt;openshift-config / cloud-provider-config&lt;/code&gt; config map and
all of this transformation logic should be effectively invisible. However, when
things go wrong, it can be helpful to know in which dark corners to look 😄&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What API microversion does OpenStackClient use?</title>
      <link>https://that.guru/blog/openstackclient-nova-microversions/</link>
      <pubDate>Tue, 29 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://that.guru/blog/openstackclient-nova-microversions/</guid>
      <description>&lt;p&gt;I was recently asked the following question:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What Nova API microversion does OpenStackClient use when making requests to
Nova?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The answer to this question doesn&amp;rsquo;t currently seem to appear anywhere in the
OpenStackClient (OSC) documentation or man pages, so I&amp;rsquo;m going to note it here
for posterity. The unfortunate answer is &amp;ldquo;it depends&amp;rdquo;. More specifically, it
depends on which library OSC is using internally for the specific command.
Is it &lt;code&gt;python-novaclient&lt;/code&gt; or is it &lt;code&gt;openstacksdk&lt;/code&gt;?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;python-novaclient&lt;/code&gt; doesn&amp;rsquo;t support auto-negotiation and will use 2.1 by
default. The user can override this using an explicit microversion or a
&lt;code&gt;2.latest&lt;/code&gt; &amp;ldquo;magic&amp;rdquo; value. The &lt;code&gt;2.latest&lt;/code&gt; unfortunately doesn&amp;rsquo;t mean
auto-negotiation: &lt;code&gt;latest&lt;/code&gt; refers to the latest microversion that
&lt;em&gt;novaclient&lt;/em&gt; knows about, not the Nova server you&amp;rsquo;re talking to. If you were
to use a novaclient release from the same release series as the Nova server
you&amp;rsquo;re talking to, then things things would &amp;ldquo;magically&amp;rdquo; align. However, if
you use a newer version of novaclient then things are liable to crash and
burn with a &amp;ldquo;microversion not supported&amp;rdquo; error message.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;openstacksdk&lt;/code&gt; &lt;em&gt;does&lt;/em&gt; support auto-negotiation, so any commands implemented
using this library will attempt to use either the maximum explicit version
supported by the &lt;code&gt;openstacksdk&lt;/code&gt; API implementation (each API, represented as
a &lt;code&gt;Resource&lt;/code&gt; object, specifies its own max microversion value) or the highest
version supported by the server, whichever is lower. This isn&amp;rsquo;t perfect - we
don&amp;rsquo;t currently encode a corresponding &amp;ldquo;minimum microversion&amp;rdquo; so it won&amp;rsquo;t
necessarily bail correctly if you&amp;rsquo;re using a server that simply doesn&amp;rsquo;t
support the given API and we haven&amp;rsquo;t implemented support for all
microversions - but you can always override the version using
&lt;code&gt;--os-compute-api-version&lt;/code&gt; etc. if needed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This generally applies for other services too, so calls to the block storage
service that use &lt;code&gt;python-cinderclient&lt;/code&gt; will not auto-negotiate while calls that
have been migrated to use &lt;code&gt;openstacksdk&lt;/code&gt; will. The sole exception to this (that
I&amp;rsquo;m aware of) is Placement. The Placement OSC commands are provided by the
&lt;code&gt;osc-placement&lt;/code&gt; package, which provides its own API client implementation. This
supports neither auto-negotiation nor a &lt;code&gt;1.latest&lt;/code&gt; magic value, so you&amp;rsquo;ll
always need to manually specify an API version (via the
&lt;code&gt;--os-placement-api-version&lt;/code&gt; command line flag, &lt;code&gt;OS_PLACEMENT_API_VERSION&lt;/code&gt;
environment variable or &lt;code&gt;placement_api_version&lt;/code&gt; option in &lt;code&gt;clouds.yaml&lt;/code&gt;) if you
want to use any API microversion other than 1.0. Hopefully we&amp;rsquo;ll eventually get
Placement fully integrated into &lt;code&gt;openstacksdk&lt;/code&gt; and auto-negotiation will be a
thing.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Add Another Network to ZNC</title>
      <link>https://that.guru/blog/add-another-network-to-znc/</link>
      <pubDate>Tue, 08 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://that.guru/blog/add-another-network-to-znc/</guid>
      <description>&lt;p&gt;ZNC allows you to connect to multiple networks (in fact, it&amp;rsquo;s one of the
benefits it touts on &lt;a href=&#34;https://wiki.znc.in/ZNC#Main_Features&#34;&gt;the wiki&lt;/a&gt;). It distinguishes between networks and
servers (a network can have multiple servers), so this can be slightly
confusing the first time you have to do it. The below is a quick summary of the
steps that are necessary to add a new network to your ZNC instance, in this
instance, &lt;a href=&#34;https://libera.chat/&#34;&gt;Libera&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say you&amp;rsquo;re already connected to a network, and let&amp;rsquo;s say that network is
&lt;a href=&#34;https://www.oftc.net/&#34;&gt;OFTC&lt;/a&gt;. You can verify this using following commands:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/znc ListNetworks
/znc ListServers
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;ListNetworks&lt;/code&gt; command will list this networks available to you.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/znc ListNetworks
+--------------+--------+----------------------+-----------------------------------+----------+
| Network      | On IRC | IRC Server           | IRC User                          | Channels |
+--------------+--------+----------------------+-----------------------------------+----------+
| oftc         | Yes    | weber.oftc.net       | stephenfin!~stephenfi@example.com | 9        |
+--------------+--------+----------------------+-----------------------------------+----------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;ListServers&lt;/code&gt; command will list the servers configured for this network.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/znc ListServers
+---------------+------+-----+----------+
| Host          | Port | SSL | Password |
+---------------+------+-----+----------+
| irc.oftc.net* | 6697 | SSL |          |
+---------------+------+-----+----------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now if you want to connect to another network, you can do so by adding a new
network followed by adding a new server on this network. As noted previously,
we&amp;rsquo;re going to configure a connection to Libera. First, we&amp;rsquo;d create the new
network.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/znc AddNetwork libera
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, we&amp;rsquo;d switch to this network:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/znc JumpNetwork libera
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we can add the server:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/znc AddServer irc.libera.chat +6697
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And finally, we can connect to the channels as usual:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/join #libera
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To switch between networks, you&amp;rsquo;ll need to use the &lt;code&gt;JumpNetwork&lt;/code&gt; command we
used above. Alternatively, you can connect to ZNC multiple times by adding the
&lt;code&gt;/{network}&lt;/code&gt; suffix to your username. For example, if you were previously
connecting using the username &lt;code&gt;foo&lt;/code&gt;, you&amp;rsquo;d add another network that would
connect using e.g. &lt;code&gt;foo/libera&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;More information the ZNC command can be found &lt;a href=&#34;https://wiki.znc.in/Using_commands&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use Pktgen-DPDK to send traffic between two Openstack VMs</title>
      <link>https://that.guru/blog/pktgen-between-two-openstack-guests/</link>
      <pubDate>Thu, 18 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://that.guru/blog/pktgen-between-two-openstack-guests/</guid>
      <description>&lt;p&gt;As part of my new OpenShift-flavoured responsibilities, I&amp;rsquo;ve been trying to get
DPDK-based applications running successfully on OpenShift-on-OpenStack. A
pre-requisite step to this was getting DPDK configured on the host. With this
done, I figured I&amp;rsquo;d investigate using an actual DPDK application in the guests.
I&amp;rsquo;d done this before, though it&amp;rsquo;s been a while, and I did eventually get there.
There were a few wrong turns along the way though, so I&amp;rsquo;ve documented the steps
I finally settled on here in case they&amp;rsquo;re helpful to anyone else.&lt;/p&gt;
&lt;h2 id=&#34;cloud-configuration&#34;&gt;Cloud configuration&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;re going to be using OpenStack to provision our guests, so we obviously need
an OpenStack cloud to point to. Given that we&amp;rsquo;re using DPDK in the guests, we
also need to ensure that OVS-DPDK is used on the host(s). You can use a
pre-existing cloud if you&amp;rsquo;re sure it provides the latter, but I decided to use
&lt;a href=&#34;https://github.com/shiftstack/dev-install&#34;&gt;&lt;code&gt;dev-install&lt;/code&gt;&lt;/a&gt; along with a modified version of the sample &lt;a href=&#34;https://github.com/shiftstack/dev-install/blob/main/example-overrides/local-overrides-osp16-2-with-dpdk.yaml&#34;&gt;OVS-DPDK
configuration file&lt;/a&gt; to install a small, TripleO Standalone-based OpenStack
deployment on a borrowed server.&lt;/p&gt;
&lt;aside class=&#34;admonition note&#34;&gt;
	
	
	&lt;div class=&#34;admonition-content&#34;&gt;&lt;p&gt;You can verify the OVS on the host is using DPDK using the following commands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;stack@host&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ ovs-vsctl --no-wait get Open_vSwitch . dpdk_initialized
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;stack@host&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ sudo ovs-vsctl --no-wait get Open_vSwitch . dpdk_version
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DPDK 20.11.1&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is discussed further in the OVS documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;/aside&gt;

&lt;p&gt;Once you have you cloud selected, you need to ensure you have appropriate
networks and an appropriate image and flavor. &lt;code&gt;dev-install&lt;/code&gt; provides most of
these for you, but can create them manually using the below commands.&lt;/p&gt;
&lt;p&gt;First, the image. We&amp;rsquo;re going to use CentOS 8 Stream:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;stack@host&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ wget https://cloud.centos.org/centos/8-stream/x86_64/images/CentOS-Stream-GenericCloud-8-20210210.0.x86_64.qcow2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;stack@host&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ openstack image create &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --disk-format qcow2 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --public &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --file CentOS-Stream-GenericCloud-8-20210210.0.x86_64.qcow2 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    centos8-stream
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, the flavor. This is a pretty standard flavor except that we need to use
pinned CPUs and enable hugepages:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;stack@host&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ openstack flavor create &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --vcpu &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --ram &lt;span style=&#34;color:#ae81ff&#34;&gt;8192&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --property hw:cpu_policy&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dedicated&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --property hw:mem_page_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;large&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    m1.large.nfv
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You might also need to create a suitable network. &lt;code&gt;dev-install&lt;/code&gt; configures a
&lt;code&gt;hostonly&lt;/code&gt; provider network. If using another method, you need to create your
own provider network. Adding this is an exercise left to the reader. Once done,
we need to create a tenant network that we&amp;rsquo;ll use to configure additional
ports. Create this, along with a router:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;stack@host&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ openstack network create internal_net
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;stack@host&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ openstack subnet create &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --network internal_net &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --subnet-range 192.168.200.0/24 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    internal_subnet
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;stack@host&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ openstack router create router_a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;stack@host&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ openstack router set --external-gateway hostonly router_a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;stack@host&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ openstack router add subnet router_a internal_subnet
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, you need some way to access the guest. Create and upload a keypair:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;stack@host&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ ssh-keygen
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;stack@host&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ openstack keypair create --public ~/.ssh/id_rsa.pub my-key
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;initial-server-setup&#34;&gt;Initial server setup&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;re going to create two servers: &lt;code&gt;guest-tx&lt;/code&gt; and &lt;code&gt;guest-rx&lt;/code&gt;. These are
effectively identical save for the configuration we&amp;rsquo;ll eventually pass to
Pktgen-DPDK. Create the servers:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;stack@host&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ openstack server create &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --image centos8-stream &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --flavor m1.large.nfv &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --network internal_net &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --key-name my-key &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --wait &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    guest-tx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;stack@host&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ openstack server create &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --image centos8-stream &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --flavor m1.large.nfv &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --network internal_net &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --key-name my-key &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --wait &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    guest-rx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Create two floating IPs and attach them to the server so we can SSH into the machine:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;stack@host&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ tx_fip&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;openstack floating ip create hostonly-dpdk -f value -c name | tr -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;stack@host&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ rx_fip&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;openstack floating ip create hostonly-dpdk -f value -c name | tr -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;stack@host&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ openstack server add floating ip guest-tx $tx_fip
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;stack@host&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ openstack server add floating ip guest-rx $rx_fip
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You&amp;rsquo;ll also need to add security groups to enable SSH and potentially ICMP
(for ping) access. If you deployed with &lt;code&gt;dev-install&lt;/code&gt; like I did, then these
will already be present. If you use another mechanism then you can create
these security groups like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;stack@host&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ openstack security group create --description allow_ssh allow_ssh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;stack@host&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ openstack security group rule create --protocol tcp --dst-port &lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt; allow_ssh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;stack@host&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ openstack security group create --description allow_ping allow_ping
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;stack@host&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ openstack security group rule create --protocol icmp allow_ping
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can then add these security groups to the servers:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;stack@host&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ openstack server add security group guest-tx allow_ssh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;stack@host&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ openstack server add security group guest-tx allow_ping
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;stack@host&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ openstack server add security group guest-rx allow_ssh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;stack@host&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ openstack server add security group guest-rx allow_ping
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should now be able to SSH into the instances:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;stack@host&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ openstack server ssh --login centos guest-tx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;attach-dpdk-interfaces&#34;&gt;Attach DPDK interfaces&lt;/h2&gt;
&lt;p&gt;With the initial server configuration out of the way, we can move onto
configuring the interfaces we will use for our DPDK application. It&amp;rsquo;s necessary
to use secondary interfaces since we&amp;rsquo;re going to be binding these interfaces
to the &lt;code&gt;vfio-pci&lt;/code&gt; driver. The second we do this, the devices will no longer
be usable by the kernel network stack which means, among other things, we
cannot use SSH on this interface. With that said, there&amp;rsquo;s not going to be
anything special about these interfaces: every interface attached to the
instance will be &lt;code&gt;vhostuser&lt;/code&gt; interface. We can confirm this by inspecting
the single interface currently attached to the instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;stack@host&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ sudo podman exec -it nova_libvirt virsh dumpxml &lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt; | xmllint --xpath &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/domain/devices/interface&amp;#39;&lt;/span&gt; -
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;aside class=&#34;admonition note&#34;&gt;
	
	
	&lt;div class=&#34;admonition-content&#34;&gt;We&amp;rsquo;re executing this in the &lt;code&gt;nova_libvirt&lt;/code&gt; container because this is how
TripleO Standalone, and thus &lt;code&gt;dev-intall&lt;/code&gt;, deploys libvirt.&lt;/div&gt;
&lt;/aside&gt;

&lt;p&gt;This will yield something like the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vhostuser&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;mac&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;address=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fa:16:3e:97:3d:11&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;source&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unix&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;path=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/var/lib/vhost_sockets/vhub20e827c-4a&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mode=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;server&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;target&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dev=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vhub20e827c-4a &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;model&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;virtio&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;driver&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rx_queue_size=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1024&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tx_queue_size=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1024&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;alias&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;net0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;address&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pci&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;domain=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0x0000&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bus=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0x00&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;slot=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0x03&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0x0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/interface&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With that bit out of the way, we can now add our additional network interface
to each instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;stack@host&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ openstack port create --network internal_net dpdk-port-tx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;stack@host&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ openstack port create --network internal_net dpdk-port-rx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;ll save the IP and MAC addresses for these interfaces: these will be useful
later:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;stack@host&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ tx_dpdk_ip&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;openstack port show -f json dpdk-port-tx | jq -r &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.fixed_ips[0].ip_address&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;stack@host&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ rx_dpdk_ip&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;openstack port show -f json dpdk-port-rx | jq -r &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.fixed_ips[0].ip_address&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;stack@host&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ tx_dpdk_mac&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;openstack port show -f json dpdk-port-tx | jq -r &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.mac_address&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;stack@host&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ rx_dpdk_mac&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;openstack port show -f json dpdk-port-rx | jq -r &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.mac_address&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now add them to the servers:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;stack@host&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ openstack server add port guest-tx dpdk-port-tx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;stack@host&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ openstack server add port guest-rx dpdk-port-rx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can verify that these interfaces are of type &lt;code&gt;vhostuser&lt;/code&gt; again, if you like.&lt;/p&gt;
&lt;h2 id=&#34;compile-pktgen-dpdk&#34;&gt;Compile Pktgen-DPDK&lt;/h2&gt;
&lt;p&gt;We now have our servers effectively configured from an &amp;ldquo;infrastructure&amp;rdquo;
perspective. Going forward, everything will be done inside the guests. The
first of these steps is to compile Pktgen-DPDK. This is necessary because
while DPDK itself is packaged for CentOS, Pktgen-DPDK is not. We&amp;rsquo;re going
to demonstrate the steps to run for one intance. You should then repeat these
on the second instance.&lt;/p&gt;
&lt;p&gt;First, let&amp;rsquo;s SSH into the machine:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;stack@host&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ openstack server ssh guest-tx --login centos
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;centos@guest-tx&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Install the dependencies. These are numerous:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;centos@guest-tx&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ sudo dnf config-manager --set-enabled powertools
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;centos@guest-tx&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ sudo dnf groupinstall -y &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Development Tools&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;centos@guest-tx&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ sudo dnf install -y numactl-devel libpcap-devel meson driverctl
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;centos@guest-tx&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ python3 -m pip install --user pyelftools  &lt;span style=&#34;color:#75715e&#34;&gt;# avoid requiring EPEL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, let&amp;rsquo;s clone and build DPDK. We could use the &lt;code&gt;dpdk&lt;/code&gt; and &lt;code&gt;dpdk-devel&lt;/code&gt;
packages provided by CentOS but these are pretty old. If you decide to go
this route, don&amp;rsquo;t forget to checkout a tag in the Pktgen-DPDK repo
corresponding to the correct DPDK release in the environment.&lt;/p&gt;
&lt;p&gt;You can build DPDK like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;centos@guest-tx&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ git clone https://github.com/dpdk/dpdk
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;centos@guest-tx&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ cd dpdk
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;centos@guest-tx&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ git checkout v21.11rc3  &lt;span style=&#34;color:#75715e&#34;&gt;# use v21.11 if it&amp;#39;s been released&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;centos@guest-tx&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ meson build
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;centos@guest-tx&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ ninja -C build
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;centos@guest-tx&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ sudo ninja -C build install
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;aside class=&#34;admonition note&#34;&gt;
	
	
	&lt;div class=&#34;admonition-content&#34;&gt;You&amp;rsquo;ll note that I&amp;rsquo;m using a fixed version of DPDK. As this post ages, you
may wish to use a newer version of DPDK. If you do, you should also update the
tag checked out for Pktgen-DPDK below.&lt;/div&gt;
&lt;/aside&gt;

&lt;p&gt;With DPDK build, let&amp;rsquo;s do the same for Pktgen-DPDK:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;centos@guest-tx&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ git clone https://github.com/pktgen/Pktgen-DPDK
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;centos@guest-tx&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ cd Pktgen-DPDK
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;centos@guest-tx&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ git checkout pktgen-21.11.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;centos@guest-tx&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ PKG_CONFIG_PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/usr/local/lib64/pkgconfig meson build
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;centos@guest-tx&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ ninja -C build
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;centos@guest-tx&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ sudo ninja -C build install
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, restart the instance to propogate all these changes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;centos@guest-tx&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ sudo reboot
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;aside class=&#34;admonition note&#34;&gt;
	
	
	&lt;div class=&#34;admonition-content&#34;&gt;Don&amp;rsquo;t forget to run the above on both instances, as noted previously.&lt;/div&gt;
&lt;/aside&gt;

&lt;h2 id=&#34;configure-environment&#34;&gt;Configure environment&lt;/h2&gt;
&lt;p&gt;Now that our applications are ready to go, we need to configure our
environment. There are a two parts to this: enabling hugepages and configuring
our annointed interfaces to use the &lt;code&gt;vfio-pci&lt;/code&gt; driver. Once again, these steps
should be done on both instances.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re going to use root for most of these commands since it&amp;rsquo;s easier than
working with pipes and sudo. Become root and configure the hugepages:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;centos@guest-tx&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;$ sudo su
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@guest-tx&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# echo 1024 &amp;gt; /proc/sys/vm/nr_hugepages&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now the trickier job of rebinding our interfaces to use the &lt;code&gt;vfio-pci&lt;/code&gt; driver.
We&amp;rsquo;ve got two interfaces in both instances: the primary interface that we&amp;rsquo;re
SSHing through, and the second interface that we&amp;rsquo;re going to use for our DPDK
application. We can verify this using a combination of &lt;code&gt;ip&lt;/code&gt; and &lt;code&gt;lspci&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@guest-tx&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ip link&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@guest-tx&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# lspci | grep Ethernet&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This should return something akin to the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@guest-tx&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ip link&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu &lt;span style=&#34;color:#ae81ff&#34;&gt;65536&lt;/span&gt; qdisc noqueue state UNKNOWN mode DEFAULT group default qlen &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span style=&#34;color:#ae81ff&#34;&gt;1442&lt;/span&gt; qdisc fq_codel state UP mode DEFAULT group default qlen &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    link/ether fa:16:3e:97:3d:11 brd ff:ff:ff:ff:ff:ff
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3: eth1: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span style=&#34;color:#ae81ff&#34;&gt;1442&lt;/span&gt; qdisc fq_codel state UP mode DEFAULT group default qlen &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    link/ether fa:16:3e:5b:af:eb brd ff:ff:ff:ff:ff:ff
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@guest-tx&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# lspci | grep Ethernet&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00:03.0 Ethernet controller: Red Hat, Inc. Virtio network device
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00:07.0 Ethernet controller: Red Hat, Inc. Virtio network device
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this instance, our device has been assigned the address &lt;code&gt;00:07.0&lt;/code&gt;. We can
inspect the driver currently in use using &lt;code&gt;lspci&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@guest-tx&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# lspci -s 00:07.0 -v&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00:07.0 Ethernet controller: Red Hat, Inc. Virtio network device
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Subsystem: Red Hat, Inc. Device &lt;span style=&#34;color:#ae81ff&#34;&gt;0001&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Physical Slot: &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Flags: bus master, fast devsel, latency 0, IRQ &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        I/O ports at &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;32&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Memory at c0040000 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;32-bit, non-prefetchable&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;4K&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Memory at &lt;span style=&#34;color:#ae81ff&#34;&gt;240000000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;64-bit, prefetchable&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;16K&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Expansion ROM at c0000000 &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;virtual&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;disabled&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;256K&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Capabilities: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;98&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; MSI-X: Enable+ Count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; Masked-
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Capabilities: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;84&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Vendor Specific Information: VirtIO: &amp;lt;unknown&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Capabilities: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;70&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Vendor Specific Information: VirtIO: Notify
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Capabilities: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;60&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Vendor Specific Information: VirtIO: DeviceCfg
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Capabilities: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;50&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Vendor Specific Information: VirtIO: ISR
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Capabilities: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;40&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Vendor Specific Information: VirtIO: CommonCfg
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Kernel driver in use: virtio-pci
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;re using &lt;code&gt;virtio-pci&lt;/code&gt;, but we need to be using &lt;code&gt;vfio-pci&lt;/code&gt;. Let&amp;rsquo;s
load that driver and then rebind the interface to the driver using the
&lt;code&gt;driverctl&lt;/code&gt; utility we used earlier:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@guest-tx&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# modprobe vfio enable_unsafe_noiommu_mode=1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@guest-tx&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# cat /sys/module/vfio/parameters/enable_unsafe_noiommu_mode&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@guest-tx&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# modprobe vfio-pci&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@guest-tx&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# driverctl -v set-override 0000:00:07.0 vfio-pci&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;aside class=&#34;admonition note&#34;&gt;
	
	
	&lt;div class=&#34;admonition-content&#34;&gt;&lt;p&gt;You could also do the binding manually using sysfs. First you need to get the PCI
vendor and product ID:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@guest-tx&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# lspci -s 00:07.0 -n&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00:07.0 0200: 1af4:1000
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this instance, it&amp;rsquo;s &lt;code&gt;1af4:1000&lt;/code&gt;. We&amp;rsquo;ll use this now:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@guest-tx&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# echo 0000:00:07.0 &amp;gt; /sys/bus/pci/devices/0000:00:07.0/driver/unbind&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@guest-tx&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# echo 0000:00:08.0 &amp;gt; /sys/bus/pci/devices/0000:00:08.0/driver/unbind&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@guest-tx&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# echo 1af4 1000 &amp;gt; /sys/bus/pci/drivers/vfio-pci/new_id&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/aside&gt;

&lt;p&gt;If you inspect the device again, you should see that it&amp;rsquo;s now bound to the
&lt;code&gt;vfio-pci&lt;/code&gt; driver.&lt;/p&gt;
&lt;aside class=&#34;admonition note&#34;&gt;
	
	
	&lt;div class=&#34;admonition-content&#34;&gt;Don&amp;rsquo;t forget to run the above on both instances, as noted previously.&lt;/div&gt;
&lt;/aside&gt;

&lt;h2 id=&#34;run-applications&#34;&gt;Run applications&lt;/h2&gt;
&lt;p&gt;The final step: running the applications we built and installed earlier.
The &lt;code&gt;pktgen&lt;/code&gt; application requires a small bit of configuration. Forunately
everything we already have everything we need. Back on the host, run the
following, which will create a configuration file using the MAC and IP
address information we stored earlier:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt; EOF &amp;gt; pktgen.pkt
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;stop 0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;set 0 rate 0.1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;set 0 ttl 10
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;set 0 proto udp
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;set 0 dport 8000
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;set 0 src mac ${tx_dpdk_mac}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;set 0 dst mac ${rx_dpdk_mac}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;set 0 src ip ${tx_dpdk_ip}/32
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;set 0 dst ip ${rx_dpdk_ip}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;set 0 size 64
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can now copy this to the &lt;code&gt;guest-tx&lt;/code&gt; instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ scp pktgen.pkt centos@&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;tx_fip&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;:/home/centos
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;On the &lt;code&gt;guest-rx&lt;/code&gt; instance, simply run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;LD_LIBRARY_PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/usr/local/lib64 /usr/local/bin/pktgen -l 1-3 -n &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; -- -P -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2.0&amp;#39;&lt;/span&gt; -T
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then on the &lt;code&gt;guest-tx&lt;/code&gt; instance, run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;LD_LIBRARY_PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/usr/local/lib64 /usr/local/bin/pktgen -l 1-3 -n &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; -- -P -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2.0&amp;#39;&lt;/span&gt; -T -f pktgen.pkt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the interactive prompt that appears, type &lt;code&gt;start&lt;/code&gt;. You should see packets
start flowing and being received by the &lt;code&gt;pktgen&lt;/code&gt; instance running on
&lt;code&gt;guest-rx&lt;/code&gt;. You can stop this process by typing &lt;code&gt;stop&lt;/code&gt; or simply &lt;code&gt;quit&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.redhat.com/en/blog/hands-vhost-user-warm-welcome-dpdk&#34;&gt;https://www.redhat.com/en/blog/hands-vhost-user-warm-welcome-dpdk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloud-hypervisor/cloud-hypervisor/blob/main/docs/vhost-user-net-testing.md&#34;&gt;https://github.com/cloud-hypervisor/cloud-hypervisor/blob/main/docs/vhost-user-net-testing.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.scottlowe.org/2017/02/16/correlating-ovs-guest-domain-interfaces/&#34;&gt;https://blog.scottlowe.org/2017/02/16/correlating-ovs-guest-domain-interfaces/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://toonk.io/building-a-high-performance-linux-based-traffic-generator-with-dpdk/index.html&#34;&gt;https://toonk.io/building-a-high-performance-linux-based-traffic-generator-with-dpdk/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://access.redhat.com/solutions/3243661&#34;&gt;https://access.redhat.com/solutions/3243661&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using the OpenStack SDK</title>
      <link>https://that.guru/blog/using-openstacksdk/</link>
      <pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://that.guru/blog/using-openstacksdk/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;https://docs.openstack.org/openstacksdk/latest/&#34;&gt;&lt;em&gt;OpenStack SDK&lt;/em&gt; library&lt;/a&gt; provides a unified API to interact with
OpenStack clouds. I&amp;rsquo;ve been doing a lot of work on it lately and am only now
starting to gain an understanding of just what&amp;rsquo;s going on (there are fewer
layers in an onion 😊). These are my notes on how to use the &lt;code&gt;Resource&lt;/code&gt;-based
objects found in e.g. &lt;code&gt;openstack/compute/v2/server.py&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;intro-to-the-resource-object&#34;&gt;Intro to the Resource object&lt;/h2&gt;
&lt;p&gt;As the name would suggest, the &lt;code&gt;Resource&lt;/code&gt; object wraps a type of API resource
or collection of API resources. For example, take nova&amp;rsquo;s &lt;code&gt;/servers&lt;/code&gt; API. This
API supports a number of CRUD-style operations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GET /servers&lt;/code&gt; (list servers)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POST /servers&lt;/code&gt; (create server)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GET /servers/{id}&lt;/code&gt; (fetch server)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PUT /servers/{id}&lt;/code&gt; (update server)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DELETE /servers/{id}&lt;/code&gt; (delete server)&lt;/li&gt;
&lt;/ul&gt;
&lt;aside class=&#34;admonition note&#34;&gt;
	
	
	&lt;div class=&#34;admonition-content&#34;&gt;This API is rather complex and also provides separate &amp;ldquo;detail&amp;rdquo; endpoints, e.g.
&lt;code&gt;GET /servers/detail&lt;/code&gt;, plus a load of actions and nested resources. We&amp;rsquo;re going
to ignore all of those for now and focus on these basic CRUD-style APIs.&lt;/div&gt;
&lt;/aside&gt;

&lt;p&gt;If you were to define a simple &lt;code&gt;Resource&lt;/code&gt; definition for this API, it would
likely look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Server&lt;/span&gt;(resource&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Resource):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# API path&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    base_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/servers&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# envelope parameters&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resource_key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;server&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resources_key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;servers&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# capabilities&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    allow_create &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    allow_fetch &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    allow_commit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    allow_delete &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    allow_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# attributes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    access_ipv4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; resource&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Body(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;accessIPv4&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    access_ipv6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; resource&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Body(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;accessIPv6&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There&amp;rsquo;s a lot of abstraction going on here, and it&amp;rsquo;s obviously far from
complete (look at &lt;code&gt;openstack/compute/v2/server.py&lt;/code&gt; in the &lt;em&gt;openstacksdk&lt;/em&gt;
project if you want the real deal), but there are a couple of crucial
components here. Firstly, we&amp;rsquo;re giving the path to the API:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# API path&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    base_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/servers&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is the &lt;em&gt;base&lt;/em&gt; path, which is extended with additional path components
depending on the operation.&lt;/p&gt;
&lt;p&gt;Next up, we&amp;rsquo;re stating the keys used for the envelope:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# envelope parameters&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resource_key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;server&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resources_key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;servers&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Pretty much all OpenStack APIs use &lt;a href=&#34;https://stackoverflow.com/a/25930584/613428&#34;&gt;envelopes&lt;/a&gt;, by which we mean all
responses are returned with a JSON object on the outside. The above
configuration means the responses for operations that work with multiple
resources (so just &lt;code&gt;GET /servers&lt;/code&gt; in this case) will be accessible via the
&lt;code&gt;servers&lt;/code&gt; key, while those that work with individual resources will be
accessible via the &lt;code&gt;server&lt;/code&gt; key. If we look at the &lt;a href=&#34;https://docs.openstack.org/api-ref/compute/?expanded=list-servers-detail#list-servers&#34;&gt;nova api-ref&lt;/a&gt; we can see
this is indeed the case. For example, consider a typical response for
&lt;code&gt;GET /servers&lt;/code&gt; (list servers):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;servers&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;22c91117-08de-4894-9aa9-6ef382400985&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;links&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://openstack.example.com/v2/6f70656e737461636b20342065766572/servers/22c91117-08de-4894-9aa9-6ef382400985&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;rel&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;self&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://openstack.example.com/6f70656e737461636b20342065766572/servers/22c91117-08de-4894-9aa9-6ef382400985&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;rel&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bookmark&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;new-server-test&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;servers_links&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;href&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://openstack.example.com/v2.1/6f70656e737461636b20342065766572/servers?limit=1&amp;amp;marker=22c91117-08de-4894-9aa9-6ef382400985&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;rel&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;next&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And an equivalent response for &lt;code&gt;GET /servers/{id}&lt;/code&gt; (fetch server):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;server&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;OS-DCF:diskConfig&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AUTO&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;OS-EXT-AZ:availability_zone&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nova&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;aside class=&#34;admonition note&#34;&gt;
	
	
	&lt;div class=&#34;admonition-content&#34;&gt;In case you&amp;rsquo;re interested, the reason most services are so consistent in using
envelopes for their API responses is because they&amp;rsquo;ve been advised to. Despite
the fact that each OpenStack service is developed by its own mostly unique team
with their own preferences, we have (thankfully) managed to establish some
guidelines for things for like [how API responses should be structured][5].&lt;/div&gt;
&lt;/aside&gt;

&lt;p&gt;Finally, you have the allowed operations and the fields or attributes of the
server resource:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# capabilities&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    allow_create &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    allow_fetch &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    allow_commit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    allow_delete &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    allow_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# attributes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    access_ipv4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; resource&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Body(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;accessIPv4&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    access_ipv6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; resource&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Body(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;accessIPv6&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The attributes are a fairly simple mapping from the resource to some attribute
of the API requests and responses and in essence allow us to map e.g. the
&lt;code&gt;accessIPv4&lt;/code&gt; field in API requests and responses to the &lt;code&gt;access_ipv4&lt;/code&gt; attribute
of the &lt;code&gt;Server&lt;/code&gt; object. More interestingly though, for the purposes of this
post, are the capabilities. The value of these capabilities defines whether the
following aptly named methods from the &lt;code&gt;Resource&lt;/code&gt; class are usable or not:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;create&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fetch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;commit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;list&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We&amp;rsquo;ll go into details on how to use these shortly - that is, after all, the
main point of this post - but suffice to say you can make a call like
&lt;code&gt;Server.list(...)&lt;/code&gt; and it will return a list of &lt;code&gt;Server&lt;/code&gt; objects. In any case,
the servers API supports all of the CRUD-style operations and we&amp;rsquo;re stating as
much here through this configuration. This means a user can use any of these
CRUD methods (with correct input and configuration, of course) and expect them
to work. This isn&amp;rsquo;t always the case. If, for example, this API did not support
a user updating an existing server then we could configure &lt;code&gt;allow_commit = False&lt;/code&gt; (or simply not define this attribute resulting in the default value of
&lt;code&gt;False&lt;/code&gt; being used).&lt;/p&gt;
&lt;p&gt;With this small introduction to the &lt;code&gt;Resource&lt;/code&gt; object complete, let&amp;rsquo;s look at
how you&amp;rsquo;d actually use this.&lt;/p&gt;
&lt;h2 id=&#34;using-resource-objects&#34;&gt;Using Resource objects&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s begin by saying most users won&amp;rsquo;t actually need to use &lt;code&gt;Resource&lt;/code&gt; objects
directly. &lt;em&gt;openstacksdk&lt;/em&gt; consists of multiple layers, and most users will get
away with using what&amp;rsquo;s known as the &lt;em&gt;proxy&lt;/em&gt; layer. This is a utility layer that
provides a number of easy API helpers such as &lt;code&gt;create_server&lt;/code&gt; (to create a new
server) or &lt;code&gt;flavors&lt;/code&gt; (to list servers) that a user can use to interact with
their cloud. An example from the &lt;a href=&#34;https://opendev.org/openstack/openstacksdk/src/branch/master/README.rst&#34;&gt;README&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; openstack
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Initialize and turn on debug logging&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openstack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enable_logging(debug&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Initialize connection&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;conn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; openstack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(cloud&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mordred&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; server &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; conn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;compute&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;servers():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_dict())
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It also provides an even higher-level layer, known as the &lt;em&gt;cloud&lt;/em&gt; layer, which
is used by things like Ansible&amp;rsquo;s OpenStack modules and can be used to wrap
multiple complicated operations. Another example from the README:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; openstack
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Initialize and turn on debug logging&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openstack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enable_logging(debug&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Initialize connection&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;conn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; openstack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(cloud&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mordred&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; server &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; conn&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;list_servers():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to_dict())
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Sometimes it can be useful to understand how these things work under the hood
though, so let&amp;rsquo;s have a look at the ways to use &lt;code&gt;Resource&lt;/code&gt; objects directly,
from most complicated (and therefore most informative) to most abstract.&lt;/p&gt;
&lt;p&gt;We said above that the definition of the capabilities attributes on the
resource - &lt;code&gt;allow_create&lt;/code&gt;, &lt;code&gt;allow_fetch&lt;/code&gt; etc. - meant that users could use
equivalent methods on the resource such as &lt;code&gt;create&lt;/code&gt;. Let&amp;rsquo;s begin by attempting
to use one of these on the &lt;code&gt;Server&lt;/code&gt; resource actually provided by
&lt;em&gt;openstacksdk&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; openstack.compute.v2 &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; server
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;list()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Traceback (most recent call last):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  File &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;&lt;/span&gt;, line &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;module&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TypeError&lt;/span&gt;: list() missing &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; required positional argument: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;session&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Seems pretty legit. We need a &amp;ldquo;session&amp;rdquo; parameter. We can look at the docstring
for this method to figure out what that should be:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; help(server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;list)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Help on method list &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; module openstack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;resource:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;list(session, paginated&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, base_path&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, allow_unknown_params&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;params) method of builtins&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;type instance
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    This method &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; a generator which yields resource objects&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    This resource object list generator handles pagination &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; takes query
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    params &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; response filtering&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    :param session: The session to use &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; making this request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    :type session: :class:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;keystoneauth1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;adapter&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Adapter&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;aside class=&#34;admonition note&#34;&gt;
	
	
	&lt;div class=&#34;admonition-content&#34;&gt;Yes, it&amp;rsquo;s called &lt;code&gt;session&lt;/code&gt; but it&amp;rsquo;s actually an Adapter. Someone should probably
fix that.&lt;/div&gt;
&lt;/aside&gt;

&lt;aside class=&#34;admonition note&#34;&gt;
	
	
	&lt;div class=&#34;admonition-content&#34;&gt;The docs say you can use an &lt;code&gt;keystoneauth1.adapter.Adapter&lt;/code&gt; object but this is
a lie. If you try, it&amp;rsquo;ll complain about not having methods that are only
accessible from the &lt;code&gt;openstack.proxy.Proxy&lt;/code&gt; object.&lt;/div&gt;
&lt;/aside&gt;

&lt;p&gt;There are a couple of ways to generate a suitable parameter. Let&amp;rsquo;s start with
most verbose first. We can manually create a &lt;code&gt;keystoneauth1.session.Session&lt;/code&gt;
object, wrap this in &lt;em&gt;openstacksdk&lt;/em&gt;&amp;rsquo;s &lt;code&gt;openstack.proxy.Proxy&lt;/code&gt; object (which is
itself a wrapper around keystoneauth&amp;rsquo;s &lt;code&gt;keystoneauth1.adapter.Adapter&lt;/code&gt; object)
and then use this on the relevant &lt;code&gt;Resource&lt;/code&gt; object. An example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; keystoneauth1.identity &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; v3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; keystoneauth1.session
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; keystoneclient.v3 &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; client
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; openstack.compute.v2 &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; server
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; openstack.proxy
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; auth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v3&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Password(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;     auth_url&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://172.20.4.155/identity&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;     username&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;     password&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;     project_name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;demo&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;     user_domain_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;default&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;     project_domain_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;default&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; session &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; keystoneauth1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;session&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Session(auth&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;auth)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; proxy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; openstack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;proxy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Proxy(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;     session&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;session,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;     service_type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;compute&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;     interface&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;public&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;     version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2.1&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; print([x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;list(session&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;proxy)])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test-server&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This aligns with what I&amp;rsquo;m seeing if I run &lt;code&gt;openstack server list&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ openstack server list -f value -c Name
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;test-server
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Hurrah! However, not only is this super verbose but it&amp;rsquo;s using hard-coded cloud
details such as keystone details and the version that I extracted from the
&lt;code&gt;openrc&lt;/code&gt; file laid down by DevStack. This seems unnecessary: you don&amp;rsquo;t need to
manually specify any of these when using the clients so why do we need to use
that here. In fact, it &lt;em&gt;is&lt;/em&gt; unnecessary. Not only can &lt;em&gt;openstacksdk&lt;/em&gt; parse the
environment variables configured via the &lt;code&gt;openrc&lt;/code&gt; file but it also supports (an
in fact prefers) a &lt;code&gt;clouds.yaml&lt;/code&gt; file, which on a DevStack deployment can be
found at &lt;code&gt;/etc/openstack/clouds.yaml&lt;/code&gt;. An abbreviated example from my DevStack
deployment:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat /etc/openstack/clouds.yaml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;clouds:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  devstack:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    auth:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      auth_url: http://172.20.4.155/identity
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      password: password
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      project_domain_id: default
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      project_name: demo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      user_domain_id: default
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      username: demo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    identity_api_version: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;3&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    region_name: RegionOne
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    volume_api_version: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;3&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  devstack-admin:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  devstack-alt:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  devstack-system-admin:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;functional:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  image_name: cirros-0.5.2-x86_64-disk
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;openstacksdk&lt;/em&gt; provides a helpful little tool to show the configuration it&amp;rsquo;s
able to identify automatically, the &lt;code&gt;openstack.config.loader&lt;/code&gt; module:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ python -m openstack.config.loader
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;devstack None &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;api_timeout&amp;#39;&lt;/span&gt;: None, ..., &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;networks&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;[]}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;devstack-admin None &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;api_timeout&amp;#39;&lt;/span&gt;: None, ..., &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;networks&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;[]}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;devstack-alt None &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;api_timeout&amp;#39;&lt;/span&gt;: None, ..., &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;networks&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;[]}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;devstack-system-admin None &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;api_timeout&amp;#39;&lt;/span&gt;: None, ..., &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;networks&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;[]}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;envvars None &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;api_timeout&amp;#39;&lt;/span&gt;: None, ..., &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;networks&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;[]}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You&amp;rsquo;ll note that most of these correspond to entries in the &lt;code&gt;clouds.yaml&lt;/code&gt; file
but there&amp;rsquo;s also an additional entry - &lt;code&gt;envvars&lt;/code&gt; - which corresponds to the
cloud configuration sourced from environment variables which were configured
via the &lt;code&gt;openrc&lt;/code&gt; file. Very cool.&lt;/p&gt;
&lt;p&gt;Knowing that we have the above, we can use the above example once again but
this time use &lt;em&gt;openstacksdk&lt;/em&gt; to generate the &lt;code&gt;Proxy&lt;/code&gt; object for us:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; openstack.config.loader
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; openstack.compute.v2 &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; server
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; config &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; openstack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;loader&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;OpenStackConfig()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_one(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;devstack&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; session &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_session_client(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;compute&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; print([x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;list(session&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;proxy)])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test-server&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is far less verbose that the previous example and doesn&amp;rsquo;t require
hardcoding any configuration into our scripts, or reinventing the wheel with
regard to parsing environment variables or &lt;code&gt;clouds.yaml&lt;/code&gt; files. Instead, we&amp;rsquo;re
saying we should use the configuration for the &lt;code&gt;devstack&lt;/code&gt; cloud from
&lt;code&gt;clouds.yaml&lt;/code&gt;. If we wanted to, we could also use the &lt;code&gt;envvars&lt;/code&gt; &amp;ldquo;cloud&amp;rdquo; or any
of the other &lt;code&gt;devstack-*&lt;/code&gt; clouds. Ultimately though, it saves us a lot of code.
We&amp;rsquo;re not done though. We can make this even easier by using the &lt;code&gt;Connection&lt;/code&gt;
object from the &lt;code&gt;openstack.connection&lt;/code&gt; module. You likely missed it, but we
already created one of these objects in our brief example on using the &lt;em&gt;proxy&lt;/em&gt;
and &lt;em&gt;cloud&lt;/em&gt; layers above:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; openstack
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;conn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; openstack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(cloud&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mordred&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That does an awful lot for us including generating suitable &lt;code&gt;Proxy&lt;/code&gt; objects. We
can use it in place of the &lt;code&gt;OpenStackConfig.get_one&lt;/code&gt; and &lt;code&gt;get_session_client&lt;/code&gt;
calls above:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; openstack
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; openstack.compute.v2 &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; server
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; conn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; openstack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(cloud&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;devstack&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; print([x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Server&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;list(session&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;proxy)])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test-server&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Wonderfully concise.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>UEFI Support in Libvirt</title>
      <link>https://that.guru/blog/uefi-secure-boot-in-libvirt/</link>
      <pubDate>Tue, 16 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://that.guru/blog/uefi-secure-boot-in-libvirt/</guid>
      <description>&lt;p&gt;Support for UEFI Secure Boot is &lt;a href=&#34;https://specs.openstack.org/openstack/nova-specs/specs/wallaby/approved/allow-secure-boot-for-qemu-kvm-guests.html&#34;&gt;one of the features planned&lt;/a&gt; for the
Wallaby release of the OpenStack Compute project, Nova.  Nova has supported
UEFI for instances via the libvirt virt driver since the &lt;a href=&#34;https://github.com/openstack/nova/commit/9e2dfb61ed1c8f8c891c34ca4da2b46b69abd661&#34;&gt;Mitaka release (nova
13.0.0)&lt;/a&gt; and it is in fact required to boot &lt;a href=&#34;https://github.com/openstack/nova/commit/6f54f5c1e37a42b395ca793f869b73aa902602ed&#34;&gt;AArch64 (ARM64) guests&lt;/a&gt;,
however, how this has been implemented leaves a lot to be desired. The
introduction of Secure Boot functionality has given us the opportunity to clean
up some of the tech debt around this feature.&lt;/p&gt;
&lt;h2 id=&#34;uefi-support-in-qemu-and-libvirt&#34;&gt;UEFI support in QEMU and libvirt&lt;/h2&gt;
&lt;p&gt;Naturally, for nova&amp;rsquo;s libvirt virt driver to support UEFI, both libvirt and
QEMU need to support it. This has been the case for many years, but recent
versions of libvirt and QEMU have made working with UEFI significantly easier
than previously. As noted in the [Secure Boot spec][0], &lt;a href=&#34;https://www.libvirt.org/news.html#v5-3-0-2019-05-04&#34;&gt;libvirt 5.3&lt;/a&gt;
introduced support for the firmware auto-selection functionality provided by
QEMU since QEMU 2.9. This QEMU feature relies on firmware JSON files that
describe what each firmware file is for and how it can be described, as
described in the &lt;a href=&#34;https://gitlab.com/qemu-project/qemu/-/blob/v5.2.0/docs/interop/firmware.json&#34;&gt;QEMU spec&lt;/a&gt;. These files are typically provided by your
distro and on a Fedora 33 host can be found at &lt;code&gt;/usr/share/qemu/firmware&lt;/code&gt;.
Here&amp;rsquo;s one such file, &lt;code&gt;40-edk2-ovmf-x64-sb-enrolled.json&lt;/code&gt;, taken from my
host and provided by Fedora&amp;rsquo;s &lt;code&gt;edk2-ovmf&lt;/code&gt; package:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;OVMF for x86_64, with SB+SMM, SB enabled, MS certs enrolled&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;interface-types&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;uefi&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;mapping&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;device&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flash&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;executable&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;filename&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/share/edk2/ovmf/OVMF_CODE.secboot.fd&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;format&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;raw&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;nvram-template&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;filename&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/share/edk2/ovmf/OVMF_VARS.secboot.fd&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;format&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;raw&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;targets&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;architecture&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x86_64&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;machines&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pc-q35-*&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;features&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;acpi-s3&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;amd-sev&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;enrolled-keys&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;requires-smm&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;secure-boot&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;verbose-dynamic&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;tags&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since libvirt 5.3, libvirt has parsed these files and included them in the
domain capabilities output, accessible via &lt;code&gt;virsh domcapabilities&lt;/code&gt; and
equivalent APIs. For example, I can see what firmwares are available to me when
using the &lt;code&gt;q35&lt;/code&gt; machine type like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ virsh domcapabilities --machine pc-q35-5.1 | xmllint --xpath &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/domainCapabilities/os&amp;#39;&lt;/span&gt; -
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will yield:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;os&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;supported=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yes&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;firmware&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;efi&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/enum&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;loader&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;supported=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yes&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;/usr/share/edk2/ovmf/OVMF_CODE.secboot.fd&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;/usr/share/edk2/ovmf/OVMF_CODE.fd&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;rom&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;pflash&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/enum&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;readonly&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;yes&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;no&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/enum&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;secure&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;yes&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;no&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/enum&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/loader&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/os&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, this isn&amp;rsquo;t all this can do. Libvirt can also negotiate the firmware
for you when creating a new guest. Previously, to create a UEFI-based guest,
one would need to specify something like the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;domain&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kvm&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;os&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arch=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x86_64&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;machine=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pc-q35-5.1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;hvm&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;loader&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;readonly=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yes&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;secure=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;no&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pflash&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;/usr/share/edk2/ovmf/OVMF_CODE.secboot.fd&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/loader&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;nvram&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;template=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/usr/share/edk2/ovmf/OVMF_VARS.secboot.fd&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;/home/stephenfin/.config/libvirt/qemu/nvram/q35-uefi-experiment_VARS.fd&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/nvram&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;boot&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dev=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hda&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/os&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/domain&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I won&amp;rsquo;t go into the specifics of what each file means - libvirt has some &lt;a href=&#34;https://libvirt.org/formatdomain.html#bios-bootloader&#34;&gt;good
documentation on the matter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is no longer necessary, and libvirt will now do this for us. We can
instead specify e.g.:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;domain&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kvm&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;os&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;firmware=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;efi&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arch=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x86_64&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;machine=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pc-q35-5.1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;hvm&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;loader&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;secure=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;no&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;boot&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dev=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hda&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/os&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/domain&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;How helpful! Using this, it&amp;rsquo;s now easier than ever to create guests using UEFI.&lt;/p&gt;
&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;
&lt;p&gt;The above is all well and good, but a worked example is even better. Let&amp;rsquo;s
create a &lt;em&gt;Fedora 33 Workstation&lt;/em&gt; guest with UEFI enabled to demonstrate this.
This should work with any OS (&lt;strong&gt;note:&lt;/strong&gt; though maybe not right now, as
discussed later) but using the Fedora 33 Workstation live image, without any
other drives attached, let&amp;rsquo;s us minimise the amount of irrelevant XML present.
You can download the Fedora 33 Workstation image from the &lt;a href=&#34;https://getfedora.org/en/workstation/download/&#34;&gt;Fedora website&lt;/a&gt;,
but before we do that, let&amp;rsquo;s start by ensuring that we have all required
packages installed.  This should be as simple as installing libvirt, at least
on a Fedora 33-based host:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo dnf install libvirt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It should also be noted that this guide was only tested on an x86_64 host and
results may vary on other platforms.&lt;/p&gt;
&lt;p&gt;Next up, let&amp;rsquo;s grab the image. As discussed above, we&amp;rsquo;re going to use the
&lt;em&gt;Fedora 33 Workstation&lt;/em&gt; image here since it&amp;rsquo;s easy to use for testing purposes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd /tmp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ wget https://download.fedoraproject.org/pub/fedora/linux/releases/33/Workstation/x86_64/iso/Fedora-Workstation-Live-x86_64-33-1.2.iso
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With the dependencies installed and the image downloaded, we can now create our
guest or &amp;ldquo;domain&amp;rdquo;. Dump the following to e.g. &lt;code&gt;/tmp/fedora-q35-uefi.xml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;domain&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kvm&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;fedora-q35-uefi-experiment&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;metadata&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;libosinfo:libosinfo&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:libosinfo=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://libosinfo.org/xmlns/libvirt/domain/1.0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;libosinfo:os&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://fedoraproject.org/fedora/33&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/libosinfo:libosinfo&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/metadata&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;memory&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unit=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;KiB&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;4194304&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/memory&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;currentMemory&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unit=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;KiB&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;4194304&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/currentMemory&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;vcpu&amp;gt;&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/vcpu&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;os&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;firmware=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;efi&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arch=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x86_64&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;machine=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pc-q35-5.1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;hvm&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;loader&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;secure=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;no&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;boot&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dev=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cdrom&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/os&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;features&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;acpi/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;apic/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;vmport&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;state=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;off&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/features&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;cpu&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mode=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;host-model&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;partial&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;clock&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;offset=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utc&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;timer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rtc&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tickpolicy=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;catchup&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;timer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pit&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tickpolicy=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;delay&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;timer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hpet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;present=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;no&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/clock&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;devices&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;emulator&amp;gt;&lt;/span&gt;/usr/bin/qemu-system-x86_64&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/emulator&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;disk&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;device=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cdrom&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;driver&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;qemu&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;raw&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;source&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;file=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/tmp/Fedora-Workstation-Live-x86_64-33-1.2.iso&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;target&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dev=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sda&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bus=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sata&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;readonly/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/disk&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;serial&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pty&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;target&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;isa-serial&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;port=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;model&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;isa-serial&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/target&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/serial&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;console&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pty&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;target&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;serial&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;port=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/console&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;graphics&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;vnc&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;port=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tlsPort=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;autoport=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yes&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;image&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;compression=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;off&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/graphics&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;video&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;model&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;virtio&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/video&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/devices&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/domain&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, create the instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ virsh create fedora-q35-uefi.xml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since we&amp;rsquo;re using the workstation image, you&amp;rsquo;re going to need a graphical
console. As a result, you&amp;rsquo;ll note that we&amp;rsquo;ve attached a VNC graphics device to
the instance and you can use VNC to connect to the guest. The easiest way to do
this is via &lt;code&gt;virt-manager&lt;/code&gt; (use the &lt;strong&gt;QEMU/KVM User Session&lt;/strong&gt; connection),
but of course you could also use &lt;code&gt;virsh dumpxml fedora-q35-uefi-experiment&lt;/code&gt;
after creating the guest to view the final XML and get the port that libvirt
assigned to the VNC interface, and then use this to connect to the instance
from your favourite VNC viewer.&lt;/p&gt;
&lt;p&gt;Once you&amp;rsquo;re done, destroy the guest:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ virsh destroy fedora-q35-uefi-experiment
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;secure-boot-woes&#34;&gt;Secure boot woes&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;d be remiss if I didn&amp;rsquo;t highlight one issue with this approach, at least
using the versions of libvirt (6.6.0) and QEMU (5.1.0) installed on my host at
the time of writing. My initial attempts at this didn&amp;rsquo;t use Fedora but rather
&lt;em&gt;Alpine Linux&lt;/em&gt;, a distro many will be familiar with from Docker containers. In
theory this should be a good candidate for playing around with since it&amp;rsquo;s small
and well suited to use in guests with limited CPU and memory. However, the
&lt;a href=&#34;https://wiki.alpinelinux.org/wiki/Alpine_and_UEFI#What.27s_this_infamous_.22Secure_Boot.22.3F&#34;&gt;Alpine Linux images are not signed&lt;/a&gt; and this prevents booting of the guest.
To demonstrate the issue and explain why it occurs, it&amp;rsquo;s probably best to go
with another example.&lt;/p&gt;
&lt;p&gt;To work through this, let&amp;rsquo;s first grab the &lt;em&gt;Alpine Linux Virtual&lt;/em&gt; image,
available from the &lt;a href=&#34;https://alpinelinux.org/downloads/&#34;&gt;Alpine Linux website&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ wget https://dl-cdn.alpinelinux.org/alpine/v3.13/releases/x86_64/alpine-virt-3.13.1-x86_64.iso
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The domain XML we&amp;rsquo;ll use for booting this image is virtually identical to the
one used for Fedora previously. We could of course use the same specs as the
Fedora 33-based guest and it would work just fine, but we&amp;rsquo;ve chosen to remove
the VNC graphics device and display adapter, which are unnecessary for a distro
like this, as well as reduce the RAM allocation. Dump the following XML to e.g.
&lt;code&gt;/tmp/alpine-q35-uefi.xml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;domain&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kvm&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;alpinelinux-q35-uefi-experiment&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;metadata&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;libosinfo:libosinfo&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns:libosinfo=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://libosinfo.org/xmlns/libvirt/domain/1.0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;libosinfo:os&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://alpinelinux.org/alpinelinux/3.13&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/libosinfo:libosinfo&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/metadata&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;memory&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unit=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;KiB&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;1048576&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/memory&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;currentMemory&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unit=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;KiB&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;1048576&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/currentMemory&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;vcpu&amp;gt;&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/vcpu&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;os&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;firmware=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;efi&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arch=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x86_64&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;machine=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pc-q35-5.1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;hvm&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;loader&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;secure=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;no&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;boot&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dev=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cdrom&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/os&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;features&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;acpi/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;apic/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;vmport&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;state=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;off&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/features&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;cpu&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mode=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;host-model&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;partial&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;clock&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;offset=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;utc&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;timer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rtc&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tickpolicy=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;catchup&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;timer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pit&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tickpolicy=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;delay&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;timer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hpet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;present=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;no&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/clock&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;devices&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;emulator&amp;gt;&lt;/span&gt;/usr/bin/qemu-system-x86_64&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/emulator&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;disk&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;device=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cdrom&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;driver&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;qemu&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;raw&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;source&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;file=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/tmp/alpine-virt-3.13.1-x86_64.iso&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;target&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dev=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sda&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bus=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sata&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;readonly/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/disk&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;serial&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pty&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;target&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;isa-serial&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;port=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;model&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;isa-serial&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/target&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/serial&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;console&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pty&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;target&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;serial&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;port=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/console&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/devices&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/domain&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With the image downloaded and domain XML file created, we can create the guest:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ virsh create alpine-q35-uefi.xml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since this isn&amp;rsquo;t using a graphical device, you can instead connect via the
serial console:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ virsh console alpinelinux-q35-uefi-experiment
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, upon connecting you&amp;rsquo;ll note that you eventually end up at the
bootloader rather than a login prompt and if you connect early enough, you&amp;rsquo;ll
probably see something like the following:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;BdsDxe: loading Boot0001 &amp;#34;UEFI QEMU DVD-ROM QM00001 &amp;#34; from PciRoot(0x0)/Pci(0x1F,0x2)/Sata(0x0,0xFFFF,0x0)
BdsDxe: failed to load Boot0001 &amp;#34;UEFI QEMU DVD-ROM QM00001 &amp;#34; from PciRoot(0x0)/Pci(0x1F,0x2)/Sata(0x0,0xFFFF,0x0): Access Denied
BdsDxe: No bootable option or device was found.
BdsDxe: Press any key to enter the Boot Manager Menu.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(You can use &lt;code&gt;Ctrl + ]&lt;/code&gt; to quit the console).&lt;/p&gt;
&lt;p&gt;The apparent root cause for this can be seen by investigating the domain XML:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ virsh dumpxml alpinelinux-q35-uefi-experiment | xmllint --xpath &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;//os&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;os&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arch=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x86_64&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;machine=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pc-q35-5.1&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;hvm&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;loader&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;readonly=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yes&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;secure=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;no&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pflash&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;/usr/share/edk2/ovmf/OVMF_CODE.secboot.fd&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/loader&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;nvram&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;template=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/usr/share/edk2/ovmf/OVMF_VARS.secboot.fd&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;/home/stephenfin/.config/libvirt/qemu/nvram/alpinelinux-q35-uefi-experiment_VARS.fd&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/nvram&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;boot&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dev=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cdrom&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/os&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You&amp;rsquo;ll note that we requested &lt;code&gt;secure=&#39;no&#39;&lt;/code&gt; and libvirt has included this in
the final XML, however, UEFI firmware with secure boot support,
&lt;code&gt;OVMF_CODE.secboot.fd&lt;/code&gt;, has been used, rather than &lt;code&gt;OVMF_CODE.fd&lt;/code&gt;. In theory,
this firmware should work for non-secure boot instances also but that&amp;rsquo;s not
happening. The solution for now is to specify the path to the non-secure boot
UEFI firmware when creating the instance, replacing the &lt;code&gt;&amp;lt;os&amp;gt;&lt;/code&gt; element included
in the XML above with the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;os&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arch=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x86_64&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;machine=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pc-q35-5.1&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;hvm&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;loader&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;readonly=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yes&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pflash&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;/usr/share/edk2/ovmf/OVMF_CODE.fd&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/loader&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;boot&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dev=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cdrom&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/os&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Obviously this is less than ideal. The issue has been &lt;a href=&#34;https://bugzilla.redhat.com/show_bug.cgi?id=1929357&#34;&gt;reported&lt;/a&gt; and will
hopefully be resolved sooner rather than later but until then, be aware that
secure boot with &lt;strong&gt;always&lt;/strong&gt; be enabled when using this auto-configuration of
firmware.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Plain Text Email in Evolution 3.38</title>
      <link>https://that.guru/blog/plain-text-in-evolution-3-38/</link>
      <pubDate>Mon, 23 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://that.guru/blog/plain-text-in-evolution-3-38/</guid>
      <description>&lt;p&gt;I recently upgraded to Fedora 33, which comes with Evolution 3.38 (previously
3.36, iirc). Following the upgrade, I noticed that quoting in plain text emails
appeared to have regressed. Previously, Evolution would wrap quotes at your
recommended width, but by selecting the email and changing the style from
&amp;ldquo;Normal&amp;rdquo; to &amp;ldquo;Preformatted&amp;rdquo;, you could avoid this text wrapping. With Evolution
3.38, this no longer works, necessitating manual line wrapping which is rather
hit and miss: I managed to send mails where the message I was replying to ended
up unquoted.&lt;/p&gt;
&lt;p&gt;I haven&amp;rsquo;t figured out the quoting issue, though &lt;a href=&#34;https://gitlab.gnome.org/GNOME/evolution/-/issues/1235&#34;&gt;issue 1235&lt;/a&gt; looks
promising, but the wrapping issue is thankfully solvable. Turns out there&amp;rsquo;s a
new (to me) &amp;ldquo;Wrap quoted text in replies&amp;rdquo; option available in the &amp;ldquo;Composer
Preferences&amp;rdquo; pane of the &amp;ldquo;Evolution Preferences&amp;rdquo; pane, which accessible via
&amp;ldquo;Edit &amp;gt; Preferences&amp;rdquo;.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://that.guru/media/plain-text-in-evolution-3-38-1.png&#34;
         alt=&#34;The Composer Preferences Pane&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;Composer Preferences&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Compare before and after:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://that.guru/media/plain-text-in-evolution-3-38-2.png&#34;
         alt=&#34;Before (with &amp;#39;Wrap quoted text in replies&amp;#39; checked)&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;Before (with &amp;#39;Wrap quoted text in replies&amp;#39; checked)&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;&lt;img src=&#34;https://that.guru/media/plain-text-in-evolution-3-38-3.png&#34;
         alt=&#34;After (with &amp;#39;Wrap quoted text in replies&amp;#39; unchecked)&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;After (with &amp;#39;Wrap quoted text in replies&amp;#39; unchecked)&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Usable email again!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Comparing Nova Database Migrations</title>
      <link>https://that.guru/blog/comparing-nova-db-migrations/</link>
      <pubDate>Mon, 19 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://that.guru/blog/comparing-nova-db-migrations/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://blueprints.launchpad.net/nova/+spec/compact-db-migrations-wallaby&#34;&gt;One of the goals&lt;/a&gt; for the Wallaby release of OpenStack Nova is to compact
many of the database migrations that have been slowly building up since the
Icehouse release some 6½ years ago. We used to do this regularly but stopped
based on operator feedback suggesting it made upgrades harder than necessary.
However, things have changed since then and the amount of database migrations
in each release has slowed considerably. In fact, the latest release, Victoria,
contained no database migrations whatsoever. This change, coupled with the fact
that we&amp;rsquo;re still using the effectively dead &lt;a href=&#34;https://sqlalchemy-migrate.readthedocs.io/en/latest/&#34;&gt;sqlalchemy-migrate&lt;/a&gt; library
rather than something like &lt;a href=&#34;https://alembic.sqlalchemy.org/en/latest/&#34;&gt;alembic&lt;/a&gt; means we now have good reason to kick
off the compaction.&lt;/p&gt;
&lt;p&gt;Below are my notes on this exercises, which demonstrate how to use the current
migrations without using &lt;code&gt;nova-manage&lt;/code&gt; and everything it entails. This should
allow people to test the changes we&amp;rsquo;re making locally and might even help
people interested in writing their own migrations in the future.&lt;/p&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;When compressing migrations, the expectation is that the before and after of
the migration should be identical. Nova doesn&amp;rsquo;t have any built-in tests to do
this (why would it) so we&amp;rsquo;re going to do this manually. The steps to do this
are effectively:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a new empty database.&lt;/li&gt;
&lt;li&gt;Apply migrations N to M from current &lt;code&gt;master&lt;/code&gt;, where N is the current base
migration and M is the migration you wish to compact up to.&lt;/li&gt;
&lt;li&gt;Dump the schema for the database.&lt;/li&gt;
&lt;li&gt;Drop and recreate the database, then apply the compaction patch.&lt;/li&gt;
&lt;li&gt;Apply the new base migration.&lt;/li&gt;
&lt;li&gt;Dump the schema for the database.&lt;/li&gt;
&lt;li&gt;Compare the schemas from steps 3 and 6, looking for any serious changes.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These steps are implementation differently depending on the RDBMS in use, so
sample steps for both SQLite and MySQL are provided below. These already assume
you have your system configured for nova development and can successfully run
unit tests using &lt;code&gt;tox&lt;/code&gt;. You should also have SQLite and MySQL packages
installed. For all cases, we&amp;rsquo;re going to use a virtualenv to ensure the
required dependencies are installed so do that first:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd nova
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ virtualenv .venv
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ source .venv/bin/activate
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ pip install &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -c https://releases.openstack.org/constraints/upper/master &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -r requirements.txt -r test-requirements.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ pip install -e .
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should also navigate to the &lt;em&gt;migration repository&lt;/em&gt; in nova, to avoid having
to manually specify this for the various &lt;em&gt;sqlalchemy-migrate&lt;/em&gt; commands.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-base&#34; data-lang=&#34;base&#34;&gt;$ cd nova/db/sqlalchemy/migrate_repo
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;sqlite&#34;&gt;SQLite&lt;/h2&gt;
&lt;p&gt;Since SQLite databases are stored as a single file, there is no additional
setup necessary. SQLite also provides a handy tool to compare databases,
&lt;code&gt;sqldiff&lt;/code&gt;, which is packaged on Fedora 32 at least. Install that first:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo dnf install sqlite-tools
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With that installed, we can get right to generating two databases that we can
then compare using this &lt;code&gt;sqldiff&lt;/code&gt; tool. It would of course be possible to dump
the schemas and compare those, but doing so means we&amp;rsquo;d have to filter out
things like simple ordering changes that SQLite seems prone to.&lt;/p&gt;
&lt;p&gt;Generating the database using &lt;em&gt;sqlalchemy-migrate&lt;/em&gt; is a two steps process. We
first need to mark our database as version controlled, which will create the
necessary &lt;em&gt;version table&lt;/em&gt;. The name of this version table is configurable in
the &lt;code&gt;migrate.cfg&lt;/code&gt; configuration file found in your migration repository and is
called &lt;code&gt;migrate_version&lt;/code&gt; in nova. The &lt;code&gt;version_control&lt;/code&gt; command will create
this table and initialize it for version N, which is the base migration you
wish to test. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ python manage.py version_control --database &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sqlite:///nova_before.db&amp;#39;&lt;/span&gt; --version &lt;span style=&#34;color:#ae81ff&#34;&gt;215&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once this is configured, apply all migrations up to M. You can use the
&lt;code&gt;upgrade&lt;/code&gt; command for this. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ python manage.py upgrade --database &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sqlite:///nova_before.db&amp;#39;&lt;/span&gt; --version &lt;span style=&#34;color:#ae81ff&#34;&gt;216&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once we have a database instance using the &lt;em&gt;before&lt;/em&gt; schema, we can apply the
code change and repeat the steps above, this time creating a &lt;code&gt;nova_after.db&lt;/code&gt;
database. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ python manage.py version_control --database &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sqlite:///nova_after.db&amp;#39;&lt;/span&gt; --version &lt;span style=&#34;color:#ae81ff&#34;&gt;215&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ python manage.py upgrade --database &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sqlite:///nova_after.db&amp;#39;&lt;/span&gt; --version &lt;span style=&#34;color:#ae81ff&#34;&gt;216&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, with these two databases to hand, we an diff them to ensure nothing has
changed:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sqldiff --schema nova_before.db nova_after.db
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;mysql&#34;&gt;MySQL&lt;/h2&gt;
&lt;p&gt;The steps for MySQL are quite similar to those for SQLite, but we do need to do
some pre-work - namely, creating a suitable database and user - before we can
get to validating schemas. Do this now. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ mysql
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MariaDB &lt;span style=&#34;color:#f92672&#34;&gt;[(&lt;/span&gt;none&lt;span style=&#34;color:#f92672&#34;&gt;)]&lt;/span&gt;&amp;gt; CREATE DATABASE nova_before;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MariaDB &lt;span style=&#34;color:#f92672&#34;&gt;[(&lt;/span&gt;none&lt;span style=&#34;color:#f92672&#34;&gt;)]&lt;/span&gt;&amp;gt; GRANT ALL PRIVILEGES ON nova_before.* TO &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nova&amp;#39;&lt;/span&gt;@&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt; IDENTIFIED BY &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MariaDB &lt;span style=&#34;color:#f92672&#34;&gt;[(&lt;/span&gt;none&lt;span style=&#34;color:#f92672&#34;&gt;)]&lt;/span&gt;&amp;gt; quit;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With this created, the steps are similar to those for SQLite. Once again, we
will use the &lt;code&gt;version_control&lt;/code&gt; and &lt;code&gt;upgrade&lt;/code&gt; management commands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ python manage.py version_control &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --database &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mysql+pymysql://nova:password@localhost/nova_before&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --version &lt;span style=&#34;color:#ae81ff&#34;&gt;215&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ python manage.py upgrade &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --database &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mysql+pymysql://nova:password@localhost/nova_before&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --version &lt;span style=&#34;color:#ae81ff&#34;&gt;216&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, unlike SQLite, we have a specific tool available to dump the DB
schemas - &lt;code&gt;mysqldump&lt;/code&gt;. Use that to dump the &lt;em&gt;before&lt;/em&gt; schema:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ mysqldump --no-data --skip-comments -u nova -ppassword nova_before &amp;gt; nova_before.sql
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;aside class=&#34;admonition note&#34;&gt;
	
	
	&lt;div class=&#34;admonition-content&#34;&gt;Fedora previously provided a &lt;code&gt;mysql-utilities&lt;/code&gt; package that provided a
&lt;code&gt;mysqldiff&lt;/code&gt; utility for doing this exact thing. However, it was retired in
Fedora 31 as it was no longer maintained.
See &lt;a href=&#34;https://bugzilla.redhat.com/show_bug.cgi?id=1691185&#34;&gt;Bugzilla&lt;/a&gt; for more
details.&lt;/div&gt;
&lt;/aside&gt;

&lt;p&gt;Once we have a database instance using the &lt;em&gt;before&lt;/em&gt; schema, we can apply the
code change and repeat the steps above, this time creating a &lt;code&gt;nova_after&lt;/code&gt;
database. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ mysql
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MariaDB &lt;span style=&#34;color:#f92672&#34;&gt;[(&lt;/span&gt;none&lt;span style=&#34;color:#f92672&#34;&gt;)]&lt;/span&gt;&amp;gt; CREATE DATABASE nova_after;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MariaDB &lt;span style=&#34;color:#f92672&#34;&gt;[(&lt;/span&gt;none&lt;span style=&#34;color:#f92672&#34;&gt;)]&lt;/span&gt;&amp;gt; GRANT ALL PRIVILEGES ON nova_after.* TO &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;nova&amp;#39;&lt;/span&gt;@&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt; IDENTIFIED BY &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MariaDB &lt;span style=&#34;color:#f92672&#34;&gt;[(&lt;/span&gt;none&lt;span style=&#34;color:#f92672&#34;&gt;)]&lt;/span&gt;&amp;gt; quit;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ python manage.py version_control --database &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mysql+pymysql://nova:password@localhost/nova_after&amp;#39;&lt;/span&gt; --version &lt;span style=&#34;color:#ae81ff&#34;&gt;215&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ python manage.py upgrade --database &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mysql+pymysql://nova:password@localhost/nova_after&amp;#39;&lt;/span&gt; --version &lt;span style=&#34;color:#ae81ff&#34;&gt;216&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ mysqldump --no-data --skip-comments -u nova -ppassword nova_after &amp;gt; nova_after.sql
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, diff the two schemas to identify any differences:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ diff nova_before.sql nova_after.sql
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;postgresql&#34;&gt;PostgreSQL&lt;/h2&gt;
&lt;p&gt;PostgreSQL exists in a funny space in nova, where it&amp;rsquo;s technically supported
but not many people use it. Nonetheless, there are PostgreSQL-specific
migrations in-tree so we must test them.&lt;/p&gt;
&lt;p&gt;Once again, this is quite similar to the above, though Postgres&amp;rsquo; user model
makes things a little more complicated. You need to create a user to run the
operations as, but you can&amp;rsquo;t simply create this as Postgres defaults to the
&lt;code&gt;ident&lt;/code&gt; auth (local UNIX user) scheme rather than &lt;code&gt;password&lt;/code&gt; (or, more
specifically, &lt;code&gt;md5&lt;/code&gt;). You need to &lt;a href=&#34;https://ubuntu.com/server/docs/databases-postgresql&#34;&gt;configure &lt;code&gt;pg_hba.conf&lt;/code&gt; to enable DB-specific
users&lt;/a&gt; and create e.g. a &lt;code&gt;nova&lt;/code&gt; user with a &lt;code&gt;password&lt;/code&gt; password.&lt;/p&gt;
&lt;p&gt;Once the user is created, you can create the DB using the &lt;code&gt;postgres&lt;/code&gt; tool:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo -u postgres dropdb --if-exists nova_before
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo -u postgres createdb --owner&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;nova nova_before
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With the DB created, the steps to generate the schema dump are once again
quite similar to SQLite and MySQL. Using &lt;code&gt;version_control&lt;/code&gt; and &lt;code&gt;upgrade&lt;/code&gt;
management commands once more:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ python manage.py version_control &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --database &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;postgresql://nova:password@localhost/nova_before&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --version &lt;span style=&#34;color:#ae81ff&#34;&gt;215&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ python manage.py upgrade &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --database &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;postgresql://nova:password@localhost/nova_before&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --version &lt;span style=&#34;color:#ae81ff&#34;&gt;216&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As with MySQL, Postgres comes with a specific tool for dumping the DB schemas -
&lt;code&gt;pg_dump&lt;/code&gt;. Use that to dump the &lt;em&gt;before&lt;/em&gt; schema:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ pg_dump postgresql://nova:password@localhost/nova_before &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --schema-only &amp;gt; nova_before.sql
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once we have a database instance using the &lt;em&gt;before&lt;/em&gt; schema, we can apply the
code change and repeat the steps above, this time creating a &lt;code&gt;nova_after&lt;/code&gt;
database. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo -u postgres dropdb --if-exists nova_after
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo -u postgres createdb --owner&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;nova nova_after
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ python manage.py version_control &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --database &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;postgresql://nova:password@localhost/nova_after&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --version &lt;span style=&#34;color:#ae81ff&#34;&gt;215&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ python manage.py upgrade &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --database &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;postgresql://nova:password@localhost/nova_after&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --version &lt;span style=&#34;color:#ae81ff&#34;&gt;216&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ pg_dump postgresql://nova:password@localhost/nova_after &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --schema-only &amp;gt; nova_after.sql
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, diff the two schemas to identify any differences:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ diff nova_before.sql nova_after.sql
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;
&lt;p&gt;The below script can be used to diff the database. It should be placed in the
root directory of the nova repo and executed from there. It relies on the
&lt;code&gt;py36&lt;/code&gt; tox virtualenv, which you probably have on your local system already (if
not, &lt;code&gt;tox -e py36&lt;/code&gt; will create it). It also uses a single database for each
backend, rather than the separate &lt;code&gt;nova_before&lt;/code&gt; and &lt;code&gt;nova_after&lt;/code&gt; databases.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/stephenfin/adc84a21f5f5ae3793f6a8ffa0b3f40f.js&#34;&gt;&lt;/script&gt;

</description>
    </item>
    
    <item>
      <title>Understanding the &#39;admin_or_owner&#39; rule in nova policies</title>
      <link>https://that.guru/blog/understanding-the-admin-or-owner-policy/</link>
      <pubDate>Wed, 03 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://that.guru/blog/understanding-the-admin-or-owner-policy/</guid>
      <description>&lt;p&gt;The OpenStack Compute service, nova, exposes a &lt;a href=&#34;https://docs.openstack.org/nova/latest/configuration/policy.html&#34;&gt;rich policy framework&lt;/a&gt; that
provides the ability to configure what certain types of users are allowed to
do across the API. The policy defaults are stored in code, allowing us to
define, for example, who is allowed to create or delete an instance, who can
configure flavors, and so forth. However, these policies are slightly
confusing. Take the aforementioned policy defining who can delete a specific
instance. This is configured using the &lt;a href=&#34;https://github.com/openstack/nova/blob/20.0.0/nova/policies/servers.py#L219-L228&#34;&gt;&lt;code&gt;os_compute_api:servers:delete&lt;/code&gt;
policy&lt;/a&gt; and, prior to the 21.0.0 (Ussuri) release, defaulted to the
&lt;a href=&#34;https://github.com/openstack/nova/blob/20.0.0/nova/policies/servers.py#L221&#34;&gt;&lt;code&gt;admin_or_owner&lt;/code&gt;&lt;/a&gt; rule. The name of this would suggest that the only person
that could delete an instance would be an admin or the person that created the
instance, but a quick test shows this not to be the case. Consider the
following case, used on a standard DevStack-based installation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ source openrc admin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ openstack project create --domain default test_project
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ openstack user create --project test_project --password test testuser1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ openstack user create --project test_project --password test testuser2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This creates a new project, &lt;code&gt;test_project&lt;/code&gt;, along with two new users,
&lt;code&gt;testuser1&lt;/code&gt; and &lt;code&gt;testuser2&lt;/code&gt;. We can then use the first of these users to create
a new instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt; EOF &amp;gt; openrc-testuser1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;export OS_PROJECT_DOMAIN_ID=default
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;export OS_USER_DOMAIN_ID=default
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;export OS_AUTH_TYPE=password
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;export OS_USERNAME=testuser1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;export OS_PASSWORD=test
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;export OS_PROJECT_NAME=test_project
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;export OS_TENANT_NAME=test_project
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;export OS_AUTH_URL=http://172.20.4.203/identity  # adjust accordingly
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ source openrc-testuser1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ openstack server create --flavor m1.tiny --image cirros-0.5.1-x86_64-disk test-server
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With the instance created, let&amp;rsquo;s now attempt to delete the server as the second
user:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt; EOF &amp;gt; openrc-testuser2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;export OS_PROJECT_DOMAIN_ID=default
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;export OS_USER_DOMAIN_ID=default
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;export OS_AUTH_TYPE=password
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;export OS_USERNAME=testuser2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;export OS_PASSWORD=test
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;export OS_PROJECT_NAME=test_project
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;export OS_TENANT_NAME=test_project
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;export OS_AUTH_URL=http://172.20.4.203/identity  # adjust accordingly
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ openstack server delete test-server
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This succeeds, which at first glance seems wrong but is actually correct.
Remember, the default rule is &lt;code&gt;admin_or_owner&lt;/code&gt; and the &amp;ldquo;owner&amp;rdquo; of an instance
is not the user - it&amp;rsquo;s the project that the server is created in.  Because both
&lt;code&gt;testuser1&lt;/code&gt; and &lt;code&gt;testuser2&lt;/code&gt; are members of the project that the instance was
created in, &lt;code&gt;test_project&lt;/code&gt;, it&amp;rsquo;s possible for &lt;code&gt;testuser2&lt;/code&gt; to delete the server
created by &lt;code&gt;testuser1&lt;/code&gt;. This &amp;ldquo;project as owner&amp;rdquo; design is consistent across
nova, with only a &lt;a href=&#34;https://specs.openstack.org/openstack/nova-specs/specs/newton/implemented/user-id-based-policy-enforcement.html&#34;&gt;few, limited exceptions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is confusing, and really lessens the power of policy is nova, which is why
in the 21.0.0 (Ussuri) release, we have introduced the concept of scope types
and roles via the &lt;a href=&#34;https://review.opendev.org/#/c/686058/&#34;&gt;policy defaults refresh blueprint&lt;/a&gt;. Though not yet
enabled by default, this (&lt;a href=&#34;https://review.opendev.org/#/q/topic:bp/policy-defaults-refresh&#34;&gt;huge&lt;/a&gt;) effort allows us to do things like mark a
user as having read-only permissions for things like servers or project-level
admin privileges. For example, if we wanted to say that &lt;code&gt;testuser1&lt;/code&gt; was an
admin but &lt;code&gt;testuser2&lt;/code&gt; was only allowed read-only permissions, we could do the
following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ openstack role add --project test_project --user testuser1 admin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ openstack role add --project test_project --user testuser2 reader
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is a big change with significant impacts, but should make policy
significantly more useful. It is explained in great detail in the nova
&lt;a href=&#34;https://docs.openstack.org/nova/latest/configuration/policy-concepts.html&#34;&gt;documentation&lt;/a&gt; and &lt;a href=&#34;https://docs.openstack.org/releasenotes/nova/ussuri.html#relnotes-21-0-0-stable-ussuri&#34;&gt;release notes&lt;/a&gt;, and I recommend reading both.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Emulated Trusted Platform Module (vTPM) in OpenStack 🔐</title>
      <link>https://that.guru/blog/emulated-tpm-in-openstack/</link>
      <pubDate>Thu, 28 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://that.guru/blog/emulated-tpm-in-openstack/</guid>
      <description>&lt;p&gt;Work is &lt;a href=&#34;https://review.opendev.org/#/q/topic:bp/add-emulated-virtual-tpm+(status:open+OR+status:merged)&#34;&gt;ongoing&lt;/a&gt; in nova to provide support for attaching virtual Trusted
Platform Modules (vTPMs) to instances. The below guide demonstrates how you can
go about testing this feature for yourself. This work was conducted on a Fedora
31 VM (with nested virt, though that&amp;rsquo;s not relevant) using DevStack master.&lt;/p&gt;
&lt;aside class=&#34;admonition note&#34;&gt;
	
	
	&lt;div class=&#34;admonition-content&#34;&gt;This is all very much work-in-progress at the moment. I aim to come back and
update this if/when things are merged.&lt;/div&gt;
&lt;/aside&gt;

&lt;h2 id=&#34;initial-steps&#34;&gt;Initial Steps&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;re going to use DevStack on Fedora 31 to test this. Fedora 31 is necessary
since Ubuntu 18.04 (Bionic) does not provide new enough versions of
&lt;a href=&#34;https://packages.ubuntu.com/bionic/libvirt-daemon&#34;&gt;libvirt&lt;/a&gt; or &lt;a href=&#34;https://packages.ubuntu.com/xenial/qemu-kvm&#34;&gt;QEMU&lt;/a&gt;, while Ubuntu 20.04 (Focal) is not supported by
DevStack at the time of writing and was affected by a &lt;a href=&#34;https://github.com/sqlalchemy/alembic/issues/699&#34;&gt;bug in barbican&lt;/a&gt;.
With a Fedora 31 installation at the ready, let&amp;rsquo;s update and get DevStack:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo dnf upgrade -y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git clone https://opendev.org/openstack/devstack
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd devstack
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The DevStack installation is pretty bog standard with the key differences being
that you need to enable the OpenStack Key Manager service, &lt;a href=&#34;https://docs.openstack.org/barbican/latest/&#34;&gt;barbican&lt;/a&gt;, for
storing secrets along with the virt preview repo to get new versions of libvirt
and QEMU. Here&amp;rsquo;s a sample &lt;code&gt;local.conf&lt;/code&gt;, to be placed into the &lt;code&gt;devstack&lt;/code&gt;
directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt;local|localrc&lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;RECLONE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## Passwords&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ADMIN_PASSWORD&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;password
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DATABASE_PASSWORD&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;password
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;RABBIT_PASSWORD&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;password
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HORIZON_PASSWORD&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;password
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SERVICE_PASSWORD&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;password
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SERVICE_TOKEN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;no-token-password
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## Additional plugins and configuration&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;enable_plugin barbican https://opendev.org/openstack/barbican
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;enable_service rabbit mysql key
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ENABLE_FEDORA_VIRT_PREVIEW_REPO&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There&amp;rsquo;s also a minor tweak necessary to work around pip 10 refusing to
uninstall system-provided Python packages:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;diff --git inc/python inc/python
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;index dd772960..63a3dc19 100644
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--- inc/python
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+++ inc/python
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;@@ -196,7 +196,7 @@ function pip_install {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;         no_proxy=&amp;#34;${no_proxy:-}&amp;#34; \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         PIP_FIND_LINKS=$PIP_FIND_LINKS \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         SETUPTOOLS_SYS_PATH_TECHNIQUE=rewrite \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-        $cmd_pip $upgrade \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+        $cmd_pip --ignore-installed $upgrade \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;         $@
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     result=$?
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;aside class=&#34;admonition note&#34;&gt;
	
	
	&lt;div class=&#34;admonition-content&#34;&gt;Yes, I&amp;rsquo;m aware that there can be negative implications to this, but it&amp;rsquo;s good
enough for our purposes here. Hopefully one of us will eventually get around to
configuring DevStack to install in virtualenvs by default.&lt;/div&gt;
&lt;/aside&gt;

&lt;p&gt;We also need to install the &lt;code&gt;swtpm&lt;/code&gt; and &lt;code&gt;swtpm_setup&lt;/code&gt; binaries. These are
provided in the Fedora repos (yay!):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo dnf install swtpm swtpm-tools
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, &lt;code&gt;crudini&lt;/code&gt; makes working with INI files a breeze. Let&amp;rsquo;s install that
too:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo dnf install crudini
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With all this done, you can stack:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./stack.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now go make a cup of tea. ☕&lt;/p&gt;
&lt;h2 id=&#34;configuring-nova&#34;&gt;Configuring nova&lt;/h2&gt;
&lt;p&gt;With the stack (hopefully) complete, we need to configure nova appropriately.
This is a simple, single-node &amp;ldquo;can I boot an instance&amp;rdquo; test so we don&amp;rsquo;t need to
do too much. The key steps are to check out the correct code, given that it&amp;rsquo;s
not yet merged, add some &lt;code&gt;nova.conf&lt;/code&gt; configuration options and create a new
flavor. First up, let&amp;rsquo;s checkout the correct nova code. You can use the
checkout link from the &lt;a href=&#34;https://packages.ubuntu.com/bionic/libvirt-daemon&#34;&gt;Gerrit review&lt;/a&gt; for this purpose:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd /opt/stack/nova
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# checkout using the &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Checkout&amp;#34;&lt;/span&gt; link in the &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Download&amp;#34;&lt;/span&gt; dropdown on the review,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# which I&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;m not providing here since it won&amp;#39;&lt;/span&gt;t age well
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, let&amp;rsquo;s modify the &lt;code&gt;nova.conf&lt;/code&gt; file the &lt;code&gt;nova-compute&lt;/code&gt; service. We&amp;rsquo;ll use
&lt;code&gt;crudini&lt;/code&gt; for this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ crudini --set /etc/nova/nova-cpu.conf libvirt swtpm_enabled True
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s restart the various nova services to load both the correct code and the
configuration changes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo systemctl restart devstack@n-*
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With everything restarted, we should be able to see the relevant
&lt;code&gt;COMPUTE_SECURITY_TPM_*&lt;/code&gt; traits reported by our sole compute node:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ openstack --os-placement-api-version 1.20 resource provider trait list &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --format value $RP_UUID | grep TPM
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(where &lt;code&gt;$RP_UUID&lt;/code&gt; is the UUID of the resource provider of the compute node,
which can be found via &lt;code&gt;openstack resource provider list&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;This should return the following:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;COMPUTE_SECURITY_TPM_1_2
COMPUTE_SECURITY_TPM_2_0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With that done, let&amp;rsquo;s create a suitable flavor. The key feature here is the
configuration of the &lt;code&gt;hw:tpm_version&lt;/code&gt; and &lt;code&gt;hw:tpm_model&lt;/code&gt; extra specs.
&lt;code&gt;hw:tpm_model&lt;/code&gt; is optional but &lt;code&gt;hw:tpm_version&lt;/code&gt; is required to enable the
feature:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ openstack flavor create test.vtpm &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --ram 512 --disk 1 --vcpus 1 --wait \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    --property hw:tpm_version=1.2 \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    --property hw:tpm_model=tpm-tis
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;create-an-instance-with-vtpm&#34;&gt;Create an instance with vTPM&lt;/h2&gt;
&lt;p&gt;With configuration complete, we can finally proceed to creating an instance.
Nothing to funky here: simply create an instance using the flavor we created
previously.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ openstack --os-compute-api-version 2.latest server create test.server &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --image cirros-0.5.1-x86_64-disk --flavor test.vtpm \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    --nic none --wait test.server
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once booted, let&amp;rsquo;s check if the generated XML includes the &lt;a href=&#34;https://libvirt.org/formatdomain.html#elementsTpm&#34;&gt;&lt;code&gt;&amp;lt;tpm&amp;gt;&lt;/code&gt;&lt;/a&gt; device
as expected:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sudo virsh list
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; Id   Name                State
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-----------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 10   instance-0000000d   running
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;$ sudo virsh dumpxml instance-0000000d | xmllint --xpath &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/domain/devices/tpm&amp;#39;&lt;/span&gt; -
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;tpm model=&amp;#34;tpm-tis&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;backend type=&amp;#34;emulator&amp;#34; version=&amp;#34;1.2&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;encryption secret=&amp;#34;8cc4e70c-d805-4d48-9302-e3c970d1217b&amp;#34;/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;/backend&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;alias name=&amp;#34;tpm0&amp;#34;/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;/tpm&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can also query barbican to see if nova correctly stored keys as expected:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ openstack secret list --format yaml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Algorithm: null
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Bit length: null
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Content types:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    default: application/octet-stream
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Created: &amp;#39;2020-05-28T15:41:05+00:00&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Expiration: null
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Mode: null
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Name: vTPM secret for instance bbe8bc62-8403-490b-bce3-bd9c8267147e
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Secret href: http://172.20.4.203/key-manager/v1/secrets/8cc4e70c-d805-4d48-9302-e3c970d1217b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Secret type: passphrase
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Status: ACTIVE
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can also validate that the rebuild operation works as expected:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ openstack server rebuild --wait test.server
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, we can ensure that things are properly cleaned up once we&amp;rsquo;re finished:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ openstack server delete test.server
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ openstack secret list --format yaml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;QED. 🎉&lt;/p&gt;
&lt;h2 id=&#34;further-reading&#34;&gt;Further reading&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;https://review.opendev.org/#/c/728505/&#34;&gt;spec&lt;/a&gt; and &lt;a href=&#34;https://review.opendev.org/#/q/topic:bp/add-emulated-virtual-tpm+(status:open+OR+status:merged)&#34;&gt;WIP code&lt;/a&gt; are well worth a read and contain background
information on most of the topics discussed here.&lt;/p&gt;
&lt;h2 id=&#34;package-versions&#34;&gt;Package versions&lt;/h2&gt;
&lt;p&gt;The following software versions were used. In summary, these correspond to the
master versions of various OpenStack projects and latest Fedora package
versions on the day of test:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Distro: Fedora 31 (with virt preview repo via DevStack)&lt;/li&gt;
&lt;li&gt;Kernel: &lt;code&gt;5.3.7-301.fc31.x86_64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Libvirt: 6.3.0&lt;/li&gt;
&lt;li&gt;QEMU: 5.0.0&lt;/li&gt;
&lt;li&gt;DevStack: &lt;code&gt;9a6ae3419c6412a55456aa87b7a790c255f01028&lt;/code&gt; (master)&lt;/li&gt;
&lt;li&gt;Nova: &lt;code&gt;de42f9e983cb4d4e94977697f86abf0a05e61cb4&lt;/code&gt; (master) (before checking
out in-progress vTPM changes)&lt;/li&gt;
&lt;li&gt;Barbican: &lt;code&gt;1ad43597352b225b6f3a21ef6c4186330cadf660&lt;/code&gt; (master)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using AMI Images in OpenStack</title>
      <link>https://that.guru/blog/upload-cirros-ami-images/</link>
      <pubDate>Thu, 28 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://that.guru/blog/upload-cirros-ami-images/</guid>
      <description>&lt;p&gt;I recently had to validate some interactions between the OpenStack Image
service, &lt;a href=&#34;https://docs.openstack.org/glance/latest/&#34;&gt;glance&lt;/a&gt;, and the Compute service, &lt;a href=&#34;https://docs.openstack.org/nova/latest/&#34;&gt;nova&lt;/a&gt;. For this, I needed
separate kernel and ramdisk images. Glance supports a variety of image formats,
which is required since different virtualization backends support different
image formats. For quite some time, the &lt;a href=&#34;https://docs.openstack.org/devstack/latest/&#34;&gt;DevStack&lt;/a&gt; installer defaulted to
using AMI images, so if you&amp;rsquo;d run &lt;code&gt;openstack image list&lt;/code&gt; on a fresh
DevStack-based deployment, you&amp;rsquo;d have seen three &lt;a href=&#34;https://download.cirros-cloud.net/&#34;&gt;CirrOS&lt;/a&gt; &amp;ldquo;images&amp;rdquo; with
differing suffixes: &lt;code&gt;-uec&lt;/code&gt;, &lt;code&gt;-uec-ramdisk&lt;/code&gt;, and &lt;code&gt;-uec-kernel&lt;/code&gt;. This has since
&lt;a href=&#34;https://github.com/openstack/devstack/commit/6fc332d85279865c32f50b081efb25ba7b671a9a&#34;&gt;changed&lt;/a&gt;, but there&amp;rsquo;s no reason we can&amp;rsquo;t create these types of image still.&lt;/p&gt;
&lt;p&gt;First, let&amp;rsquo;s get the image. We&amp;rsquo;re going to want the Ubuntu Enterprise Cloud
(UEC) CirrOS images:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ wget https://download.cirros-cloud.net/0.5.1/cirros-0.5.1-x86_64-uec.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Extract this tarball, which will yield three files: a &lt;code&gt;vmlinuz&lt;/code&gt; kernel image,
a &lt;code&gt;initrd&lt;/code&gt; ramdisk image, and a empty mkfs&amp;rsquo;d &lt;code&gt;blank&lt;/code&gt; image:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ tar -xvzf cirros-0.5.1-x86_64-uec.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With those created, we can now create the three images in glance. First, the
kernel image:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ openstack image create cirros-0.5.1-x86_64-uec-kernel &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --public --disk-format aki --container-format aki \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    --file cirros-0.5.1-x86_64-vmlinuz
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then the ramdisk image:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ openstack image create cirros-0.5.1-x86_64-uec-ramdisk &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --public --disk-format ari --container-format ari \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    --file cirros-0.5.1-x86_64-initrd
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And finally the &amp;ldquo;machine&amp;rdquo; image, which requires references to the kernel and
ramdisk image by way of image metadata properties:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ openstack image create cirros-0.5.1-x86_64-uec &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --property ramdisk_id=52ab2881-3f0e-4d0b-8824-d6c144eb872a \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    --property kernel_id=b582cf17-1785-4915-9b89-dc31c1794757 \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    --public --disk-format ami --container-format ami \
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    --file cirros-0.5.1-x86_64-blank.img
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once done, you should be able to boot an instance using the machine image:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ openstack server create cirros-server &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --flavor m1.tiny --image cirros-0.5.1-x86_64-uec
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Why You Can&#39;t Schedule to Host NUMA Nodes in Nova?</title>
      <link>https://that.guru/blog/the-numa-scheduling-story-in-nova/</link>
      <pubDate>Thu, 21 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://that.guru/blog/the-numa-scheduling-story-in-nova/</guid>
      <description>&lt;p&gt;If I had a euro for every time someone had asked me or someone else working on
nova for the ability to schedule an instance to a specific host NUMA node, I
might never have to leave the pub (back in halcyon days pre-COVID-19 when pubs
were still a thing, that is).&lt;/p&gt;
&lt;p&gt;Below is an edited version of a response one of my friends and colleagues,
&lt;a href=&#34;https://github.com/SeanMooney&#34;&gt;Sean Mooney&lt;/a&gt;, provided to a Red Hat partner asking just this question
recently. This information is accurate as of the OpenStack 21.0.0 (Ussuri)
release but is subject to change in future releases.&lt;/p&gt;
&lt;h2 id=&#34;whats-wrong-with-choosing-a-host-numa-node&#34;&gt;What&amp;rsquo;s wrong with choosing a host NUMA node?&lt;/h2&gt;
&lt;p&gt;In almost all cases when we discuss the motivation for this request with
people, we discover that selecting host CPUs or NUMA nodes via the flavor is
not actually what they wanted to do. Rather, it is seen as a means to an end
recommended by people familiar with virtualisation technologies but not with
cloud platforms. There are a number of reasons this is not considered an
acceptable solution in a cloud context. To summarize:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It is seen as a potential security concern for public clouds.&lt;/p&gt;
&lt;p&gt;To correctly understand which flavor to use when flavors can map to host
resources like CPUs or NUMA nodes would require knowledge of the underlying
hardware. This information can be used by a malicious user as a DDOS vector
as they could intentionally place their instance on the same NUMA node
(opening the opportunity to exhaust memory bandwidth of a NUMA node) and
host as their victim. It also exposes information about what hardware a
cloud is running indirectly that many clouds would prefer not to share.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is a violation of the cloud abstraction.&lt;/p&gt;
&lt;p&gt;OpenStack is a cloud platform intended to provide a consistent API across
multiple backend implementations of services. In fact, cloud abstraction is
a key element of the &lt;a href=&#34;https://docs.openstack.org/nova/latest/contributor/project-scope.html#driver-parity&#34;&gt;nova project scope&lt;/a&gt;. Virtual NUMA topologies are
supported by two main drivers today, Libvirt and HyperV, and while the
Libvirt driver and Libvirt in general are much more flexible than other
virt drivers in many aspects, nova does strive to keep the differences to a
minimum. If we were to encode the semantics of how virtual resources map to
physical resources, we would exclude the possibility of achieving
interoperability between different drivers or different clouds as well as
create barriers to adopting features across multiple drivers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It makes our clouds much smaller and less useful.&lt;/p&gt;
&lt;p&gt;Encoding host specific resource assignment information severely limits the
available hosts that can be used to create an instance. It complicates move
operations and makes the maintainability and extensibility of the scheduler
harder over time. The operational overhead of having to create different
flavors for a VM that runs on node 5 vs node 6 and the additional cognitive
load that this puts on the end user is a failure in API design. Instead of
expressing an abstract policy, the end user and operator needs to
understand the intricate mechanics of how the workload compute context is
created.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are additional reasons to those listed above, but these alone should
serve to illustrate that this is not oversight in how nova currently functions
but rather a very deliberate design choice that we do not want to remove.&lt;/p&gt;
&lt;h2 id=&#34;but-we-really-need-this-so-why-cant-you-special-case-it-for-us&#34;&gt;But we really need this, so why can&amp;rsquo;t you special case it for us?&lt;/h2&gt;
&lt;p&gt;If you were willing to ignore all of the above, and the many other reasons for
not doing this, you might tempted to think that you could maybe hack this in
anyway. After all, extra specs have long been one of the untamed corners of
nova (at least, they were until &lt;a href=&#34;https://specs.openstack.org/openstack/nova-specs/specs/ussuri/implemented/flavor-extra-spec-validators.html&#34;&gt;Ussuri&lt;/a&gt;). Not so fast. Long-term, it&amp;rsquo;s
unlikely that this will even be an option for reasons to do with how we&amp;rsquo;ve
handled scheduling in nova in the past and how we&amp;rsquo;re planning to evolve it in
the future.&lt;/p&gt;
&lt;p&gt;As you may or may not be aware, there has been a multi-year effort to evolve
the tracking of resources in OpenStack. This effort predates the creation of
the placement service but was the primary reason for its existence. Nova has a
multi-layer scheduling approach, the first step of which is delegated to the
placement service, followed by filtering and then weighing. Following
scheduling (that is, the act of selecting a host) there is then a resource
assignment phase that is performed by the virt driver.&lt;/p&gt;
&lt;p&gt;While the scheduling and resource assignment steps are heavily linked, they are
&lt;strong&gt;independent&lt;/strong&gt; operations. To put this in concrete terms, while the NUMA
topology filter has input into selecting a host, by determining whether a given
NUMA topology can be created on a given host, it has no input into selecting
which NUMA nodes on the host will be used for the VM. That decision is made
entirely by the virt driver during the assignment phase. The three phases of
nova scheduling today are summarised as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The placement service is queried for a set of allocation candidates
(potential hosts your instance can be scheduled to) that represent resource
allocation on hosts that can fulfil the quantitative and qualitative
requirement of the resources requested for an instance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The hosts represented by those allocation candidates are filtered based
primarily on non-resource related attributes such as server group affinity
or anti-affinity constraints and resources and topologies that are not yet
modeled in placement, such as PCI devices and hugepages and various NUMA
affinity metrics.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The filtered hosts are weighed to select an optimal host.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Up until now, placement, which has a global hierarchical view of resources from
multiple services, has largely operated on the basis of tracking a simple tally
count of resources on a given host. When it was originally created, placement
modeled each compute host as a single resource provider containing multiple
inventories of different resources classes. Each resource provider can only
have one instance of an inventory per resource class, so when memory is
represented as &lt;code&gt;MEMORY_MB&lt;/code&gt; it tracks the total available system memory on the
host. Placement also tracks allocation from resource providers to instances so
it can know how much of each resource is still available. It can then use this
capacity information in addition to some qualitative traits (e.g. this host
has SSD storage while this host does not) to produce a set of potential
allocation candidates.&lt;/p&gt;
&lt;p&gt;As we have evolved from this simple view, we have extended the placement API to
support nested resource providers, allowing us to convert a flat view of a
host&amp;rsquo;s resources into a tree data structure. There were many reasons for this
effort, but the chief motivator was that it allows us to begin modelling of
&lt;a href=&#34;https://specs.openstack.org/openstack/nova-specs/specs/ussuri/approved/numa-topology-with-rps.html&#34;&gt;NUMA topologies in placement&lt;/a&gt;. This will allow us to track hugepages as
inventory in placement as well as consider NUMA affinity for things like vGPUs
(note: we also plan to model generic PCI devices in placement, though this
effort will likely not begin until the NUMA-in-placement effort is complete).
There are two implications of this work that would prevent a &amp;ldquo;boot on NUMA node
N&amp;rdquo; feature in the future.&lt;/p&gt;
&lt;p&gt;Firstly, doing this work will allow us to remove the NUMA topology filter in
the future, increasing scheduler performance among other things but you do not
get this performance for free. In the case of placement, the trade-off is in
the freedom to select resources on the host during the assignment phase. In
order to maintain placement as the single source or truth with regard to
capacity and availability of resources, it is vitally important that, when a
resource class on a host exists on multiple separate providers, the virt driver
will &lt;strong&gt;only&lt;/strong&gt; allocate resources from the hardware corresponding to the
resource provider chosen during scheduling. For example, memory tracked per
NUMA node or vGPUs tracked per physical GPU must be assigned from the NUMA node
or pGPU that the allocation is made against in placement. This means that in a
world where all resources are tracked in placement, the assignment done by a
virt driver is constrained to only looking at a subset of hardware that
correlates with the placement allocation and it will no longer be possible to,
for example, ensure that a given instance is pinned to CPUs from a specific
NUMA node.&lt;/p&gt;
&lt;p&gt;Secondly, it&amp;rsquo;s important to realize that the resource topology reported to
placement will be determined by the virt driver that reports them.  For
example, ironic hosts are represented using a single custom resource class
rather than reporting &lt;code&gt;VCPU&lt;/code&gt;, &lt;code&gt;MEMORY_MB&lt;/code&gt; and &lt;code&gt;DISK_GB&lt;/code&gt; inventories in
order to model their consumption as a single unit. This means that at the time
of making the placement query, since we have not yet selected a host we also
have not selected a compute context (hypervisor, baremetal/composable server or
container runtime) and as such cannot make assumptions about how the virt
driver that manages that host will model its resource in placement. Nova
supports using multiple compute contexts concurrently and it&amp;rsquo;s not uncommon for
operators to use image-based filters to map Windows images to HyperV hosts and
Linux images to VMWare or Libvirt hosts. Similarly, in a multi-architecture
cloud, they may offer PowerVM hosts. Since each of these compute contexts may
support assigning host resources to instances in different ways we cannot make
it an API requirement to pin the instance to NUMA node N based on a flavor
extra spec.&lt;/p&gt;
&lt;p&gt;Taken together, the continued effort to move tracking of all resource to
placement means any effort to map a given instance to a specific host NUMA node
is dead on arrival. We can achieve what&amp;rsquo;s necessary, but it can and should be
done in a better way.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>VCPUs, PCPUs and Placement</title>
      <link>https://that.guru/blog/cpu-resources-redux/</link>
      <pubDate>Wed, 12 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://that.guru/blog/cpu-resources-redux/</guid>
      <description>&lt;p&gt;In a &lt;a href=&#34;https://that.guru/blog/cpu-resources&#34;&gt;previous blog post&lt;/a&gt;, I&amp;rsquo;d described how instance NUMA
topologies and CPU pinning worked in the OpenStack Compute service (nova).
Starting with the 20.0.0 (Train) release, things have changed somewhat. This
post serves to explain how things have changed and what impact that will have
on a typical deployment.&lt;/p&gt;
&lt;h2 id=&#34;the-pre-train-world&#34;&gt;The pre-Train world&lt;/h2&gt;
&lt;p&gt;As noted previously, a NUMA topology could be added to an instance either
explicitly, using the &lt;code&gt;hw:numa_nodes=N&lt;/code&gt; flavor extra spec, or implicitly, by
requesting a specific mempage size (&lt;code&gt;hw:mem_page_size=N&lt;/code&gt;) or CPU pinning
(&lt;code&gt;hw:cpu_policy=dedicated&lt;/code&gt;). For historical reasons, it is not possible to
request memory pages or CPU pinning without getting a NUMA topology meaning
every pinned instance or instance with hugepages (common when using something
like Open vSwitch with DPDK) has a NUMA topology associated with it.&lt;/p&gt;
&lt;p&gt;The presence of a NUMA topology implies a couple of things. The most
beneficial of them is that each instance NUMA node is mapped to a unique host
NUMA node and will only consume CPUs and RAM from that host node. The NUMA
topology of the instance is exposed to the guest OS meaning well engineered
applications running in the guest OS are able to able to tune themselves for
this topology and avoid cross-NUMA node memory accesses and the performance
penalties these brings. Unfortunately, there have also been some downsides, of
which two were rather significant. The most impactful of these was the
inability to correctly live migrate such instances, as noted in
&lt;a href=&#34;https://bugs.launchpad.net/nova/+bug/1417667&#34;&gt;bug #1417667&lt;/a&gt;. In short, that bug noted that nova was not recalculating any
of its CPU or mempage pinning information on a migration, resulting in a
failure to live migrate to hosts with different NUMA topologies or, worse,
individual instance NUMA nodes being spread across multiple NUMA nodes or the
pinned CPUs of pinned instances overlapping with those of other pinned
instances. The other issue stemmed from nova&amp;rsquo;s schizophrenic model for tracking
resource utilization, where it used different models for tracking pinned CPUs
from unpinned or &amp;ldquo;floating&amp;rdquo; CPUs, along with different models for tracking
standard memory from explicit small and huge page requests. Combined, these led
to a scenario where operators had to divide their datacenters up into &lt;a href=&#34;https://docs.openstack.org/nova/latest/admin/aggregates.html&#34;&gt;host
aggregates&lt;/a&gt; in order to separate normal, unpinned instances from both pinned
instances and unpinned instances with a NUMA topology.&lt;/p&gt;
&lt;h2 id=&#34;train-to-the-rescue&#34;&gt;Train to the rescue&lt;/h2&gt;
&lt;p&gt;Train changes things. Not only does it resolve the live migration issue through
the completion of the &lt;a href=&#34;https://specs.openstack.org/openstack/nova-specs/specs/train/approved/numa-aware-live-migration.html&#34;&gt;NUMA-aware live migration spec&lt;/a&gt; but it introduces an
&lt;a href=&#34;https://specs.openstack.org/openstack/nova-specs/specs/train/approved/cpu-resources.html&#34;&gt;entirely new model for tracking CPU resources&lt;/a&gt; that prevents the need to
shard your datacenter using host aggregates. This is made possible by the
reporting of a new resource type, &lt;code&gt;PCPU&lt;/code&gt;, for host CPUs intended to host pinned
instance CPUs. This is described in the &lt;a href=&#34;https://docs.openstack.org/releasenotes/nova/train.html#relnotes-20-0-0-stable-train&#34;&gt;Train release notes&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Compute nodes using the libvirt driver can now report &lt;code&gt;PCPU&lt;/code&gt; inventory. This
is consumed by instances with dedicated (pinned) CPUs. This can be configured
using the &lt;code&gt;[compute] cpu_dedicated_set&lt;/code&gt; config option. The scheduler will
automatically translate the legacy &lt;code&gt;hw:cpu_policy&lt;/code&gt; flavor extra spec or
&lt;code&gt;hw_cpu_policy&lt;/code&gt; image metadata property to &lt;code&gt;PCPU&lt;/code&gt; requests, falling back to
&lt;code&gt;VCPU&lt;/code&gt; requests only if no &lt;code&gt;PCPU&lt;/code&gt; candidates are found. Refer to the help
text of the &lt;code&gt;[compute] cpu_dedicated_set&lt;/code&gt;, &lt;code&gt;[compute] cpu_shared_set&lt;/code&gt; and
&lt;code&gt;vcpu_pin_set&lt;/code&gt; config options for more information.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We&amp;rsquo;ll explore how this manifests itself in a bit, but before that we should
look at how one can migrate from an existing pre-Train deployment using
&lt;code&gt;[DEFAULT] vcpu_pin_set&lt;/code&gt; (or not using it, as the case may be) to these new
configuration options.&lt;/p&gt;
&lt;h2 id=&#34;migrating-to-train&#34;&gt;Migrating to Train&lt;/h2&gt;
&lt;p&gt;The migration from Stein to Train is tricky. In short, we need to migrate from
&lt;code&gt;[DEFAULT] vcpu_pin_set&lt;/code&gt; to a combination of &lt;code&gt;[compute] cpu_shared_set&lt;/code&gt; and
&lt;code&gt;[compute] cpu_dedicated_set&lt;/code&gt; and unset &lt;code&gt;[DEFAULT] reserved_host_cpus&lt;/code&gt;. How you
do this is touched upon in the help text for the &lt;a href=&#34;https://docs.openstack.org/nova/train/configuration/config.html#DEFAULT.vcpu_pin_set&#34;&gt;&lt;code&gt;[DEFAULT] vcpu_pin_set&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&#34;https://docs.openstack.org/nova/train/configuration/config.html#compute.cpu_shared_set&#34;&gt;&lt;code&gt;[compute] cpu_shared_set&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://docs.openstack.org/nova/train/configuration/config.html#compute.cpu_dedicated_set&#34;&gt;&lt;code&gt;[compute] cpu_dedicated_set&lt;/code&gt;&lt;/a&gt; options.
As always, a diagram will help:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://that.guru/media/cpu-resources-redux_migration.png&#34; alt=&#34;Migrating nova.conf&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once this migration is complete, restarting the &lt;code&gt;nova-compute&lt;/code&gt; service will
result in nova automatically &amp;ldquo;reshaping&amp;rdquo; the inventory for the compute node
stored in placement. Any host CPUs listed in the &lt;code&gt;[compute] cpu_shared_set&lt;/code&gt;
config option will continue to be reported as &lt;code&gt;VCPU&lt;/code&gt; inventory, but host CPUs
listed in the &lt;code&gt;[compute] cpu_dedicated_set&lt;/code&gt; config option will be reported as
&lt;code&gt;PCU&lt;/code&gt; inventory.&lt;/p&gt;
&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s look at some examples of how this would be reflected in the real world.
For all these examples, consider a host with two sockets and two CPUs with four
cores and no hyperthreading (so eight CPUs).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://that.guru/media/cpu-resources_host-topology.png&#34; alt=&#34;The basic host&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;hosts-with-unpinned-workloads&#34;&gt;Hosts with unpinned workloads&lt;/h3&gt;
&lt;p&gt;If your host is only intended for unpinned workloads, you don&amp;rsquo;t need to do
anything! If neither &lt;code&gt;[compute] cpu_shared_set&lt;/code&gt; nor &lt;code&gt;[compute] cpu_dedicated_set&lt;/code&gt; are configured, the former will default to all host cores.&lt;/p&gt;
&lt;p&gt;We can see this in practice by examining the placement records for the given
compute node. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ openstack --os-placement-api-version 1.18 resource provider inventory show \
    6a969900-bbf7-4725-959b-2db3092933b0 VCPU
+------------------+-------+
| Field            | Value |
+------------------+-------+
| allocation_ratio | 16.0  |
| max_unit         | 8     |
| reserved         | 0     |
| step_size        | 1     |
| min_unit         | 1     |
| total            | 8     |
+------------------+-------+

$ openstack --os-placement-api-version 1.18 resource provider inventory show \
    6a969900-bbf7-4725-959b-2db3092933b0 PCPU
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Optionally, we might decide to exclude a certain number of cores, perhaps
setting aside some for the host. For example, to reserve core 0 from each host
NUMA node for the host, configure the following in &lt;code&gt;nova.conf&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[compute]
cpu_shared_set = 1-3,5-7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we now query placement again, we&amp;rsquo;ll see the number of available &lt;code&gt;VCPU&lt;/code&gt;
inventory has dropped.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ openstack --os-placement-api-version 1.18 resource provider inventory show \
    6a969900-bbf7-4725-959b-2db3092933b0 VCPU
+------------------+-------+
| Field            | Value |
+------------------+-------+
| allocation_ratio | 16.0  |
| max_unit         | 6     |
| reserved         | 0     |
| step_size        | 1     |
| min_unit         | 1     |
| total            | 6     |
+------------------+-------+

$ openstack --os-placement-api-version 1.18 resource provider inventory show \
    6a969900-bbf7-4725-959b-2db3092933b0 PCPU
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;hosts-with-pinned-workloads&#34;&gt;Hosts with pinned workloads&lt;/h3&gt;
&lt;p&gt;Next, let&amp;rsquo;s consider a host that&amp;rsquo;s only intended for pinned workloads.
Previously, we highly recommended configuring &lt;code&gt;[DEFAULT] vcpu_pin_set&lt;/code&gt; as not
setting this could result in impacted performance for some workloads due to
contention from the host. The new &lt;code&gt;[compute] cpu_dedicated_set&lt;/code&gt; option is
mandatory because, as noted above, not configuring any option will result in
all host cores being reported as &lt;code&gt;VCPU&lt;/code&gt; inventory. Let&amp;rsquo;s once again reserve
core 0 from each host NUMA node for the host by configuring our &lt;code&gt;nova.conf&lt;/code&gt;
like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[compute]
cpu_dedicated_set = 1-3,5-7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we query placement, we&amp;rsquo;ll no longer see &lt;code&gt;VCPU&lt;/code&gt; inventory but rather &lt;code&gt;PCPU&lt;/code&gt;
inventory.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ openstack --os-placement-api-version 1.18 resource provider inventory show \
    6a969900-bbf7-4725-959b-2db3092933b0 VCPU

$ openstack --os-placement-api-version 1.18 resource provider inventory show \
    6a969900-bbf7-4725-959b-2db3092933b0 PCPU
+------------------+-------+
| Field            | Value |
+------------------+-------+
| allocation_ratio | 1.0   |
| max_unit         | 6     |
| reserved         | 0     |
| step_size        | 1     |
| min_unit         | 1     |
| total            | 6     |
+------------------+-------+
&lt;/code&gt;&lt;/pre&gt;
&lt;aside class=&#34;admonition note&#34;&gt;
	
	
	&lt;div class=&#34;admonition-content&#34;&gt;&lt;code&gt;PCPU&lt;/code&gt; inventory will always have an &lt;code&gt;allocation_ratio&lt;/code&gt; or &lt;code&gt;1.0&lt;/code&gt;. This is
because pinned CPUs cannot be oversubscribed.&lt;/div&gt;
&lt;/aside&gt;

&lt;h2 id=&#34;hosts-with-mixed-pinned-and-unpinned-workloads&#34;&gt;Hosts with mixed pinned and unpinned workloads&lt;/h2&gt;
&lt;p&gt;Finally, let&amp;rsquo;s consider a host with both pinned and unpinned workloads. As
discussed earlier, this was not previously possible. To do this, we must simple
configure both &lt;code&gt;[compute] cpu_shared_set&lt;/code&gt; and &lt;code&gt;[compute] cpu_dedicated_set&lt;/code&gt; on
the host. Given that we have two host NUMA nodes with for cores per node, let&amp;rsquo;s
reserve two cores from each node for both pinned and unpinned workloads by
configuring our &lt;code&gt;nova.conf&lt;/code&gt; like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[compute]
cpu_shared_set = 0,1,4,5
cpu_dedicated_set = 2,3,6,7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we query placement, we&amp;rsquo;ll now see both &lt;code&gt;VCPU&lt;/code&gt; and &lt;code&gt;PCPU&lt;/code&gt; inventory reported
alongside each other.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ openstack --os-placement-api-version 1.18 resource provider inventory show \
    6a969900-bbf7-4725-959b-2db3092933b0 VCPU
+------------------+-------+
| Field            | Value |
+------------------+-------+
| allocation_ratio | 16.0  |
| max_unit         | 4     |
| reserved         | 0     |
| step_size        | 1     |
| min_unit         | 1     |
| total            | 4     |
+------------------+-------+

$ openstack --os-placement-api-version 1.18 resource provider inventory show \
    6a969900-bbf7-4725-959b-2db3092933b0 PCPU
+------------------+-------+
| Field            | Value |
+------------------+-------+
| allocation_ratio | 1.0   |
| max_unit         | 4     |
| reserved         | 0     |
| step_size        | 1     |
| min_unit         | 1     |
| total            | 4     |
+------------------+-------+
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;The ability to place both pinned and unpinned instances on the same compute
node should lead to higher resource utilization and avoid the need to shard
your compute, both of which are very useful features for smaller deployments.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Upgrading DD-WRT to OpenWRT on the TP-Link TL-WR1043ND</title>
      <link>https://that.guru/blog/updating-tp-link-tl-wr1043nd/</link>
      <pubDate>Tue, 02 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://that.guru/blog/updating-tp-link-tl-wr1043nd/</guid>
      <description>&lt;p&gt;I had an old &lt;a href=&#34;https://www.tp-link.com/uk/home-networking/wifi-router/tl-wr1043nd/&#34;&gt;TP-Link TL-WR1043ND&lt;/a&gt; that was running DD-WRT firmware from
2013. Needless to say, this was pretty ancient and probably should be remedied
but, unfortunately, I&amp;rsquo;d been unable to figure out how to do this via the web
UI. It turns this can&amp;rsquo;t actually be done and instead you need to use a
terminal. The below are my notes from doing just this.&lt;/p&gt;
&lt;p&gt;First, you need to download the original firmware and strip the bootloader from
it. You can source these firmwares from the TP-Link site but unfortunately,
things aren&amp;rsquo;t as simple as that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you want to revert back to stock TP-link firmware from custom firmware,
most of the time you can not flash the TP-Link firmware directly from the
official TP-Link website.&lt;/p&gt;
&lt;p&gt;The reason for this is that most of the downloadable firmware from the
TP-Link website contains a so called bootloader section in front of the
actual firmware.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thankfully, a kind individual on the internet has done this work for us and you
can download the firmware with the bootloader stripped from
&lt;a href=&#34;https://www.friedzombie.com/tplink-stripped-firmware/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once downloaded, you need to flash this firmware. To do that, you need SSH
access. Login in to the router and go to the &amp;ldquo;Services&amp;rdquo; tab. Once there, scroll
down and enable SSH access. After that, go to the &amp;ldquo;Administration&amp;rdquo; and toggle
the radio button for &amp;ldquo;SSH Managment&amp;rdquo;. Reboot the router.&lt;/p&gt;
&lt;p&gt;After reboot, extract and transfer the stripped firmware to the router:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ unzip TL-WR1043ND-V1-stripped.zip
$ cd TL-WR1043ND-V1-stripped
$ scp TL-WR1043ND-V1-FW0.0.3-stripped.bin root@192.168.1.1:/tmp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(use your admin password to authenticate).&lt;/p&gt;
&lt;p&gt;Once this has been uploaded, SSH into the device to perform the restore:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ssh root@192.168.1.1
$ cd /tmp
$ mtd -r write TL-WR1043ND-V1-FW0.0.3-stripped.bin linux
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the restore is complete, you can download the new firmware for the device
from &lt;a href=&#34;http://downloads.openwrt.org/releases/18.06.2/targets/ar71xx/generic/&#34;&gt;openwrt.org&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ wget http://downloads.openwrt.org/releases/18.06.2/targets/ar71xx/generic/openwrt-ar71xx-generic-tl-wr1043nd-v1-squashfs-factory.bin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Upload this through the web UI.&lt;/p&gt;
&lt;h2 id=&#34;bonus-restoring-to-stock-from-openwrt&#34;&gt;Bonus: Restoring to stock from OpenWRT&lt;/h2&gt;
&lt;p&gt;This is pretty simple too. Follow the above but instead of flashing to &lt;code&gt;linux&lt;/code&gt;,
flash to &lt;code&gt;firmware&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mtd -r write TL-WR1043ND-V1-FW0.0.3-stripped.bin firmware
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ediy.com.my/index.php/blog/item/9-tp-link-tl-wr1043nd-resotre-from-dd-wrt-to-original-firmware&#34;&gt;http://ediy.com.my/index.php/blog/item/9-tp-link-tl-wr1043nd-resotre-from-dd-wrt-to-original-firmware&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.friedzombie.com/tplink-stripped-firmware/&#34;&gt;https://www.friedzombie.com/tplink-stripped-firmware/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://forum.openwrt.org/t/solved-re-installing-the-original-tp-link-firmware-a-second-time/9249/5&#34;&gt;https://forum.openwrt.org/t/solved-re-installing-the-original-tp-link-firmware-a-second-time/9249/5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>NUMA, CPU Pinning and &#39;vcpu_pin_set&#39;</title>
      <link>https://that.guru/blog/cpu-resources/</link>
      <pubDate>Fri, 19 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://that.guru/blog/cpu-resources/</guid>
      <description>&lt;p&gt;The libvirt driver in the OpenStack Compute service (nova) has supported
instance NUMA topologies for a number of releases. A NUMA topology can be added
to an instance either explicitly, using the &lt;code&gt;hw:numa_nodes=N&lt;/code&gt; flavor extra
spec, or implicitly, by requesting a specific mempage size
(&lt;code&gt;hw:mem_page_size=N&lt;/code&gt;) or CPU pinning (&lt;code&gt;hw:cpu_policy=dedicated&lt;/code&gt;). For
historical reasons, it is not possible to request memory pages or CPU pinning
without getting a NUMA topology meaning every pinned instance or instance with
hugepages (common when using something like Open vSwitch with DPDK) has a NUMA
topology associated with it.&lt;/p&gt;
&lt;aside class=&#34;admonition note&#34;&gt;
	
	
	&lt;div class=&#34;admonition-content&#34;&gt;For most of the extra specs mentioned here and below, there exists an
equivalent image metadata property. These are omitted here for brevity.&lt;/div&gt;
&lt;/aside&gt;

&lt;p&gt;For yet more historical reasons, nova has gained a number of configuration
options that only apply to these instances with NUMA topologies or those
without. This article aims to discuss the implications of one of these,
&lt;code&gt;vcpu_pin_set&lt;/code&gt;, through a number of relevant examples.&lt;/p&gt;
&lt;h2 id=&#34;overview-of-vcpu_pin_set&#34;&gt;Overview of &lt;code&gt;vcpu_pin_set&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;vcpu_pin_set&lt;/code&gt; option has existed in nova for quite some time and describes
itself as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Defines which physical CPUs (pCPUs) can be used by instance
virtual CPUs (vCPUs).&lt;/p&gt;
&lt;p&gt;Possible values:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A comma-separated list of physical CPU numbers that virtual CPUs can be
allocated to by default. Each element should be either a single CPU number,
a range of CPU numbers, or a caret followed by a CPU number to be
excluded from a previous range. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  vcpu_pin_set = &amp;quot;4-12,^8,15&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;This config option has two purposes. Firstly, the placement service uses it to
generate the amount of &lt;code&gt;VCPU&lt;/code&gt; resources available on a given host using the
following formula:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(SUM(CONF.vcpu_pin_set) * CONF.cpu_allocation_ratio) - CONF.reserved_host_cpus
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(where &lt;code&gt;SUM&lt;/code&gt; is the sum of CPUs expressed by the CPU mask).&lt;/p&gt;
&lt;p&gt;How we do this can be seen at [&lt;a href=&#34;https://github.com/openstack/nova/blob/19.0.0/nova/virt/libvirt/driver.py#L5714-L5754&#34;&gt;1&lt;/a&gt;]&lt;a href=&#34;https://github.com/openstack/nova/blob/19.0.0/nova/virt/libvirt/driver.py#L5714-L5754&#34;&gt;1&lt;/a&gt;, [&lt;a href=&#34;https://github.com/openstack/nova/blob/19.0.0/nova/virt/libvirt/driver.py#L6645-L6661&#34;&gt;2&lt;/a&gt;]&lt;a href=&#34;https://github.com/openstack/nova/blob/19.0.0/nova/virt/libvirt/driver.py#L6645-L6661&#34;&gt;2&lt;/a&gt;, [&lt;a href=&#34;https://github.com/openstack/nova/blob/19.0.0/nova/virt/driver.py#L903-L935&#34;&gt;3&lt;/a&gt;]&lt;a href=&#34;https://github.com/openstack/nova/blob/19.0.0/nova/virt/driver.py#L903-L935&#34;&gt;3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The number of &lt;code&gt;VCPU&lt;/code&gt; resources impacts instances regardless of whether they
have a NUMA topology or not since potential NUMA/non-NUMA&amp;rsquo;ness is not
considered at this early stage of scheduling. However, once allocation
candidates have been provided by placement, we see the original purpose of this
option emerge: for instances with a NUMA topology, it is used by
&lt;code&gt;nova-scheduler&lt;/code&gt; (specifically by the &lt;code&gt;NUMATopologyFilter&lt;/code&gt;) and by
&lt;code&gt;nova-compute&lt;/code&gt; (when building instance XML). NUMA instances either map their
entire range of instance cores to a range of host cores (for non-pinned
instances) or each individual instance core to a specific host core (for pinned
instances), and this mapping is calculated by both &lt;code&gt;nova-scheduler&lt;/code&gt;&amp;rsquo;s
&lt;code&gt;NUMATopologyFilter&lt;/code&gt; filter and &lt;code&gt;nova-compute&lt;/code&gt; &lt;code&gt;vcpu_pin_set&lt;/code&gt; is used to limit
which of these host cores can be used and allows you to do things like exclude
every core from a host NUMA node. However, since instances without a NUMA
topology are entirely floating and are not limited to any host NUMA node, this
option is totally ignored.&lt;/p&gt;
&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s look at some examples of how this would be reflected in the real world.
For all these examples, consider a host with two sockets and two CPUs with four
cores and no hyperthreading (so eight CPUs).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://that.guru/media/cpu-resources_host-topology.png&#34; alt=&#34;Non-NUMA instances without vcpu_pin_set&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The host NUMA topology with two sockets and four cores per socket&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We can see the resources that this reports like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ openstack --os-placement-api-version 1.18 resource provider inventory show \
    6a969900-bbf7-4725-959b-2db3092933b0 VCPU
+------------------+-------+
| Field            | Value |
+------------------+-------+
| allocation_ratio | 16.0  |
| max_unit         | 8     |
| reserved         | 0     |
| step_size        | 1     |
| min_unit         | 1     |
| total            | 8     |
+------------------+-------+
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;non-numa&#34;&gt;Non-NUMA&lt;/h3&gt;
&lt;p&gt;First, consider an instance without a NUMA topology:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ openstack flavor create --vcpus 2 --ram 512 --disk 0 test-flavor
$ openstack server create --flavor test-flavor ... test-server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As this instance does not have a NUMA topology, the instance will float across
all host cores with no regard for NUMA affinity.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://that.guru/media/cpu-resources_non-numa.png&#34; alt=&#34;Non-NUMA instances without vcpu_pin_set&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The host NUMA topology is ignored for instances without a NUMA topology.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If we look at what placement is reporting, we can see that our inventory has
changed accordingly:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ openstack --os-placement-api-version 1.18 resource provider usage show \
    6a969900-bbf7-4725-959b-2db3092933b0
+----------------+-------+
| resource_class | usage |
+----------------+-------+
| VCPU           |     2 |
| MEMORY_MB      |   512 |
| DISK_GB        |     0 |
+----------------+-------+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&amp;rsquo;s use &lt;code&gt;vcpu_pin_set&lt;/code&gt; to exclude the cores from host NUMA node &lt;code&gt;0&lt;/code&gt; as
seen in the sample &lt;code&gt;nova.conf&lt;/code&gt; below, then restart the service:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[DEFAULT]
vcpu_pin_set = 4-7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we examine the number of resources available in placement, we can see that
it has changed:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ openstack --os-placement-api-version 1.18 resource provider inventory show \
    6a969900-bbf7-4725-959b-2db3092933b0 VCPU
+------------------+-------+
| Field            | Value |
+------------------+-------+
| allocation_ratio | 16.0  |
| max_unit         | 4     |
| reserved         | 0     |
| step_size        | 1     |
| min_unit         | 1     |
| total            | 4     |
+------------------+-------+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unfortunately though, because the instance does not have a NUMA topology, this
option is completely ignored when actually booting the instance. As above, the
instance continues to run across the entire range of host cores.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://that.guru/media/cpu-resources_non-numa.png&#34; alt=&#34;Non-NUMA instances with vcpu_pin_set&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The &lt;code&gt;vcpu_pin_set&lt;/code&gt; option is also ignored for instances without a NUMA
topology.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;numa-no-pinning&#34;&gt;NUMA, no pinning&lt;/h3&gt;
&lt;p&gt;Next, consider an instance with a NUMA topology. We can create such an instance
like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ openstack flavor create --vcpus 2 --ram 512 --disk 0 test-flavor
$ openstack flavor set --property hw:numa_nodes=1 test-flavor
$ openstack server create --flavor test-flavor ... test-server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because this instance has a NUMA topology, the instance will be confined to
cores from a single host NUMA node.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://that.guru/media/cpu-resources_numa_wo_vcpu_pin_set.png&#34; alt=&#34;NUMA instances without vcpu_pin_set&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The host NUMA topology is considered for instances with a NUMA topology.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now, once again we&amp;rsquo;ll use &lt;code&gt;vcpu_pin_set&lt;/code&gt; to exclude the cores from host NUMA
node &lt;code&gt;0&lt;/code&gt; via &lt;code&gt;nova.conf&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[DEFAULT]
vcpu_pin_set = 4-7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And again we&amp;rsquo;ll see this change in what&amp;rsquo;s reported to placement:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ openstack --os-placement-api-version 1.18 resource provider inventory show \
    6a969900-bbf7-4725-959b-2db3092933b0 VCPU
+------------------+-------+
| Field            | Value |
+------------------+-------+
| allocation_ratio | 16.0  |
| max_unit         | 4     |
| reserved         | 0     |
| step_size        | 1     |
| min_unit         | 1     |
| total            | 4     |
+------------------+-------+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This time &lt;code&gt;vcpu_pin_set&lt;/code&gt; will actually be respected and we&amp;rsquo;ll see it reflected
in the host cores used by the instance.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://that.guru/media/cpu-resources_numa_w_vcpu_pin_set.png&#34; alt=&#34;NUMA instances with vcpu_pin_set&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The &lt;code&gt;vcpu_pin_set&lt;/code&gt; option is respected for instances with a NUMA topology, so
cores &lt;code&gt;0-3&lt;/code&gt; are excluded.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;numa-with-pinning&#34;&gt;NUMA, with pinning&lt;/h3&gt;
&lt;p&gt;Finally, let&amp;rsquo;s consider pinned instances. We can create such an instance like
so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ openstack flavor create --vcpus 2 --ram 512 --disk 0 test-flavor
$ openstack flavor set --property hw:cpu_policy=dedicated test-flavor
$ openstack server create --flavor test-flavor ... test-server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As noted previously, these have an implicit NUMA topology but whereas every
core of an unpinned instance is mapped to the same range of host cores, the
cores of pinned instances are mapped to their own individual host cores.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://that.guru/media/cpu-resources_pinning_wo_vcpu_pin_set.png&#34; alt=&#34;Pinned instances without vcpu_pin_set&#34;&gt;&lt;/p&gt;
&lt;p&gt;Because they have a NUMA topology, pinned instances also respect
&lt;code&gt;vcpu_pin_set&lt;/code&gt;. As always, we can use &lt;code&gt;vcpu_pin_set&lt;/code&gt; to exclude the cores from
host NUMA node &lt;code&gt;0&lt;/code&gt; via &lt;code&gt;nova.conf&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[DEFAULT]
vcpu_pin_set = 4-7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As always, we&amp;rsquo;ll see this reflected in placement:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ openstack --os-placement-api-version 1.18 resource provider inventory show \
    6a969900-bbf7-4725-959b-2db3092933b0 VCPU
+------------------+-------+
| Field            | Value |
+------------------+-------+
| allocation_ratio | 16.0  |
| max_unit         | 4     |
| reserved         | 0     |
| step_size        | 1     |
| min_unit         | 1     |
| total            | 4     |
+------------------+-------+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And because pinned instances also have a NUMA topology, we&amp;rsquo;ll also see this
reflected in the host cores used by the instance.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://that.guru/media/cpu-resources_pinning_w_vcpu_pin_set.png&#34; alt=&#34;Pinned instances with vcpu_pin_set&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The &lt;code&gt;vcpu_pin_set&lt;/code&gt; option is also respected for instances with CPU pinning.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;However, it&amp;rsquo;s worth noting here that pinned instances cannot be overcommited.
Despite the fact that we have an &lt;code&gt;allocation_ratio&lt;/code&gt; of 16.0, we can only
schedule &lt;code&gt;total&lt;/code&gt; instances cores. These cores also can&amp;rsquo;t be spread across host
NUMA nodes unless you&amp;rsquo;ve specifically said otherwise (via the
&lt;code&gt;hw:numa_nodes=N&lt;/code&gt; flavor extra spec).&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;vcpu_pin_set&lt;/code&gt; option is used to generate the amount of &lt;code&gt;VCPU&lt;/code&gt; resources
available in placement but it otherwise has no effect on instances without a
NUMA topology. For instances with a NUMA topology, it also controls the host
cores that the instance can schedule to.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
