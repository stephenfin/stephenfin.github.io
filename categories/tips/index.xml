<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tips on Stephen Finucane (Fin-oo-can)</title>
    <link>https://that.guru/categories/tips/</link>
    <description>Recent content in Tips on Stephen Finucane (Fin-oo-can)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-IE</language>
    <lastBuildDate>Thu, 27 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://that.guru/categories/tips/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Installing OSC With pipx</title>
      <link>https://that.guru/blog/installing-openstackclient-with-pipx/</link>
      <pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://that.guru/blog/installing-openstackclient-with-pipx/</guid>
      <description>&lt;p&gt;Another one that really belongs in a separate &lt;em&gt;&amp;ldquo;tips &amp;amp; tricks&amp;rdquo;&lt;/em&gt; section of the blog, which unfortunately does not yet exist. I use &lt;a href=&#34;https://docs.openstack.org/python-openstackclient/latest/&#34;&gt;openstackclient (OSC)&lt;/a&gt;
pretty extensively day-to-day. Fedora provides a relatively up-to-date version of the package, but OSC has been evolving very rapidly of late and Fedora&amp;rsquo;s
packagers just can&amp;rsquo;t be that fast üòÅ. The solution, therefore, is to install from &lt;code&gt;pip&lt;/code&gt;. Installing things globally, even if that&amp;rsquo;s global to the user, is a bad
idea though: there are too many opportunities for dependency updates to break other packages. I want to use a virtualenv. The obvious solution is to use
&lt;a href=&#34;https://pypa.github.io/pipx/&#34;&gt;&lt;code&gt;pipx&lt;/code&gt;&lt;/a&gt;, which is specifically designed for this use case. From the &lt;a href=&#34;https://pypa.github.io/pipx/&#34;&gt;homepage&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;pipx is a tool to help you install and run end-user applications written in Python. It&amp;rsquo;s roughly similar to macOS&amp;rsquo;s &lt;code&gt;brew&lt;/code&gt;, JavaScript&amp;rsquo;s &lt;code&gt;npx&lt;/code&gt;, and Linux&amp;rsquo;s
&lt;code&gt;apt&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s closely related to pip. In fact, it uses pip, but is focused on installing and managing Python packages that can be run from the command line directly as
applications.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;pipx&lt;/code&gt; itself is available in the Fedora repos so if Fedora is you distro of choice then you can install it with &lt;code&gt;dnf&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;‚ùØ sudo dnf install pipx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once that&amp;rsquo;s in place, you can install OSC with &lt;code&gt;pipx&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;‚ùØ pipx install python-openstackclient
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Unlike &lt;code&gt;openstacksdk&lt;/code&gt;, however, the &lt;code&gt;python-openstackclient&lt;/code&gt; package doesn&amp;rsquo;t provide support for OpenStack services beyond the core ones: Identity (keystone),
Compute (nova), Image (glance), Block Storage (cinder), Network (neutron) and Object Storage (swift). For services like the Share Filesystem-as-a-Service
(manila), Load Balancer-as-a-Service (octavia) or Placement service, you need to install additional packages (&lt;code&gt;python-manilaclient&lt;/code&gt;, &lt;code&gt;python-octaviaclient&lt;/code&gt;, and
&lt;code&gt;osc-placement&lt;/code&gt;, respectively).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;‚ùØ openstack loadbalancer list
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;openstack: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;loadbalancer list&amp;#39;&lt;/span&gt; is not an openstack command. See &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;openstack --help&amp;#39;&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Did you mean one of these?
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  container create
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  container delete
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  container list
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  container save
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  container set
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  container show
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  container unset
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It took me a beat to figure out but &lt;code&gt;pipx&lt;/code&gt; provides an easy mechanism to do this: the &lt;code&gt;inject&lt;/code&gt; command. For example, to install &lt;code&gt;python-octaviaclient&lt;/code&gt; in the
same virtualenv, run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;‚ùØ pipx inject python-openstackclient python-octaviaclient
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can repeat this for additional dependencies:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;‚ùØ pipx inject python-openstackclient osc-placement python-neutronclient python-manilaclient python-ironicclient python-barbicanclient python-designateclient
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;‚ùØ pipx list --include-injected
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;venvs are in /home/stephenfin/.local/pipx/venvs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apps are exposed on your $PATH at /home/stephenfin/.local/bin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   package python-openstackclient 6.2.0, installed using Python 3.11.2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - openstack
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Injected Packages:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - osc-placement 4.1.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - python-barbicanclient 5.5.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - python-designateclient 5.2.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - python-ironicclient 5.1.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - python-manilaclient 4.3.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - python-neutronclient 9.0.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - python-octaviaclient 3.4.0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With that done, you should have access to &lt;em&gt;all&lt;/em&gt; the commands. üí™&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Add Another Network to ZNC</title>
      <link>https://that.guru/blog/add-another-network-to-znc/</link>
      <pubDate>Tue, 08 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://that.guru/blog/add-another-network-to-znc/</guid>
      <description>&lt;p&gt;ZNC allows you to connect to multiple networks (in fact, it&amp;rsquo;s one of the
benefits it touts on &lt;a href=&#34;https://wiki.znc.in/ZNC#Main_Features&#34;&gt;the wiki&lt;/a&gt;). It distinguishes between networks and
servers (a network can have multiple servers), so this can be slightly
confusing the first time you have to do it. The below is a quick summary of the
steps that are necessary to add a new network to your ZNC instance, in this
instance, &lt;a href=&#34;https://libera.chat/&#34;&gt;Libera&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say you&amp;rsquo;re already connected to a network, and let&amp;rsquo;s say that network is
&lt;a href=&#34;https://www.oftc.net/&#34;&gt;OFTC&lt;/a&gt;. You can verify this using following commands:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/znc ListNetworks
/znc ListServers
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;ListNetworks&lt;/code&gt; command will list this networks available to you.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/znc ListNetworks
+--------------+--------+----------------------+-----------------------------------+----------+
| Network      | On IRC | IRC Server           | IRC User                          | Channels |
+--------------+--------+----------------------+-----------------------------------+----------+
| oftc         | Yes    | weber.oftc.net       | stephenfin!~stephenfi@example.com | 9        |
+--------------+--------+----------------------+-----------------------------------+----------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;ListServers&lt;/code&gt; command will list the servers configured for this network.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/znc ListServers
+---------------+------+-----+----------+
| Host          | Port | SSL | Password |
+---------------+------+-----+----------+
| irc.oftc.net* | 6697 | SSL |          |
+---------------+------+-----+----------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now if you want to connect to another network, you can do so by adding a new
network followed by adding a new server on this network. As noted previously,
we&amp;rsquo;re going to configure a connection to Libera. First, we&amp;rsquo;d create the new
network.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/znc AddNetwork libera
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, we&amp;rsquo;d switch to this network:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/znc JumpNetwork libera
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we can add the server:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/znc AddServer irc.libera.chat +6697
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And finally, we can connect to the channels as usual:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/join #libera
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To switch between networks, you&amp;rsquo;ll need to use the &lt;code&gt;JumpNetwork&lt;/code&gt; command we
used above. Alternatively, you can connect to ZNC multiple times by adding the
&lt;code&gt;/{network}&lt;/code&gt; suffix to your username. For example, if you were previously
connecting using the username &lt;code&gt;foo&lt;/code&gt;, you&amp;rsquo;d add another network that would
connect using e.g. &lt;code&gt;foo/libera&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;More information the ZNC command can be found &lt;a href=&#34;https://wiki.znc.in/Using_commands&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Plain Text Email in Evolution 3.38</title>
      <link>https://that.guru/blog/plain-text-in-evolution-3-38/</link>
      <pubDate>Mon, 23 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://that.guru/blog/plain-text-in-evolution-3-38/</guid>
      <description>&lt;p&gt;I recently upgraded to Fedora 33, which comes with Evolution 3.38 (previously
3.36, iirc). Following the upgrade, I noticed that quoting in plain text emails
appeared to have regressed. Previously, Evolution would wrap quotes at your
recommended width, but by selecting the email and changing the style from
&amp;ldquo;Normal&amp;rdquo; to &amp;ldquo;Preformatted&amp;rdquo;, you could avoid this text wrapping. With Evolution
3.38, this no longer works, necessitating manual line wrapping which is rather
hit and miss: I managed to send mails where the message I was replying to ended
up unquoted.&lt;/p&gt;
&lt;p&gt;I haven&amp;rsquo;t figured out the quoting issue, though &lt;a href=&#34;https://gitlab.gnome.org/GNOME/evolution/-/issues/1235&#34;&gt;issue 1235&lt;/a&gt; looks
promising, but the wrapping issue is thankfully solvable. Turns out there&amp;rsquo;s a
new (to me) &amp;ldquo;Wrap quoted text in replies&amp;rdquo; option available in the &amp;ldquo;Composer
Preferences&amp;rdquo; pane of the &amp;ldquo;Evolution Preferences&amp;rdquo; pane, which accessible via
&amp;ldquo;Edit &amp;gt; Preferences&amp;rdquo;.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://that.guru/media/plain-text-in-evolution-3-38-1.png&#34;
    alt=&#34;The Composer Preferences Pane&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;Composer Preferences&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Compare before and after:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://that.guru/media/plain-text-in-evolution-3-38-2.png&#34;
    alt=&#34;Before (with &amp;#39;Wrap quoted text in replies&amp;#39; checked)&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;Before (with &amp;#39;Wrap quoted text in replies&amp;#39; checked)&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;&lt;img src=&#34;https://that.guru/media/plain-text-in-evolution-3-38-3.png&#34;
    alt=&#34;After (with &amp;#39;Wrap quoted text in replies&amp;#39; unchecked)&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;After (with &amp;#39;Wrap quoted text in replies&amp;#39; unchecked)&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Usable email again!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Automatically Set The Name of tmux Windows</title>
      <link>https://that.guru/blog/automatically-set-tmux-window-name/</link>
      <pubDate>Tue, 15 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://that.guru/blog/automatically-set-tmux-window-name/</guid>
      <description>&lt;p&gt;I recently updated to Fedora 28 which includes a updated version of &lt;em&gt;tmux&lt;/em&gt; -
&lt;em&gt;tmux 2.7&lt;/em&gt;. I quickly noted that my window title was no longer being set as
before and eventually identified the issue: a breaking change in 2.7. Below is
my guide on ensuring &lt;em&gt;tmux&lt;/em&gt; displays a useful title for each window.&lt;/p&gt;
&lt;p&gt;What I&amp;rsquo;m looking to achieve is a prompt like the following:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://that.guru/media/automatically-set-tmux-window-name.png&#34;
    alt=&#34;tmux prompt&#34;&gt;
&lt;/figure&gt;

&lt;p&gt;More specifically, I want &lt;code&gt;$(hostname): $(basename $PWD)&lt;/code&gt;. &lt;em&gt;tmux&lt;/em&gt; provides
two ways to do this.&lt;/p&gt;
&lt;h2 id=&#34;the-automatic-rename-options&#34;&gt;The &lt;code&gt;automatic-rename&lt;/code&gt; options&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;http://man7.org/linux/man-pages/man1/tmux.1.html&#34;&gt;&lt;code&gt;tmux(1)&lt;/code&gt;&lt;/a&gt; man page describes the following options:&lt;/p&gt;
&lt;blockquote&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;automatic-rename&lt;/strong&gt; &lt;em&gt;[on | off]&lt;/em&gt;&lt;/dt&gt;
&lt;dd&gt;Control automatic window renaming.  When this setting is enabled, tmux will
rename the window automatically using the format specified by
&lt;code&gt;automatic-rename-format&lt;/code&gt;. This flag is automatically disabled for an
individual window when a name is specified at creation with &lt;code&gt;new-window&lt;/code&gt; or
&lt;code&gt;new-session&lt;/code&gt;, or later with &lt;code&gt;rename-window&lt;/code&gt;, or with a terminal escape
sequence.  It may be switched off globally with:
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;set-window-option -g automatic-rename off
&lt;/code&gt;&lt;/pre&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;automatic-rename-format&lt;/strong&gt; &lt;em&gt;format&lt;/em&gt;&lt;/dt&gt;
&lt;dd&gt;The format (see &lt;code&gt;FORMATS&lt;/code&gt;) used when the &lt;code&gt;automatic-rename&lt;/code&gt; option is
enabled.&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;status-interval&lt;/strong&gt; &lt;em&gt;interval&lt;/em&gt;&lt;/dt&gt;
&lt;dd&gt;Update the status line every interval seconds.  By default, updates will
occur every 15 seconds.  A setting of zero disables redrawing at interval.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/blockquote&gt;
&lt;p&gt;We can use a combination of these to configure the status line by adding the
following to our &lt;code&gt;.tmux.conf&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set-option -g status-interval 1
set-option -g automatic-rename on
set-option -g automatic-rename-format &#39;#{b:pane_current_path}&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More detail can be found in a related &lt;a href=&#34;https://stackoverflow.com/questions/28376611&#34;&gt;StackOverflow question&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately this is not ideal as there will still be some lag between the
window name being set and it being reflected in the UI. This brings us to the
alternative.&lt;/p&gt;
&lt;h2 id=&#34;terminal-escape-sequences&#34;&gt;Terminal escape sequences&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;tmux&lt;/em&gt; can also take advantage of terminal escape sequences. By emitting these
from our shell, we can ensure the changes to the window name happen
automatically. To this end, &lt;a href=&#34;http://man7.org/linux/man-pages/man1/bash.1.html&#34;&gt;&lt;code&gt;bash(1)&lt;/code&gt;&lt;/a&gt; provides the &lt;code&gt;PROMPT_COMMAND&lt;/code&gt; shell
variable:&lt;/p&gt;
&lt;blockquote&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;PROMPT_COMMAND&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;If set, the value is executed as a command prior to issuing each primary
prompt.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/blockquote&gt;
&lt;p&gt;We can configure this in our &lt;code&gt;.bashrc&lt;/code&gt; file like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;case &amp;quot;$TERM&amp;quot; in
linux|xterm*|rxvt*)
  export PROMPT_COMMAND=&#39;echo -ne &amp;quot;\033]0;${HOSTNAME%%.*}: ${PWD##*/}\007&amp;quot;&#39;
  ;;
screen*)
  export PROMPT_COMMAND=&#39;echo -ne &amp;quot;\033k${HOSTNAME%%.*}: ${PWD##*/}\033\\&amp;quot; &#39;
  ;;
*)
  ;;
esac
&lt;/code&gt;&lt;/pre&gt;
&lt;aside class=&#34;admonition note&#34;&gt;
	
	
	&lt;div class=&#34;admonition-content&#34;&gt;This is actually a little more complicated that necessary but it with ensure
we get the format requested both when we&amp;rsquo;re using &lt;em&gt;tmux&lt;/em&gt; (the latter case)
and when we are not (the former).&lt;/div&gt;
&lt;/aside&gt;

&lt;p&gt;You also need to configure the following in your &lt;code&gt;.tmux.conf&lt;/code&gt; in order to
work around the breaking change mentioned above:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set -g allow-rename on
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once done, restart &lt;em&gt;tmux&lt;/em&gt; as you&amp;rsquo;ll see your changes propagated.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Evolution Calendar Issues</title>
      <link>https://that.guru/blog/evolution-calendar-issues/</link>
      <pubDate>Fri, 08 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://that.guru/blog/evolution-calendar-issues/</guid>
      <description>&lt;p&gt;I started Evolution this morning and noticed half of my calendar events were
missing. Attempts to refresh said calendar resulted in the following errors
message:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The calendar backend servicing &amp;ldquo;XXX&amp;rdquo; encountered an error.&lt;/p&gt;
&lt;p&gt;The reported error was ‚ÄúSQLite error code &amp;lsquo;11&amp;rsquo;: database disk image is
malformed (statement:SELECT * FROM ECacheObjects WHERE ECacheState!=0)‚Äù.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Just the start I wanted to my Friday morning. Unfortunately the Evolution
documentation didn&amp;rsquo;t provided any guidelines on fixing a corrupted database and
the best advice I found, aside from deleting and recreating the account in
Evolution, was to run an integrity check on the offending database &lt;a href=&#34;https://ubuntuforums.org/showthread.php?t=2215232#post12978225&#34;&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I knew from this guide that my main Evolution configuration was stored in
&lt;code&gt;.local/share/evolution&lt;/code&gt;, but a look through the &lt;code&gt;calendar&lt;/code&gt; subdirectory yielded
nothing. Googling &lt;code&gt;ECacheObjects&lt;/code&gt; curiously didn&amp;rsquo;t bring anything up, but a
search on GitHub did identify the offending service, &lt;code&gt;evolution-data-server&lt;/code&gt;
&lt;a href=&#34;https://github.com/GNOME/evolution-data-server/blob/3abbcce2ea/src/libebackend/e-cache.h&#34;&gt;[2]&lt;/a&gt;. Unfortunately while I was able to find something that look like
directory containing &amp;ldquo;private data&amp;rdquo; &lt;a href=&#34;https://github.com/GNOME/evolution-data-server/blob/3abbcce2ea/CMakeLists.txt#L178&#34;&gt;[3]&lt;/a&gt;, I didn&amp;rsquo;t know what build
configuration had been used and couldn&amp;rsquo;t find the folder locally.&lt;/p&gt;
&lt;p&gt;Now Linux provides a very helpful feature where it show all files currently
marked as open by a given process. To use this, I first needed to find the
process responsible for maintaining the calendar.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ps aux | grep evolution
sfinucan  2552  0.0  0.3 1717928 59912 ?       SLsl Dec07   0:02 /usr/libexec/evolution-source-registry
sfinucan  2616  0.0  0.2 1242008 50640 ?       Ssl  Dec07   0:00 /usr/libexec/evolution-calendar-factory
sfinucan  2696  0.0  0.9 2803208 182632 ?      SLl  Dec07   0:19 /usr/libexec/evolution-calendar-factory-subprocess --factory caldav [...]
sfinucan  2738  0.0  0.2 1255468 48452 ?       Sl   Dec07   0:00 /usr/libexec/evolution-calendar-factory-subprocess --factory contacts [...]
sfinucan  2754  0.0  0.2 1152708 44496 ?       Ssl  Dec07   0:00 /usr/libexec/evolution-addressbook-factory
sfinucan  2766  0.0  0.2 1329236 47984 ?       Sl   Dec07   0:00 /usr/libexec/evolution-calendar-factory-subprocess --factory local [...]
sfinucan  2787  0.0  0.2 1440644 46152 ?       Sl   Dec07   0:00 /usr/libexec/evolution-addressbook-factory-subprocess --factory local [...]
sfinucan  2925  0.0  0.2 1536780 54080 tty2    Sl+  Dec07   0:00 /usr/libexec/evolution/evolution-alarm-notify
sfinucan  9496  0.0  0.2 1443748 59028 ?       SLl  10:27   0:00 /usr/libexec/evolution-addressbook-factory-subprocess --factory google [...]
sfinucan  9503  2.0  1.6 4220880 332836 tty2   SLl+ 10:27   0:32 evolution
sfinucan 10611  0.0  0.0 119728   972 pts/1    S+   10:55   0:00 grep --color=auto evolution
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This looked promising and I took the &lt;code&gt;evolution-calendar-factory-subprocess&lt;/code&gt;
process with the &lt;code&gt;caldav&lt;/code&gt; &lt;em&gt;factory&lt;/em&gt; to be the most likely candidate. Let&amp;rsquo;s
see what this has open.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ls -l /proc/2696/fd | grep *.db
lrwx------. 1 sfinucan sfinucan 64 Dec  7 21:39 12 -&amp;gt; /home/sfinucan/.cache/evolution/calendar/fd3d04f3a29f36ce66c87bca8ef0b4d1d0dc3577/cache.db
lrwx------. 1 sfinucan sfinucan 64 Dec  8 10:27 13 -&amp;gt; /home/sfinucan/.cache/evolution/calendar/853c325e65384d811be1d53e0c6d21706d810a5e/cache.db
lrwx------. 1 sfinucan sfinucan 64 Dec  8 10:27 14 -&amp;gt; /home/sfinucan/.cache/evolution/calendar/9ff6cfa62a76324ab004c9c4a09ecec0a96c0956/cache.db
lrwx------. 1 sfinucan sfinucan 64 Dec  8 10:27 15 -&amp;gt; /home/sfinucan/.cache/evolution/calendar/41464062e9943c630c2bb3171b67d4e1a2cf8a93/cache.db
lrwx------. 1 sfinucan sfinucan 64 Dec  8 10:27 16 -&amp;gt; /home/sfinucan/.cache/evolution/calendar/6e9502d1c38772667d06ed809e1012bb0178a62d/cache.db
lrwx------. 1 sfinucan sfinucan 64 Dec  8 10:27 17 -&amp;gt; /home/sfinucan/.cache/evolution/calendar/f22562ff5b1e02106f69e957a7a18513bec94cab/cache.db
lrwx------. 1 sfinucan sfinucan 64 Dec  8 10:27 18 -&amp;gt; /home/sfinucan/.cache/evolution/calendar/6d11aa1cdaf7e1a1c7ff83b464f319b8bf0b8b08/cache.db
lrwx------. 1 sfinucan sfinucan 64 Dec  8 10:27 22 -&amp;gt; /home/sfinucan/.cache/evolution/calendar/f90f25baabe8d65bb2d1d8197dac7a450bcb46e7/cache.db
lrwx------. 1 sfinucan sfinucan 64 Dec  8 10:27 23 -&amp;gt; /home/sfinucan/.cache/evolution/calendar/fd8b197130da0ca054ab698175e0b3dd16e1b52d/cache.db
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That looks promising. Time to kill the various &lt;code&gt;evolution&lt;/code&gt; processes and go
fix those databases.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo pkill evolution
$ sudo pkill -9 evolution-*
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ $ for i in $(find . -path &amp;#34;./trash&amp;#34; -prune -o -name &amp;#34;cache.db&amp;#34; -print); do
‚Üí echo &amp;#34;$i&amp;#34;;
‚Üí sqlite3 &amp;#34;$i&amp;#34; &amp;#34;pragma integrity_check;&amp;#34;;
‚Üí done
./41464062e9943c630c2bb3171b67d4e1a2cf8a93/cache.db
ok
./9ff6cfa62a76324ab004c9c4a09ecec0a96c0956/cache.db
ok
./f22562ff5b1e02106f69e957a7a18513bec94cab/cache.db
ok
./f90f25baabe8d65bb2d1d8197dac7a450bcb46e7/cache.db
ok
./fd8b197130da0ca054ab698175e0b3dd16e1b52d/cache.db
ok
./6d11aa1cdaf7e1a1c7ff83b464f319b8bf0b8b08/cache.db
ok
./fd3d04f3a29f36ce66c87bca8ef0b4d1d0dc3577/cache.db
*** in database main ***
On tree page 2935 cell 492: Rowid 3396 out of order
On tree page 2935 cell 491: Rowid 3394 out of order
On tree page 2935 cell 490: Rowid 3392 out of order
On tree page 2935 cell 489: Rowid 3390 out of order
Page 1635: btreeInitPage() returns error code 11
On tree page 2935 cell 487: Rowid 3386 out of order
Page 1634: btreeInitPage() returns error code 11
Page 1762: btreeInitPage() returns error code 11
On tree page 2935 cell 419: Rowid 3289 out of order
Page 1243 is never used
Page 1255 is never used
Page 1263 is never used
row 1934 missing from index IDX_SUMMARY
row 1934 missing from index IDX_COMPLETED
row 1934 missing from index IDX_DUE
row 1934 missing from index IDX_OCCUREND
row 1934 missing from index IDX_OCCURSTART
row 1934 missing from index sqlite_autoindex_ECacheObjects_1
row 1938 missing from index IDX_SUMMARY
row 1938 missing from index IDX_COMPLETED
row 1938 missing from index IDX_DUE
row 1938 missing from index sqlite_autoindex_ECacheObjects_1
row 1939 missing from index IDX_SUMMARY
row 1939 missing from index IDX_COMPLETED
row 1939 missing from index IDX_DUE
row 1941 missing from index IDX_SUMMARY
row 1941 missing from index IDX_COMPLETED
row 1941 missing from index IDX_DUE
row 1941 missing from index sqlite_autoindex_ECacheObjects_1
Error: database disk image is malformed
./853c325e65384d811be1d53e0c6d21706d810a5e/cache.db
ok
./6e9502d1c38772667d06ed809e1012bb0178a62d/cache.db
ok
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We have our offending database. Now, we could simply remove this and be done
but, to be honest, I don&amp;rsquo;t really trust the rest of them now. Seeing as
everything is already stored in the cloud, I can simply delete these caches.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ rm -f .
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Problem solved.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Open Python Paths with vim</title>
      <link>https://that.guru/blog/open-python-paths-with-vim/</link>
      <pubDate>Mon, 06 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://that.guru/blog/open-python-paths-with-vim/</guid>
      <description>&lt;p&gt;In OpenStack nova land, you run tests by specifying their Python paths, like
so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ tox -e py27 nova.tests.unit.virt.libvirt.test_vif.LibvirtVifTestCase
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is also how tests are run and reported by the CI. If a tests fails when
run locally or in the CI, the failure will be reported with similar Python
module path-style references. These take a little cleanup to get a usable file
path that we can use to open the file, so I automated it.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/stephenfin/ea6bb2d650060d2a998a2dcd41f58291.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Download and copy this to somewhere on your path, then run it like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd $openstack_nova_dir
$ pyvi nova.tests.unit.virt.libvirt.test_vif.LibvirtVifTestCase
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Creating a Windows 7 USB on Fedora 25</title>
      <link>https://that.guru/blog/creating-a-windows-7-usb-on-fedora-25/</link>
      <pubDate>Tue, 31 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://that.guru/blog/creating-a-windows-7-usb-on-fedora-25/</guid>
      <description>&lt;p&gt;Turns out Fedora 25 didn&amp;rsquo;t like my Samsung Series 9 (NP900X4C) much. Among
other things, the WiFi was intermittent (weird, as it&amp;rsquo;s an Intel NIC), suspend
didn&amp;rsquo;t work (the laptop is always dead when I come to it), and the keyboard
backlight turned off immediately after turning it on. I figured installing
Windows again might be a good move (I also miss Office), but that turned out a
little more difficult that anticipated. Below is the steps I ended up taking,
should anyone else encounter the same issue.&lt;/p&gt;
&lt;h1 id=&#34;get-an-iso&#34;&gt;Get an ISO&lt;/h1&gt;
&lt;p&gt;First up: finding a valid Windows 7 Home Premium x64 ISO. Given that I still
had my OEM key, this should not have been as difficult as it was. I finally
found a workaround, thanks to &lt;a href=&#34;https://www.raymond.cc/blog/links-for-windows-7-sp1-iso-from-microsofts-official-distributer/&#34;&gt;this excellent guide on Raymond.cc&lt;/a&gt; (follow
the &amp;ldquo;Download Windows 7/8.1 From The Windows 10 Download Page&amp;rdquo; section). With
that &amp;ldquo;hack&amp;rdquo;, you should be able to pull in an ISO for the required version
(&lt;code&gt;Win7_HomePrem_SP1_English_x64.iso&lt;/code&gt; in my case).&lt;/p&gt;
&lt;h1 id=&#34;connect-usb-drive&#34;&gt;Connect USB Drive&lt;/h1&gt;
&lt;p&gt;We&amp;rsquo;re going to install to a USB drive, so ensure it&amp;rsquo;s plugged in now. Record
the device name - &lt;code&gt;/dev/sdb&lt;/code&gt; in my case - for use later.&lt;/p&gt;
&lt;h1 id=&#34;prepare-your-usb&#34;&gt;Prepare Your USB&lt;/h1&gt;
&lt;p&gt;This was another exercise in frustration. I followed many, many guides, all of
which invariably ended in a failure. I suspect this is because the guides all
recommended formatting my drive with NTFS when UEFI, as found on this laptop,
requires FAT32. Thankfully, I stumbled upon &lt;a href=&#34;https://onetransistor.blogspot.ie/2014/09/make-bootable-windows-usb-from-ubuntu.html&#34;&gt;a guide&lt;/a&gt; that suggested as
much. This guide used GParted but unfortunately there&amp;rsquo;s a known &lt;a href=&#34;https://bugzilla.redhat.com/show_bug.cgi?id=1397103&#34;&gt;issue with
&lt;code&gt;gparted&lt;/code&gt; on Wayland&lt;/a&gt;. A workaround for this issue is to allow &amp;ldquo;non-network
local connections&amp;rdquo; by running the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ xhost +local:
non-network local connections being added to access control list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we can start GParted:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo gparted
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Execute the following operations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Unmount the drive&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delete any existing partitions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a &lt;em&gt;New&lt;/em&gt; primary partition&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Format this partition as FAT32&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set a label, e.g. &lt;code&gt;WIN7_HP_X64&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set the &lt;code&gt;boot&lt;/code&gt; flag to make the drive bootable&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once completed, &lt;em&gt;Apply all operations&lt;/em&gt;, exit GParted, and disallow non-network
local connections:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ xhost -local:
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;copy-files&#34;&gt;Copy Files&lt;/h1&gt;
&lt;p&gt;You can now proceed to mount both the USB drive and the ISO:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo mkdir /mnt/usb
$ sudo mkdir /mnt/iso
$ sudo mount /dev/sdb1 /mnt/usb/
$ sudo mount -o loop ~/Downloads/Win7_HomePrem_SP1_English_x64.iso /mnt/iso/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;updating paths where necessary.&lt;/p&gt;
&lt;p&gt;Copy the contents of the ISO to the USB drive:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo cp -av /mnt/iso/* /mnt/usb/
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;install-bootloader&#34;&gt;Install Bootloader&lt;/h1&gt;
&lt;p&gt;We&amp;rsquo;re going to use grub2 as the bootloader. Run the following to install the
bootloader on the USB drive:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo grub2-install --boot-directory=/mnt/usb/boot /dev/sdb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;once again, updating paths where necessary.&lt;/p&gt;
&lt;p&gt;Once completed, you should see the following message:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Installing for i386-pc platform.
Installation finished. No error reported.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If so, save the following to &lt;code&gt;boot/grub2/grub.cfg&lt;/code&gt; on the USB drive:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;default=1
timeout=15
color_normal=light-cyan/dark-gray
menu_color_normal=black/light-cyan
menu_color_highlight=white/black

menuentry &amp;quot;Start Windows Installation&amp;quot; {
    insmod ntfs
    insmod search_label
    search --no-floppy --set=root --label &amp;lt;USB_drive_label&amp;gt; --hint hd0,msdos1
    ntldr /bootmgr
    boot
}

menuentry &amp;quot;Boot from the first hard drive&amp;quot; {
    insmod ntfs
    insmod chain
    insmod part_msdos
    insmod part_gpt
    set root=(hd1)
    chainloader +1
    boot
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;replacing &lt;code&gt;&amp;lt;USB_drive_label&amp;gt;&lt;/code&gt; with the label you used earlier - &lt;code&gt;WIN7_HP_X64&lt;/code&gt;
for me.&lt;/p&gt;
&lt;h1 id=&#34;profit&#34;&gt;Profit&lt;/h1&gt;
&lt;p&gt;Unmount the drive, insert it into the laptop and install Windows 7.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sync  # to ensure all file transfers are complete.
$ sudo umount
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Install Netbeans on Fedora 25</title>
      <link>https://that.guru/blog/install-netbeans-on-fedora-25/</link>
      <pubDate>Sat, 10 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://that.guru/blog/install-netbeans-on-fedora-25/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s been a while since I last wrote a non-trivial amount of Java and I can&amp;rsquo;t
say I miss it. However, I want to work on a plugin for Jenkins which means
diving back in. Netbeans was my IDE of choice when I last worked with Java but
unfortunately Netbeans is not packaged for Fedora (presumably due to it&amp;rsquo;s use
of Oracle&amp;rsquo;s JDK rather than OpenJDK?). As such, if you want to avoid using
Eclipse then you need to install Netbeans &amp;ldquo;by hand&amp;rdquo;. There are a couple of
tricks to doing this correctly.&lt;/p&gt;
&lt;h1 id=&#34;install-dependencies&#34;&gt;Install dependencies&lt;/h1&gt;
&lt;p&gt;We&amp;rsquo;re going to use OpenJDK rather than Oracle JDK as the former is packaged in
Fedora.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo dnf install java-1.8.0-openjdk.x86_64
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;download-installer&#34;&gt;Download installer&lt;/h1&gt;
&lt;p&gt;Download the latest installer from the &lt;a href=&#34;https://netbeans.org/downloads/&#34;&gt;Netbeans website&lt;/a&gt;. At the time of
writing, this was &lt;em&gt;Netbeans 8.2&lt;/em&gt;.&lt;/p&gt;
&lt;h1 id=&#34;enable-root-access-to-x&#34;&gt;Enable root access to X&lt;/h1&gt;
&lt;p&gt;I wanted Netbeans installed in a standard location (&lt;code&gt;/usr/local&lt;/code&gt;) rather than
in my home directory. Unfortunately this requires root privileges and and
running the installer under &lt;code&gt;sudo&lt;/code&gt; produces errors. The &lt;a href=&#34;https://wiki.archlinux.org/index.php/Running_X_apps_as_root&#34;&gt;Arch
wiki&lt;/a&gt; provides a
number of suggestions for how to do this, but the one that worked for me was to
temporarily allow root access to X like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ xhost +
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;run-the-installer&#34;&gt;Run the installer&lt;/h1&gt;
&lt;p&gt;The only change you will need to make is to change the JDK path from &lt;code&gt;/usr&lt;/code&gt; to
wherever OpenJDK is installed
(&lt;code&gt;/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.111-3.b16.fc25.x86_64&lt;/code&gt; for me). If you
don&amp;rsquo;t do this, you will get a warning stating &amp;ldquo;The JDK is missing&amp;rdquo;. If this
happens, follow the instructions provided &lt;a href=&#34;https://mydayswithlinux.wordpress.com/2016/03/02/how-to-install-netbeans-8-1-in-kororafedora/&#34;&gt;here&lt;/a&gt; to resolve the issue
post-installation.&lt;/p&gt;
&lt;h1 id=&#34;disable-root-access-to-x&#34;&gt;Disable root access to X&lt;/h1&gt;
&lt;p&gt;Once installation is complete, we can disable root access to prevent anyone
else accessing our X session.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ xhost -
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;profit&#34;&gt;Profit&lt;/h1&gt;
&lt;p&gt;NetBeans should now be installed.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MTUs in Neutron</title>
      <link>https://that.guru/blog/mtus-in-neutron/</link>
      <pubDate>Tue, 06 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://that.guru/blog/mtus-in-neutron/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m not overly familiar with neutron but it appears that in the past correctly
setting MTU values was easier said than done. This has been massively improved
in recent releases, but getting us to this point required a lot of work and, in
particular, a lot of changes to the MTU-related configuration options available
over the course of Liberty and Newton. The below table tries to collect these
changes in a coherent table.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Configuration Option&lt;/th&gt;
          &lt;th&gt;Version&lt;/th&gt;
          &lt;th&gt;Commit&lt;/th&gt;
          &lt;th&gt;Comments&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;segment_mtu&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Liberty&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;path_mtu&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Liberty&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;segment_mtu&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Mitaka&lt;/td&gt;
          &lt;td&gt;b2d0985d&lt;/td&gt;
          &lt;td&gt;Default set to 1500&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;global_physnet_mtu&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Mitaka&lt;/td&gt;
          &lt;td&gt;ae45cd57&lt;/td&gt;
          &lt;td&gt;New name for &lt;code&gt;segment_mtu&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;path_mtu&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Mitaka&lt;/td&gt;
          &lt;td&gt;7a4633a9&lt;/td&gt;
          &lt;td&gt;Default set to 1500&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;global_physnet_mtu&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Newton&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;path_mtu&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Newton&lt;/td&gt;
          &lt;td&gt;38531ca5&lt;/td&gt;
          &lt;td&gt;Default set to 0&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;These options are described in the docs for both &lt;a href=&#34;http://docs.openstack.org/mitaka/networking-guide/config-mtu.html&#34;&gt;Mitaka&lt;/a&gt; and
&lt;a href=&#34;http://docs.openstack.org/newton/networking-guide/config-mtu.html&#34;&gt;Newton&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In addition, it&amp;rsquo;s also worth noting that the default for &lt;code&gt;global_physnet_mtu&lt;/code&gt;
in TripleO was changed from 1400 to 1500 as part of &lt;a href=&#34;https://bugs.launchpad.net/tripleo/+bug/1590101&#34;&gt;bug 1590101&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using git-review</title>
      <link>https://that.guru/blog/how-to-use-git-review/</link>
      <pubDate>Tue, 06 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://that.guru/blog/how-to-use-git-review/</guid>
      <description>&lt;p&gt;&lt;code&gt;git-review&lt;/code&gt; is a Python wrapper for many of the common Git commands used in
conjunction with Gerrit. It encapsulates many of the most common commands used,
in order to speed things up.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s possible to use Gerrit without using the &lt;code&gt;git-review&lt;/code&gt; tool. All the
commands we use below have their plain &lt;code&gt;git&lt;/code&gt; equivalents. However, the question
remains: why would you want to? The &lt;code&gt;git-review&lt;/code&gt; tool speeds things up, and is
used by a number of teams outside Intel (including MediaWiki and OpenStack).&lt;/p&gt;
&lt;p&gt;This guide is borrows heavily from the original Openstack guide, found here:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://wiki.openstack.org/wiki/Gerrit_Workflow
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;a-word-on-workflows&#34;&gt;A word on workflows&lt;/h2&gt;
&lt;p&gt;Gerrit, like Git, is extremely flexible. There is no one true way to work with
it. However, Git has two predominant &amp;ldquo;workflows&amp;rdquo;: the merge workflow, and the
rebase workflow. Each of these have their pros and cons, but both work equally
well with standard Git. This is not the case with Gerrit. While the former
workflow is possible, it&amp;rsquo;s very awkward (Gerrit doesn&amp;rsquo;t handle merge commits
very well). Hence, despite the issues that can occur from &amp;ldquo;rewriting history&amp;rdquo;
in the rebase workflow, it&amp;rsquo;s the best option.&lt;/p&gt;
&lt;h2 id=&#34;initial-steps&#34;&gt;Initial steps&lt;/h2&gt;
&lt;p&gt;First, install the tool. On Fedora 16 and up:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ dnf install git-review
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Navigate to the project you wish to use, and ensure you can connect to the
Gerrit server:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd &amp;lt;repo&amp;gt;
$ git review -s
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You may get a warning like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;No &#39;.gitreview&#39; file found in this repository.
We don&#39;t know where your gerrit is. Please manually create
a remote named gerrit and try again.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If so, you likely have your Gerrit review server&amp;rsquo;s &amp;ldquo;remote&amp;rdquo; called &lt;code&gt;origin&lt;/code&gt; or
something similar. You can check this like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git remote -v
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You&amp;rsquo;ll likely get something like so, where the url points to a Gerrit project:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;origin  &amp;lt;url&amp;gt; (fetch)
origin  &amp;lt;url&amp;gt; (push)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming this is the case, just rename the remote:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git remote rename origin gerrit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If this isn&amp;rsquo;t (i.e. you have more than one remote), you may want to rename
the relevant remote or add a new one for Gerrit:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git remote add gerrit [url]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;making-and-uploading-changesets&#34;&gt;Making and uploading changesets&lt;/h2&gt;
&lt;p&gt;Checkout a feature branch using your teams naming conventions:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git checkout -b &amp;lt;topic_branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; You should always work on feature branches when working with Gerrit.
If you work on &lt;code&gt;master&lt;/code&gt; or &lt;code&gt;development&lt;/code&gt;, you&amp;rsquo;re going to get merge conflicts
when you pull in the latest changes from Gerrit/upstream.&lt;/p&gt;
&lt;p&gt;Now make some changes: add some new files, delete old ones, do what you have to
do. Following this, save the changes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git commit -as  # this is the same as `git add -u` and `git commit -as`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This should create a new commit. You can upload this changeset like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git remote update  # to get latest changes
$ git review &amp;lt;upstream_branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This will automatically rebase the change against the upstream master.&lt;/p&gt;
&lt;p&gt;If you now go to Gerrit, you&amp;rsquo;ll see a new changeset there. Its &amp;ldquo;Branch&amp;rdquo; will
correspond with the value of &lt;code&gt;&amp;lt;upstream_branch&amp;gt;&lt;/code&gt;, while the &amp;ldquo;Topic&amp;rdquo; will
correspond with the value of &lt;code&gt;&amp;lt;topic_branch&amp;gt;&lt;/code&gt; (i.e. your local branch).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; In Gerrit, the &amp;ldquo;Branch&amp;rdquo; means the Git branch that the commit is meant
for. However, the &amp;ldquo;Topic&amp;rdquo; has no bearing on the actual underlying repo. Instead
it is merely used to gather similar changes together.&lt;/p&gt;
&lt;h2 id=&#34;reworking-a-changeset&#34;&gt;Reworking a changeset&lt;/h2&gt;
&lt;p&gt;No one&amp;rsquo;s perfect, and neither is your code. When you need to rework some, you
do so using the &lt;code&gt;rebase&lt;/code&gt; and &lt;code&gt;commit --amend&lt;/code&gt; tools. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[make changes...]
$ git commit -a --amend
$ git review &amp;lt;upstream_branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternatively&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git rebase -i &amp;lt;ancestor&amp;gt;
[make changes...]
$ git review &amp;lt;upstream_branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If you delete a commit using rebase, you &lt;em&gt;will&lt;/em&gt; need to manually
abandon it. Unfortunately there doesn&amp;rsquo;t seem to be any way to avoid this.&lt;/p&gt;
&lt;h2 id=&#34;collaboration&#34;&gt;Collaboration&lt;/h2&gt;
&lt;p&gt;If you want to review/rework someone else&amp;rsquo;s changes, it&amp;rsquo;s very easy to do. This
is great for collaboration/pair-programming.&lt;/p&gt;
&lt;p&gt;To check out someone else&amp;rsquo;s code, you&amp;rsquo;ll want the &amp;ldquo;change id&amp;rdquo;. When you have
this, just use the following change:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git review -d &amp;lt;change_id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will checkout the change, and all changes that it depends on (i.e. the
branch).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Loading Mailing List Archives with Mutt</title>
      <link>https://that.guru/blog/mutt-archives/</link>
      <pubDate>Wed, 13 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://that.guru/blog/mutt-archives/</guid>
      <description>&lt;p&gt;You can use &lt;a href=&#34;http://www.mutt.org/&#34;&gt;Mutt&lt;/a&gt; to load archives from a mailing list. This is useful
for replying to mails when you weren&amp;rsquo;t previously subscribed to said mailing
list.&lt;/p&gt;
&lt;p&gt;To begin, first go to the archive site for your given mailing list. This will
probably be a Pipermail instance. Once here, identify the archives you require:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://that.guru/media/mutt-archives-1.png&#34;
    alt=&#34;Screenshot of the download button for Pipermail&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;Download the archive&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Once you&amp;rsquo;ve identified this, download and, if necessary, extract the archive:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ wget http://openvswitch.org/pipermail/dev/2016-June.txt.gz
$ gunzip 2016-June.txt.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This extracted archive file will be in mbox format, and can be easily loaded
with mutt:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mutt -f 2016-June.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;&lt;img src=&#34;https://that.guru/media/mutt-archives-2.png&#34;
    alt=&#34;Screenshot of Mutt with archives loaded&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;All patches available in Mutt&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>Working with Jenkins &#43; Chrome</title>
      <link>https://that.guru/blog/helpful-jenkins-plugins/</link>
      <pubDate>Wed, 13 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://that.guru/blog/helpful-jenkins-plugins/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s been a while since I had to work with Jenkins directly (since I started on
OpenStack, really). However, I had a few tricks picked up around plugins for
Chrome that make working with pre-3.0 Jenkins a little more pleasant.&lt;/p&gt;
&lt;h1 id=&#34;buildreactor&#34;&gt;BuildReactor&lt;/h1&gt;
&lt;p&gt;This provides a current statuses of a user-defined number of Jenkins jobs.  It
also gives notifications when projects pass/fail.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chrome.google.com/webstore/detail/buildreactor/agfdekbncfakhgofmaacjfkpbhjhpjmp&#34;&gt;Site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/AdamNowotny/BuildReactor&#34;&gt;Source&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;Install from the Chrome store. Once installed, &amp;ldquo;Add&amp;rdquo; a new view, give it a name
(i.e. &amp;ldquo;Open vSwitch&amp;rdquo;) and configure the following settings:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Server: jenkins.example.com:8080
User:   [leave empty]
Pass:   [leave empty]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Substitute the appropriate URL for your local server. Once done, select the
&amp;ldquo;Show&amp;rdquo; button, and select which of the projects you want to display. Then
&amp;ldquo;Save&amp;rdquo;. You should now be able to get an overview of your builds by clicking on
the toolbar icon. You should also get notifications.  This is easier to parse
than the emails, IMO.&lt;/p&gt;
&lt;h1 id=&#34;doony&#34;&gt;Doony&lt;/h1&gt;
&lt;p&gt;This provides a new, ultra-usable stylesheet for Jenkins. IMO it makes Jenkins
easier to work with.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kevinburke/doony#chrome-extension&#34;&gt;Site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kevinburke/doony&#34;&gt;Source&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;installation-1&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;Follow the guide on the README. When modifying the &lt;code&gt;manifest.json&lt;/code&gt; file, add
the following URLs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;matches&amp;quot;: [
  &amp;quot;https://jenkins.ci.cloudbees.com/*&amp;quot;,
  &amp;quot;http://localhost:8080/*&amp;quot;,
  &amp;quot;https://jenkins.example.com:8080/*&amp;quot;,
  &amp;quot;http://jenkins.example.com:8080/*&amp;quot;,
  &amp;quot;https://jenkins.example.com/*&amp;quot;,
  &amp;quot;http://jenkins.example.com/*&amp;quot;,
],
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Substitute the appropriate URL for you local server. Don&amp;rsquo;t forget to &amp;ldquo;reload&amp;rdquo;
the plugin once installed.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sane Outlook: Making Plain Text Better in Outlook</title>
      <link>https://that.guru/blog/sane-outlook/</link>
      <pubDate>Mon, 11 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://that.guru/blog/sane-outlook/</guid>
      <description>&lt;p&gt;I like well-formatted, plain text emails, and I like reading them in a
monospace font. I find plain text to be more readable, and provides less ways
for people to impact this legibility. Sadly, Outlooks defaults to settings that
seemingly encourage bad email ettiquete. Fortunately, we can wrangle Outlook
into working some bit normally. You still need to do a bit of work (removing
the Outlook context header, giving out to people for top-posting (‚ò∫), etc.),
but it&amp;rsquo;s better.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://that.guru/media/sane-outlook-1.png&#34;
    alt=&#34;Screenshot of plain text mail before changes&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;A plain text email before&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;&lt;img src=&#34;https://that.guru/media/sane-outlook-2.png&#34;
    alt=&#34;Screenshot of plain text mail after changes&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;...and after&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;send-new-emails-using-plain-text&#34;&gt;Send new emails using plain text&lt;/h2&gt;
&lt;p&gt;The first step on our road to plain text greatness is to always send new emails
using plain text. This won&amp;rsquo;t modify the formatting of replies: only new emails
from you.&lt;/p&gt;
&lt;p&gt;You can do this in settings menu (Alt + F, Alt + T). Once here, click on the
mail tab and change the &amp;ldquo;Compose messages in this format:&amp;rdquo; option.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://that.guru/media/sane-outlook-3.png&#34;
    alt=&#34;Screenshot of configuring Outlook to send new emails in plain text&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;Send new messages in plain text&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;prefix-and-wrap-replies-correctly&#34;&gt;Prefix and wrap replies correctly&lt;/h2&gt;
&lt;p&gt;Next up, let&amp;rsquo;s prefix our emails with the &amp;lsquo;&amp;gt; &amp;rsquo; character. Scroll down on the
same settings dialog and enable this.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://that.guru/media/sane-outlook-4.png&#34;
    alt=&#34;Screenshot of configuring Outlook to prefix replies in a plain text email&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;Prefix replies to plain text emails&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;We should also disable stripping of extra line breaks and force wrapping of the
message. For the latter, note that this wrapping is done using Windows&amp;rsquo; CRLF
combination, thus, users of non-Windows clients may see an extra newline
between each line. This isn&amp;rsquo;t configurable, sadly.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://that.guru/media/sane-outlook-5.png&#34;
    alt=&#34;Screenshot of configuring Outlook to not strip extra line breaks&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;Don&amp;#39;t strip extra line breaks&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;display-emails-in-monospace-font&#34;&gt;Display emails in monospace font&lt;/h2&gt;
&lt;p&gt;The final step of this is display the emails in a nice, monospace font. I have
&lt;a href=&#34;https://adobe-fonts.github.io/source-code-pro/&#34;&gt;Source Code Pro&lt;/a&gt; installed, and use the &amp;ldquo;Light&amp;rdquo; variant of this in
Outlook. To do this, select the &amp;ldquo;&lt;em&gt;Stationary and Fonts&amp;hellip;&lt;/em&gt;&amp;rdquo; button in that same
pane.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://that.guru/media/sane-outlook-6.png&#34;
    alt=&#34;Screenshot of configuring Outlook to use monospace font (1)&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;Open the Stationary and Fonts dialog&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Once here, modify the config for &amp;ldquo;&lt;em&gt;Composing and reading plain text messages&lt;/em&gt;&amp;rdquo;.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://that.guru/media/sane-outlook-7.png&#34;
    alt=&#34;Screenshot of configuring Outlook to use monospace font (2)&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;We&amp;#39;re changing plain text message formating&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Finally, set your desired monospace font.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://that.guru/media/sane-outlook-8.png&#34;
    alt=&#34;Screenshot of configuring Outlook to use monospace font (3)&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;Open the Stationary and Fonts dialog&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;wrap-up&#34;&gt;Wrap Up&lt;/h2&gt;
&lt;p&gt;Better plain text emails, for the win.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://that.guru/media/sane-outlook-9.png&#34;
    alt=&#34;Screenshot of plain text email with correctly configured Outlook&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;Beautiful, monospace messages&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>How I Work</title>
      <link>https://that.guru/blog/how-i-work/</link>
      <pubDate>Sat, 09 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://that.guru/blog/how-i-work/</guid>
      <description>&lt;p&gt;Next Friday is the last week of this stint at Intel, so I figured now was as
good a time as ever to do a write up on how I work, or, more accurately, how
I&amp;rsquo;ve worked, during my time here. Note that this has evolved massively over the
past three years, so expect what I say now to have changed significantly a year
down the line.&lt;/p&gt;
&lt;p&gt;At the moment, I work predominantly on &lt;a href=&#34;https://github.com/openstack/nova&#34;&gt;nova&lt;/a&gt;, though I contribute to
many other projects like &lt;a href=&#34;https://github.com/openstack/openstack-manuals&#34;&gt;openstack-manuals&lt;/a&gt;,
&lt;a href=&#34;https://github.com/openstack/oslo.config&#34;&gt;oslo.config&lt;/a&gt;, &lt;a href=&#34;https://github.com/openstack-dev/devstack&#34;&gt;DevStack&lt;/a&gt; and &lt;a href=&#34;https://github.com/getpatchwork/patchwork&#34;&gt;Patchwork&lt;/a&gt;.
Not all of these projects are OpenStack projects, but they are all
Python-based, meaning the development environments for each tend to be rather
similar.&lt;/p&gt;
&lt;h2 id=&#34;platform&#34;&gt;Platform&lt;/h2&gt;
&lt;p&gt;First up - my development platform. My current work laptop is a tad
bit&amp;hellip;under-resourced (think: 4GB of RAM) and is Windows-based, meaning I
always end up working on remote machines via SSH (more on that later). The
remote machines I use vary depending on what I want to do. Most of the time I
use a handful of VMs provided via an internal cloud. These provide me with a
shared home directory (so I don&amp;rsquo;t have to configure Vim each time I start using
a new VM, heh) and some flexibility for things like basic multi-node testing.
However, when I need to validate features on real hardware (which happens quite
regularly, given the areas I&amp;rsquo;m working on), I&amp;rsquo;ll use some real hardware from
the lab. These platforms are the kind of platforms you&amp;rsquo;ll find in every good
data center around the world: multiple top-of-the-line Xeon E5s, super-fast
NVMe SSD storage, the latest Intel NICs (SR-IOV compatible, of course) and
many, many GBs of RAM.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://that.guru/media/how-i-work-1.png&#34;
    alt=&#34;Screenshot showing output of /proc/meminfo&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;That&amp;#39;s a lot of RAM&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;&lt;img src=&#34;https://that.guru/media/how-i-work-2.png&#34;
    alt=&#34;Screenshot showing output of /proc/cpuinfo&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;One of many cores&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;environment&#34;&gt;Environment&lt;/h2&gt;
&lt;p&gt;While the hardware of the platforms I use does vary tremendously, the software
environments are remarkably consistent. To start, everything runs whatever the
latest version of Fedora happens to be - while Ubuntu may be currently &lt;a href=&#34;https://www.openstack.org/assets/survey/April-2016-User-Survey-Report.pdf&#34;&gt;the
most popular platform to deploy OpenStack on&lt;/a&gt;, I&amp;rsquo;ve used
Fedora at home for years and saw no reason to switch. On top of this, I either
deploy OpenStack using DevStack, if I want to validate a feature, or I simply
clone and work on the project repos directly, if I&amp;rsquo;m working or unit-testable
code or &amp;ldquo;low-hanging-fruit&amp;rdquo; tasks. Finally, where required, I pre-configure my
tools using the configuration files provided by my &lt;a href=&#34;https://github.com/stephenfin/dotfiles&#34;&gt;dotfiles&lt;/a&gt;
project.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://that.guru/media/how-i-work-3.png&#34;
    alt=&#34;Screenshot showing OpenStack projects I&amp;#39;ve worked on&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;I work on a lot of projects&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;tooling&#34;&gt;Tooling&lt;/h2&gt;
&lt;p&gt;Tooling makes or breaks developers: learning what tools to use, and when, is an
important part of any developers own development. I know a lot of people who
use IDEs like &lt;a href=&#34;https://www.jetbrains.com/pycharm/&#34;&gt;PyCharm&lt;/a&gt; (indeed, you can get a &lt;a href=&#34;https://wiki.openstack.org/wiki/How_To_Contribute#If_you.27re_a_developer&#34;&gt;free community
license&lt;/a&gt; if you contribute to OpenStack), but seeing as I don&amp;rsquo;t
develop on my local machine, I need to use some form of remote rendering - VNC,
X11 forwarding, RDP - for the IDE GUI, I need to configure a remote mount so
that a local installed IDE could access files on my remote machines. I&amp;rsquo;ve found
both of these options to perform poorly over bad connections and result in
either a janky, laggy UI or an inability to do things like change branches with
any regularity, respectively. Annoying, to say the least.&lt;/p&gt;
&lt;p&gt;As a result of the above, I&amp;rsquo;ve been slowly dropping GUI-based tools from my
toolkit over the years. The largest change here was my replacment of Sublime
Text and its plugins with Vim and plugins managed by &lt;a href=&#34;https://github.com/VundleVim/Vundle.vim&#34;&gt;Vundle&lt;/a&gt;
(delighted not to be writing plugins for Vim, tbh). In addition to this change,
I also dropped &lt;a href=&#34;http://meldmerge.org/&#34;&gt;Meld&lt;/a&gt;, which was pretty but laggy over X11 forwarding, in
favor of the more responsive &lt;a href=&#34;https://github.com/rhysd/conflict-marker.vim&#34;&gt;ConflictMarker&lt;/a&gt; Vim plugin (I&amp;rsquo;m
yet to grasp Vimdiff).  Similarly, I&amp;rsquo;ve replaced MTPuTTY and its multiple tabs
with standard PuTTY and &lt;a href=&#34;https://tmux.github.io/&#34;&gt;tmux&lt;/a&gt;. All these tools do have an additional
learning curve over their GUI-driven equivalents, but they&amp;rsquo;re all
battle-tested, incredibly efficient, and work well on pretty much any type of
network connection.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://that.guru/media/how-i-work-4.png&#34;
    alt=&#34;Screenshot of Vim in tmux&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;I use Vim extensively&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Outside of these tools, I also make extensive use of &lt;a href=&#34;https://github.com/openstack-infra/git-review&#34;&gt;git-review&lt;/a&gt;
and &lt;a href=&#34;https://github.com/ggreer/the_silver_searcher&#34;&gt;ag (a.k.a. the silver searcher)&lt;/a&gt;. git-review allows me to quickly
submit my own changes for community review or download other peoples&amp;rsquo; changes
for validation, and it is the tool the OpenStack community recommends for
working with Gerrit-based projects. ag, on the other hand, is my way of
handling the lack of an IntelliSense-like feature in Vim. It&amp;rsquo;s a faster version
of &lt;code&gt;awk&lt;/code&gt; that also takes things like gitignore files into account. I use this
to search for function calls etc. I plan to eventually try something like
&lt;a href=&#34;https://github.com/davidhalter/jedi&#34;&gt;Jedi&lt;/a&gt; but I just haven&amp;rsquo;t got around to this yet.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://that.guru/media/how-i-work-5.png&#34;
    alt=&#34;Screenshot of ag in tmux&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;ag is fast and pretty&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Finally, debugging, where necessary, is possible through &lt;a href=&#34;https://docs.python.org/2/library/pdb.html&#34;&gt;pdb&lt;/a&gt; and the odd
post to the mailing list is made using &lt;a href=&#34;http://www.mutt.org/&#34;&gt;mutt&lt;/a&gt;. pdb, like many of these
tools, does take a bit of time to get your head around, but, once up and
running, proves itself worth the effort. mutt has a similarly large learning
curve, but it doesn&amp;rsquo;t mess up the formatting of emails half as bad as Outlook
and its threading actually works.&lt;/p&gt;
&lt;h2 id=&#34;future-plans&#34;&gt;Future Plans&lt;/h2&gt;
&lt;p&gt;There are a couple of tools that have been recommended to me, that I just
haven&amp;rsquo;t got around to trying yet.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dolph/next-review&#34;&gt;git-next&lt;/a&gt;: Developed by the awesome Dolph Matthews, this simple
tool should be configured with your favourite OpenStack project. Once done, you
can run it provide you with the next patch that you should review.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/openstack/gertty&#34;&gt;gertty&lt;/a&gt;: This is another OpenStack-provided project. This tool
provides a CLI for Gerrit tool, and allows you to do things like review code
offline. The latter feature isn&amp;rsquo;t so useful when working remotely all the time,
but if/when I start developing locally, I&amp;rsquo;ll be sure to use this.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/davidhalter/jedi&#34;&gt;Jedi&lt;/a&gt;: As mentioned above, how I navigate the code base could do with
a bit of work. Jedi brings autocomplete and some other stuff to editors like
Vim.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/pycharm/&#34;&gt;PyCharm&lt;/a&gt;: This is another one to throw in the &amp;ldquo;if I ever develop
locally&amp;rdquo; bag. I don&amp;rsquo;t use this now, but if it becomes an option then I&amp;rsquo;ll
definitely try it. I do wish the open source alternatives weren&amp;rsquo;t quite
so&amp;hellip;Java&amp;rsquo;y though.&lt;/li&gt;
&lt;li&gt;???: Who knows what else I&amp;rsquo;ll discover in the coming years?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;bonus-ssh-configuration&#34;&gt;Bonus: SSH Configuration&lt;/h2&gt;
&lt;p&gt;How I actually connect to the machines is probably worth calling out also. For
this, I use the PuTTY family of tools. To begin with, I have
&lt;a href=&#34;https://github.com/FauxFaux/PuTTYTray&#34;&gt;PuTTYTray&lt;/a&gt; installed and pinned to my taskbar to enable quick
access to some tools in the suite (&lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html&#34;&gt;PuTTY, Pageant, PuTTYGen&lt;/a&gt;).&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://that.guru/media/how-i-work-6.png&#34;
    alt=&#34;Screenshot of PuTTYTray&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;PuTTYTray in action&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The out-of-the-box experience for PuTTY itself is rather poor, so I rely on the
&lt;a href=&#34;https://github.com/jblaine/solarized-and-modern-putty&#34;&gt;Solarized Modern PuTTY Defaults project&lt;/a&gt; to bring things into the
21st century.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://that.guru/media/how-i-work-7.png&#34;
    alt=&#34;Screenshot of PuTTY&#34;&gt;&lt;figcaption&gt;
      &lt;h4&gt;Pretty colours. Not so pretty test results.&lt;/h4&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I don&amp;rsquo;t fancy typing in a password each time, so I &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-use-ssh-keys-with-putty-on-digitalocean-droplets-windows-users&#34;&gt;generate SSH keys using
Pageant&lt;/a&gt;, then I make sure Pageant &lt;a href=&#34;http://blog.shvetsov.com/2010/03/making-pageant-automatically-load-keys.html&#34;&gt;starts automatically&lt;/a&gt;
each time I boot my machine. I&amp;rsquo;ll probably do a more in-depth write up of this
process at some point.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configuring ZNC with HexChat</title>
      <link>https://that.guru/blog/znc-sasl-server-pass/</link>
      <pubDate>Sun, 26 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://that.guru/blog/znc-sasl-server-pass/</guid>
      <description>&lt;h1 id=&#34;configuring-znc-with-hexchat&#34;&gt;Configuring ZNC with HexChat&lt;/h1&gt;
&lt;p&gt;I recently set up ZNC instance to capture whatever I may miss when not
connected to any of the many &lt;a href=&#34;https://wiki.openstack.org/wiki/IRC&#34;&gt;OpenStack IRC&lt;/a&gt; channels. One
tricky part of this configuration was my use of multiple authentication layers.
I have ZNC configured to use a server password, but I also have my nick
&lt;a href=&#34;https://freenode.net/kb/answer/registration&#34;&gt;registered on freenode&lt;/a&gt; and I would like to use
&lt;a href=&#34;https://freenode.net/kb/answer/sasl&#34;&gt;SASL&lt;/a&gt; to authenticate this. It turns out that this is
relatively easy to do.&lt;/p&gt;
&lt;h2 id=&#34;configure-server-password-pass-authentication&#34;&gt;Configure server password (/PASS) authentication&lt;/h2&gt;
&lt;p&gt;You should first configure the connection to your ZNC server. Create a new
server profile (&lt;em&gt;HexChat&lt;/em&gt; &amp;gt; &lt;em&gt;Network List&lt;/em&gt;, or &lt;code&gt;&amp;lt;Ctrl&amp;gt;&lt;/code&gt; + &lt;code&gt;S&lt;/code&gt;) and
configure it like so:&lt;/p&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/znc-sasl-server-pass-1.png&#34;  /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Configuring server password authentication&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;Most of this configuration doesn&amp;rsquo;t differ from the many guides available on
configuring HexChat with ZNC. I&amp;rsquo;m using SSL, so I enable that (and accept my
&amp;ldquo;invalid&amp;rdquo;, self-signed key), and I select this as the server to automatically
connect to when I open HexChat. The interesting bit is the &lt;code&gt;Server Password &amp;lt;/PASS password&lt;/code&gt; section. In here, I have my username and server password
stored in format &lt;code&gt;[username]:[password]&lt;/code&gt;, e.g. &lt;code&gt;admin:password&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once done, I also need to configure a channels you want to connect to on the
&lt;em&gt;Autojoin channels&lt;/em&gt; tab:&lt;/p&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/znc-sasl-server-pass-2.png&#34;  /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Configuring autojoin channels&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;I&amp;rsquo;m mostly concerned with &lt;code&gt;#openstack-xxx&lt;/code&gt; channels, but your configuration
will differ.&lt;/p&gt;
&lt;h2 id=&#34;configure-sasl-authentication&#34;&gt;Configure SASL authentication&lt;/h2&gt;
&lt;p&gt;Now we should be able to connect to the ZNC server without gettings an &lt;code&gt;Invalid password&lt;/code&gt; errors. However, looking at the logs for the &lt;em&gt;freenode&lt;/em&gt; server
connection, we can see that we&amp;rsquo;re being asked to authenticate our registered
nick:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TODO&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Time for SASL. Many of these steps are documented on the &lt;a href=&#34;http://wiki.znc.in/Sasl&#34;&gt;ZNC wiki&lt;/a&gt;,
but they&amp;rsquo;re documented here for posterity.&lt;/p&gt;
&lt;p&gt;First, [load the module] &lt;a href=&#34;http://wiki.znc.in/Modules#Managing_Modules&#34;&gt;znc-mods&lt;/a&gt; on ZNC:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/msg *status loadmodule sasl
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, set the mechanism. We use &lt;code&gt;PLAIN&lt;/code&gt; (plaintext), which is a-OK as we&amp;rsquo;re
using SSL:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/msg *sasl mechanism PLAIN
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, supply your username and password:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/msg *sasl set &amp;lt;username&amp;gt; &amp;lt;password&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That should be the end the need to run pesky &lt;code&gt;nickserv&lt;/code&gt; commands.&lt;/p&gt;
&lt;h2 id=&#34;wrap-up&#34;&gt;Wrap up&lt;/h2&gt;
&lt;p&gt;We now have authentication against the server, using a server password, and
authentication against the nickserv, using SASL. Pretty much hassle free.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
