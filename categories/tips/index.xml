<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stephen Finucane (Fin-oo-can)</title>
    <link>https://that.guru/categories/tips/index.xml</link>
    <description>Recent content on Stephen Finucane (Fin-oo-can)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-IE</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <atom:link href="https://that.guru/categories/tips/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Open Python paths with vim</title>
      <link>https://that.guru/blog/open-python-paths-with-vim/</link>
      <pubDate>Mon, 06 Feb 2017 14:33:53 +0000</pubDate>
      
      <guid>https://that.guru/blog/open-python-paths-with-vim/</guid>
      <description>&lt;p&gt;In OpenStack nova land, you run tests by specifying their Python paths, like
so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tox -e py27 nova.tests.unit.virt.libvirt.test_vif.LibvirtVifTestCase
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is also how tests are run and reported by the CI. If a tests fails when
run locally or in the CI, the failure will be reported with similar Python
module path-style references. These take a little cleanup to get a usable file
path that we can use to open the file, so I automated it.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/stephenfin/ea6bb2d650060d2a998a2dcd41f58291.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Download and copy this to somewhere on your path, then run it like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd $openstack_nova_dir
$ pyvi nova.tests.unit.virt.libvirt.test_vif.LibvirtVifTestCase
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Creating a Windows 7 USB on Fedora 25</title>
      <link>https://that.guru/blog/creating-a-windows-7-usb-on-fedora-25/</link>
      <pubDate>Tue, 31 Jan 2017 22:43:38 +0000</pubDate>
      
      <guid>https://that.guru/blog/creating-a-windows-7-usb-on-fedora-25/</guid>
      <description>

&lt;p&gt;Turns out Fedora 25 didn&amp;rsquo;t like my Samsung Series 9 (NP900X4C) much. Among
other things, the WiFi was intermittent (weird, as it&amp;rsquo;s an Intel NIC), suspend
didn&amp;rsquo;t work (the laptop is always dead when I come to it), and the keyboard
backlight turned off immediately after turning it on. I figured installing
Windows again might be a good move (I also miss Office), but that turned out a
little more difficult that anticipated. Below is the steps I ended up taking,
should anyone else encounter the same issue.&lt;/p&gt;

&lt;h1 id=&#34;get-an-iso&#34;&gt;Get an ISO&lt;/h1&gt;

&lt;p&gt;First up: finding a valid Windows 7 Home Premium x64 ISO. Given that I still
had my OEM key, this should not have been as difficult as it was. I finally
found a workaround, thanks to &lt;a href=&#34;https://www.raymond.cc/blog/links-for-windows-7-sp1-iso-from-microsofts-official-distributer/&#34;&gt;this excellent guide on Raymond.cc&lt;/a&gt; (follow
the &amp;ldquo;Download Windows &lt;sup&gt;7&lt;/sup&gt;&amp;frasl;&lt;sub&gt;8&lt;/sub&gt;.1 From The Windows 10 Download Page&amp;rdquo; section). With
that &amp;ldquo;hack&amp;rdquo;, you should be able to pull in an ISO for the required version
(&lt;code&gt;Win7_HomePrem_SP1_English_x64.iso&lt;/code&gt; in my case).&lt;/p&gt;

&lt;h1 id=&#34;connect-usb-drive&#34;&gt;Connect USB Drive&lt;/h1&gt;

&lt;p&gt;We&amp;rsquo;re going to install to a USB drive, so ensure it&amp;rsquo;s plugged in now. Record
the device name - &lt;code&gt;/dev/sdb&lt;/code&gt; in my case - for use later.&lt;/p&gt;

&lt;h1 id=&#34;prepare-your-usb&#34;&gt;Prepare Your USB&lt;/h1&gt;

&lt;p&gt;This was another exercise in frustration. I followed many, many guides, all of
which invariably ended in a failure. I suspect this is because the guides all
recommended formatting my drive with NTFS when UEFI, as found on this laptop,
requires FAT32. Thankfully, I stumbled upon &lt;a href=&#34;https://onetransistor.blogspot.ie/2014/09/make-bootable-windows-usb-from-ubuntu.html&#34;&gt;a guide&lt;/a&gt; that suggested as
much. This guide used GParted but unfortunately there&amp;rsquo;s a known &lt;a href=&#34;https://bugzilla.redhat.com/show_bug.cgi?id=1397103&#34;&gt;issue with
&lt;code&gt;gparted&lt;/code&gt; on Wayland&lt;/a&gt;. A workaround for this issue is to allow &amp;ldquo;non-network
local connections&amp;rdquo; by running the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ xhost +local:
non-network local connections being added to access control list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we can start GParted:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo gparted
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Execute the following operations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Unmount the drive&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Delete any existing partitions&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a &lt;em&gt;New&lt;/em&gt; primary partition&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Format this partition as FAT32&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Set a label, e.g. &lt;code&gt;WIN7_HP_X64&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Set the &lt;code&gt;boot&lt;/code&gt; flag to make the drive bootable&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once completed, &lt;em&gt;Apply all operations&lt;/em&gt;, exit GParted, and disallow non-network
local connections:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ xhost -local:
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;copy-files&#34;&gt;Copy Files&lt;/h1&gt;

&lt;p&gt;You can now proceed to mount both the USB drive and the ISO:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo mkdir /mnt/usb
$ sudo mkdir /mnt/iso
$ sudo mount /dev/sdb1 /mnt/usb/
$ sudo mount -o loop ~/Downloads/Win7_HomePrem_SP1_English_x64.iso /mnt/iso/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;updating paths where necessary.&lt;/p&gt;

&lt;p&gt;Copy the contents of the ISO to the USB drive:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo cp -av /mnt/iso/* /mnt/usb/
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;install-bootloader&#34;&gt;Install Bootloader&lt;/h1&gt;

&lt;p&gt;We&amp;rsquo;re going to use grub2 as the bootloader. Run the following to install the
bootloader on the USB drive:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo grub2-install --boot-directory=/mnt/usb/boot /dev/sdb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;once again, updating paths where necessary.&lt;/p&gt;

&lt;p&gt;Once completed, you should see the following message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Installing for i386-pc platform.
Installation finished. No error reported.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If so, save the following to &lt;code&gt;boot/grub2/grub.cfg&lt;/code&gt; on the USB drive:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;default=1
timeout=15
color_normal=light-cyan/dark-gray
menu_color_normal=black/light-cyan
menu_color_highlight=white/black

menuentry &amp;quot;Start Windows Installation&amp;quot; {
    insmod ntfs
    insmod search_label
    search --no-floppy --set=root --label &amp;lt;USB_drive_label&amp;gt; --hint hd0,msdos1
    ntldr /bootmgr
    boot
}

menuentry &amp;quot;Boot from the first hard drive&amp;quot; {
    insmod ntfs
    insmod chain
    insmod part_msdos
    insmod part_gpt
    set root=(hd1)
    chainloader +1
    boot
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;replacing &lt;code&gt;&amp;lt;USB_drive_label&amp;gt;&lt;/code&gt; with the label you used earlier - &lt;code&gt;WIN7_HP_X64&lt;/code&gt;
for me.&lt;/p&gt;

&lt;h1 id=&#34;profit&#34;&gt;Profit&lt;/h1&gt;

&lt;p&gt;Unmount the drive, insert it into the laptop and install Windows 7.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sync  # to ensure all file transfers are complete.
$ sudo umount
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Install Netbeans on Fedora 25</title>
      <link>https://that.guru/blog/install-netbeans-on-fedora-25/</link>
      <pubDate>Sat, 10 Dec 2016 20:16:27 +0000</pubDate>
      
      <guid>https://that.guru/blog/install-netbeans-on-fedora-25/</guid>
      <description>

&lt;p&gt;It&amp;rsquo;s been a while since I last wrote a non-trivial amount of Java and I can&amp;rsquo;t
say I miss it. However, I want to work on a plugin for Jenkins which means
diving back in. Netbeans was my IDE of choice when I last worked with Java but
unfortunately Netbeans is not packaged for Fedora (presumably due to it&amp;rsquo;s use
of Oracle&amp;rsquo;s JDK rather than OpenJDK?). As such, if you want to avoid using
Eclipse then you need to install Netbeans &amp;ldquo;by hand&amp;rdquo;. There are a couple of
tricks to doing this correctly.&lt;/p&gt;

&lt;h1 id=&#34;install-dependencies&#34;&gt;Install dependencies&lt;/h1&gt;

&lt;p&gt;We&amp;rsquo;re going to use OpenJDK rather than Oracle JDK as the former is packaged in
Fedora.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo dnf install java-1.8.0-openjdk.x86_64
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;download-installer&#34;&gt;Download installer&lt;/h1&gt;

&lt;p&gt;Download the latest installer from the &lt;a href=&#34;https://netbeans.org/downloads/&#34;&gt;Netbeans website&lt;/a&gt;. At the time of
writing, this was &lt;em&gt;Netbeans 8.2&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&#34;enable-root-access-to-x&#34;&gt;Enable root access to X&lt;/h1&gt;

&lt;p&gt;I wanted Netbeans installed in a standard location (&lt;code&gt;/usr/local&lt;/code&gt;) rather than
in my home directory. Unfortunately this requires root privileges and and
running the installer under &lt;code&gt;sudo&lt;/code&gt; produces errors. The &lt;a href=&#34;https://wiki.archlinux.org/index.php/Running_X_apps_as_root&#34;&gt;Arch
wiki&lt;/a&gt; provides a
number of suggestions for how to do this, but the one that worked for me was to
temporarily allow root access to X like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ xhost +
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;run-the-installer&#34;&gt;Run the installer&lt;/h1&gt;

&lt;p&gt;The only change you will need to make is to change the JDK path from &lt;code&gt;/usr&lt;/code&gt; to
wherever OpenJDK is installed
(&lt;code&gt;/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.111-3.b16.fc25.x86_64&lt;/code&gt; for me). If you
don&amp;rsquo;t do this, you will get a warning stating &amp;ldquo;The JDK is missing&amp;rdquo;. If this
happens, follow the instructions provided &lt;a href=&#34;https://mydayswithlinux.wordpress.com/2016/03/02/how-to-install-netbeans-8-1-in-kororafedora/&#34;&gt;here&lt;/a&gt; to resolve the issue
post-installation.&lt;/p&gt;

&lt;h1 id=&#34;disable-root-access-to-x&#34;&gt;Disable root access to X&lt;/h1&gt;

&lt;p&gt;Once installation is complete, we can disable root access to prevent anyone
else accessing our X session.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ xhost -
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;profit&#34;&gt;Profit&lt;/h1&gt;

&lt;p&gt;NetBeans should now be installed.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using git-review</title>
      <link>https://that.guru/blog/how-to-use-git-review/</link>
      <pubDate>Tue, 06 Dec 2016 15:48:32 +0000</pubDate>
      
      <guid>https://that.guru/blog/how-to-use-git-review/</guid>
      <description>

&lt;p&gt;&lt;code&gt;git-review&lt;/code&gt; is a Python wrapper for many of the common Git commands used in
conjunction with Gerrit. It encapsulates many of the most common commands used,
in order to speed things up.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s possible to use Gerrit without using the &lt;code&gt;git-review&lt;/code&gt; tool. All the
commands we use below have their plain &lt;code&gt;git&lt;/code&gt; equivalents. However, the question
remains: why would you want to? The &lt;code&gt;git-review&lt;/code&gt; tool speeds things up, and is
used by a number of teams outside Intel (including MediaWiki and OpenStack).&lt;/p&gt;

&lt;p&gt;This guide is borrows heavily from the original Openstack guide, found here:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://wiki.openstack.org/wiki/Gerrit_Workflow
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;a-word-on-workflows&#34;&gt;A word on workflows&lt;/h2&gt;

&lt;p&gt;Gerrit, like Git, is extremely flexible. There is no one true way to work with
it. However, Git has two predominant &amp;ldquo;workflows&amp;rdquo;: the merge workflow, and the
rebase workflow. Each of these have their pros and cons, but both work equally
well with standard Git. This is not the case with Gerrit. While the former
workflow is possible, it&amp;rsquo;s very awkward (Gerrit doesn&amp;rsquo;t handle merge commits
very well). Hence, despite the issues that can occur from &amp;ldquo;rewriting history&amp;rdquo;
in the rebase workflow, it&amp;rsquo;s the best option.&lt;/p&gt;

&lt;h2 id=&#34;initial-steps&#34;&gt;Initial steps&lt;/h2&gt;

&lt;p&gt;First, install the tool. On Fedora 16 and up:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ dnf install git-review
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Navigate to the project you wish to use, and ensure you can connect to the
Gerrit server:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd &amp;lt;repo&amp;gt;
$ git review -s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may get a warning like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;No &#39;.gitreview&#39; file found in this repository.
We don&#39;t know where your gerrit is. Please manually create
a remote named gerrit and try again.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If so, you likely have your Gerrit review server&amp;rsquo;s &amp;ldquo;remote&amp;rdquo; called &lt;code&gt;origin&lt;/code&gt; or
something similar. You can check this like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git remote -v
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;rsquo;ll likely get something like so, where the url points to a Gerrit project:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;origin  &amp;lt;url&amp;gt; (fetch)
origin  &amp;lt;url&amp;gt; (push)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Assuming this is the case, just rename the remote:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git remote rename origin gerrit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If this isn&amp;rsquo;t (i.e. you have more than one remote), you may want to rename
the relevant remote or add a new one for Gerrit:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git remote add gerrit [url]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;making-and-uploading-changesets&#34;&gt;Making and uploading changesets&lt;/h2&gt;

&lt;p&gt;Checkout a feature branch using your teams naming conventions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git checkout -b &amp;lt;topic_branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; You should always work on feature branches when working with Gerrit.
If you work on &lt;code&gt;master&lt;/code&gt; or &lt;code&gt;development&lt;/code&gt;, you&amp;rsquo;re going to get merge conflicts
when you pull in the latest changes from Gerrit/upstream.&lt;/p&gt;

&lt;p&gt;Now make some changes: add some new files, delete old ones, do what you have to
do. Following this, save the changes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git commit -as  # this is the same as `git add -u` and `git commit -as`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should create a new commit. You can upload this changeset like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git remote update  # to get latest changes
$ git review &amp;lt;upstream_branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This will automatically rebase the change against the upstream master.&lt;/p&gt;

&lt;p&gt;If you now go to Gerrit, you&amp;rsquo;ll see a new changeset there. Its &amp;ldquo;Branch&amp;rdquo; will
correspond with the value of &lt;code&gt;&amp;lt;upstream_branch&amp;gt;&lt;/code&gt;, while the &amp;ldquo;Topic&amp;rdquo; will
correspond with the value of &lt;code&gt;&amp;lt;topic_branch&amp;gt;&lt;/code&gt; (i.e. your local branch).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; In Gerrit, the &amp;ldquo;Branch&amp;rdquo; means the Git branch that the commit is meant
for. However, the &amp;ldquo;Topic&amp;rdquo; has no bearing on the actual underlying repo. Instead
it is merely used to gather similar changes together.&lt;/p&gt;

&lt;h2 id=&#34;reworking-a-changeset&#34;&gt;Reworking a changeset&lt;/h2&gt;

&lt;p&gt;No one&amp;rsquo;s perfect, and neither is your code. When you need to rework some, you
do so using the &lt;code&gt;rebase&lt;/code&gt; and &lt;code&gt;commit --amend&lt;/code&gt; tools. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[make changes...]
$ git commit -a --amend
$ git review &amp;lt;upstream_branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git rebase -i &amp;lt;ancestor&amp;gt;
[make changes...]
$ git review &amp;lt;upstream_branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If you delete a commit using rebase, you &lt;em&gt;will&lt;/em&gt; need to manually
abandon it. Unfortunately there doesn&amp;rsquo;t seem to be any way to avoid this.&lt;/p&gt;

&lt;h2 id=&#34;collaboration&#34;&gt;Collaboration&lt;/h2&gt;

&lt;p&gt;If you want to review/rework someone else&amp;rsquo;s changes, it&amp;rsquo;s very easy to do. This
is great for collaboration/pair-programming.&lt;/p&gt;

&lt;p&gt;To check out someone else&amp;rsquo;s code, you&amp;rsquo;ll want the &amp;ldquo;change id&amp;rdquo;. When you have
this, just use the following change:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git review -d &amp;lt;change_id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will checkout the change, and all changes that it depends on (i.e. the
branch).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MTUs in neutron</title>
      <link>https://that.guru/blog/mtus-in-neutron/</link>
      <pubDate>Tue, 06 Dec 2016 15:32:46 +0000</pubDate>
      
      <guid>https://that.guru/blog/mtus-in-neutron/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m not overly familiar with neutron but it appears that in the past correctly
setting MTU values was easier said than done. This has been massively improved
in recent releases, but getting us to this point required a lot of work and, in
particular, a lot of changes to the MTU-related configuration options available
over the course of Liberty and Newton. The below table tries to collect these
changes in a coherent table.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Configuration Option&lt;/th&gt;
&lt;th&gt;Version&lt;/th&gt;
&lt;th&gt;Commit&lt;/th&gt;
&lt;th&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;segment_mtu&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Liberty&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;path_mtu&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Liberty&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;segment_mtu&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Mitaka&lt;/td&gt;
&lt;td&gt;b2d0985d&lt;/td&gt;
&lt;td&gt;Default set to 1500&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;global_physnet_mtu&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Mitaka&lt;/td&gt;
&lt;td&gt;ae45cd57&lt;/td&gt;
&lt;td&gt;New name for &lt;code&gt;segment_mtu&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;path_mtu&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Mitaka&lt;/td&gt;
&lt;td&gt;7a4633a9&lt;/td&gt;
&lt;td&gt;Default set to 1500&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;global_physnet_mtu&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Newton&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;path_mtu&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Newton&lt;/td&gt;
&lt;td&gt;38531ca5&lt;/td&gt;
&lt;td&gt;Default set to 0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;These options are described in the docs for both &lt;a href=&#34;http://docs.openstack.org/mitaka/networking-guide/config-mtu.html&#34;&gt;Mitaka&lt;/a&gt; and
&lt;a href=&#34;http://docs.openstack.org/newton/networking-guide/config-mtu.html&#34;&gt;Newton&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In addition, it&amp;rsquo;s also worth noting that the default for &lt;code&gt;global_physnet_mtu&lt;/code&gt;
in TripleO was changed from 1400 to 1500 as part of &lt;a href=&#34;https://bugs.launchpad.net/tripleo/+bug/1590101&#34;&gt;bug 1590101&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Working with Jenkins &#43; Chrome</title>
      <link>https://that.guru/blog/helpful-jenkins-plugins/</link>
      <pubDate>Wed, 13 Jul 2016 14:46:56 +0100</pubDate>
      
      <guid>https://that.guru/blog/helpful-jenkins-plugins/</guid>
      <description>

&lt;p&gt;It&amp;rsquo;s been a while since I had to work with Jenkins directly (since I started on
OpenStack, really). However, I had a few tricks picked up around plugins for
Chrome that make working with pre-3.0 Jenkins a little more pleasant.&lt;/p&gt;

&lt;h1 id=&#34;buildreactor&#34;&gt;BuildReactor&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chrome.google.com/webstore/detail/buildreactor/agfdekbncfakhgofmaacjfkpbhjhpjmp&#34;&gt;Site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/AdamNowotny/BuildReactor&#34;&gt;Source&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Overview&lt;/p&gt;

&lt;p&gt;This provides a current statuses of a user-defined number of Jenkins jobs.
It also gives notifications when projects pass/fail.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Installation&lt;/p&gt;

&lt;p&gt;Install from the Chrome store. Once installed, &amp;ldquo;Add&amp;rdquo; a new view, give it a
name (i.e. &amp;ldquo;Open vSwitch&amp;rdquo;) and configure the following settings:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Server: jenkins.example.com:8080
User:   [leave empty]
Pass:   [leave empty]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Substitute the appropriate URL for your local server. Once done, select the
&amp;ldquo;Show&amp;rdquo; button, and select which of the projects you want to display. Then
&amp;ldquo;Save&amp;rdquo;. You should now be able to get an overview of your builds by
clicking on the toolbar icon. You should also get notifications.  This is
easier to parse than the emails, IMO.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;doony&#34;&gt;Doony&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kevinburke/doony#chrome-extension&#34;&gt;Site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kevinburke/doony&#34;&gt;Source&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Overview&lt;/p&gt;

&lt;p&gt;This provides a new, ultra-usable stylesheet for Jenkins. IMO it makes
Jenkins easier to work with.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Installation&lt;/p&gt;

&lt;p&gt;Follow the guide on the README. When modifying the &amp;lsquo;manifest.json&amp;rsquo; file,
add the following URLs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;matches&amp;quot;: [
  &amp;quot;https://jenkins.ci.cloudbees.com/*&amp;quot;,
  &amp;quot;http://localhost:8080/*&amp;quot;,
  &amp;quot;https://jenkins.example.com:8080/*&amp;quot;,
  &amp;quot;http://jenkins.example.com:8080/*&amp;quot;,
  &amp;quot;https://jenkins.example.com/*&amp;quot;,
  &amp;quot;http://jenkins.example.com/*&amp;quot;,
],
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Substitute the appropriate URL for you local server. Don&amp;rsquo;t forget to
&amp;ldquo;reload&amp;rdquo; the plugin once installed.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Loading mailing list archives with Mutt</title>
      <link>https://that.guru/blog/mutt-archives/</link>
      <pubDate>Wed, 13 Jul 2016 10:59:30 +0100</pubDate>
      
      <guid>https://that.guru/blog/mutt-archives/</guid>
      <description>&lt;p&gt;You can use &lt;a href=&#34;http://www.mutt.org/&#34;&gt;Mutt&lt;/a&gt; to load archives from a mailing list. This is useful
for replying to mails when you weren&amp;rsquo;t previously subscribed to said mailing
list.&lt;/p&gt;

&lt;p&gt;To begin, first go to the archive site for your given mailing list. This will
probably be a Pipermail instance. Once here, identify the archives you require:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/mutt-archives-1.png&#34; alt=&#34;Screenshot of the download button for Pipermail&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Download the archive&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;Once you&amp;rsquo;ve identified this, download and, if necessary, extract the archive:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ wget http://openvswitch.org/pipermail/dev/2016-June.txt.gz
$ gunzip 2016-June.txt.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This extracted archive file will be in mbox format, and can be easily loaded
with mutt:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mutt -f 2016-June.txt
&lt;/code&gt;&lt;/pre&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/mutt-archives-2.png&#34; alt=&#34;Screenshot of Mutt with archives loaded&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;All patches available in Mutt&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>Sane Outlook: Making plain text better in Outlook</title>
      <link>https://that.guru/blog/sane-outlook/</link>
      <pubDate>Mon, 11 Jul 2016 18:11:38 +0100</pubDate>
      
      <guid>https://that.guru/blog/sane-outlook/</guid>
      <description>

&lt;p&gt;I like well-formatted, plain text emails, and I like reading them in a
monospace font. I find plain text to be more readable, and provides less ways
for people to impact this legibility. Sadly, Outlooks defaults to settings that
seemingly encourage bad email ettiquete. Fortunately, we can wrangle Outlook
into working some bit normally. You still need to do a bit of work (removing
the Outlook context header, giving out to people for top-posting (☺), etc.),
but it&amp;rsquo;s better.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/sane-outlook-1.png&#34; alt=&#34;Screenshot of plain text mail before changes&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;A plain text email before&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;



&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/sane-outlook-2.png&#34; alt=&#34;Screenshot of plain text mail after changes&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;...and after&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h2 id=&#34;send-new-emails-using-plain-text&#34;&gt;Send new emails using plain text&lt;/h2&gt;

&lt;p&gt;The first step on our road to plain text greatness is to always send new emails
using plain text. This won&amp;rsquo;t modify the formatting of replies: only new emails
from you.&lt;/p&gt;

&lt;p&gt;You can do this in settings menu (Alt + F, Alt + T). Once here, click on the
mail tab and change the &amp;ldquo;Compose messages in this format:&amp;rdquo; option.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/sane-outlook-3.png&#34; alt=&#34;Screenshot of configuring Outlook to send new emails in plain text&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Send new messages in plain text&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h2 id=&#34;prefix-and-wrap-replies-correctly&#34;&gt;Prefix and wrap replies correctly&lt;/h2&gt;

&lt;p&gt;Next up, let&amp;rsquo;s prefix our emails with the &amp;lsquo;&amp;gt; &amp;rsquo; character. Scroll down on the
same settings dialog and enable this.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/sane-outlook-4.png&#34; alt=&#34;Screenshot of configuring Outlook to prefix replies in a plain text email&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Prefix replies to plain text emails&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;We should also disable stripping of extra line breaks and force wrapping of the
message. For the latter, note that this wrapping is done using Windows&amp;rsquo; CRLF
combination, thus, users of non-Windows clients may see an extra newline
between each line. This isn&amp;rsquo;t configurable, sadly.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/sane-outlook-5.png&#34; alt=&#34;Screenshot of configuring Outlook to not strip extra line breaks&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Don&amp;#39;t strip extra line breaks&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h2 id=&#34;display-emails-in-monospace-font&#34;&gt;Display emails in monospace font&lt;/h2&gt;

&lt;p&gt;The final step of this is display the emails in a nice, monospace font. I have
&lt;a href=&#34;https://adobe-fonts.github.io/source-code-pro/&#34;&gt;Source Code Pro&lt;/a&gt; installed, and use the &amp;ldquo;Light&amp;rdquo; variant of this in
Outlook. To do this, select the &amp;ldquo;&lt;em&gt;Stationary and Fonts&amp;hellip;&lt;/em&gt;&amp;rdquo; button in that same
pane.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/sane-outlook-6.png&#34; alt=&#34;Screenshot of configuring Outlook to use monospace font (1)&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Open the Stationary and Fonts dialog&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;Once here, modify the config for &amp;ldquo;&lt;em&gt;Composing and reading plain text messages&lt;/em&gt;&amp;rdquo;.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/sane-outlook-7.png&#34; alt=&#34;Screenshot of configuring Outlook to use monospace font (2)&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;We&amp;#39;re changing plain text message formating&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;Finally, set your desired monospace font.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/sane-outlook-8.png&#34; alt=&#34;Screenshot of configuring Outlook to use monospace font (3)&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Open the Stationary and Fonts dialog&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h2 id=&#34;wrap-up&#34;&gt;Wrap Up&lt;/h2&gt;

&lt;p&gt;Better plain text emails, for the win.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/sane-outlook-9.png&#34; alt=&#34;Screenshot of plain text email with correctly configured Outlook&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Beautiful, monospace messages&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>How I Work</title>
      <link>https://that.guru/blog/how-i-work/</link>
      <pubDate>Sat, 09 Jul 2016 18:08:16 +0100</pubDate>
      
      <guid>https://that.guru/blog/how-i-work/</guid>
      <description>

&lt;p&gt;Next Friday is the last week of this stint at Intel, so I figured now was as
good a time as ever to do a write up on how I work, or, more accurately, how
I&amp;rsquo;ve worked, during my time here. Note that this has evolved massively over the
past three years, so expect what I say now to have changed significantly a year
down the line.&lt;/p&gt;

&lt;p&gt;At the moment, I work predominantly on &lt;a href=&#34;https://github.com/openstack/nova&#34;&gt;nova&lt;/a&gt;, though I contribute to
many other projects like &lt;a href=&#34;https://github.com/openstack/openstack-manuals&#34;&gt;openstack-manuals&lt;/a&gt;,
&lt;a href=&#34;https://github.com/openstack/oslo.config&#34;&gt;oslo.config&lt;/a&gt;, &lt;a href=&#34;https://github.com/openstack-dev/devstack&#34;&gt;DevStack&lt;/a&gt; and &lt;a href=&#34;https://github.com/getpatchwork/patchwork&#34;&gt;Patchwork&lt;/a&gt;.
Not all of these projects are OpenStack projects, but they are all
Python-based, meaning the development environments for each tend to be rather
similar.&lt;/p&gt;

&lt;h2 id=&#34;platform&#34;&gt;Platform&lt;/h2&gt;

&lt;p&gt;First up - my development platform. My current work laptop is a tad
bit&amp;hellip;under-resourced (think: 4GB of RAM) and is Windows-based, meaning I
always end up working on remote machines via SSH (more on that later). The
remote machines I use vary depending on what I want to do. Most of the time I
use a handful of VMs provided via an internal cloud. These provide me with a
shared home directory (so I don&amp;rsquo;t have to configure Vim each time I start using
a new VM, heh) and some flexibility for things like basic multi-node testing.
However, when I need to validate features on real hardware (which happens quite
regularly, given the areas I&amp;rsquo;m working on), I&amp;rsquo;ll use some real hardware from
the lab. These platforms are the kind of platforms you&amp;rsquo;ll find in every good
data center around the world: multiple top-of-the-line Xeon E5s, super-fast
NVMe SSD storage, the latest Intel NICs (SR-IOV compatible, of course) and
many, many GBs of RAM.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/how-i-work-1.png&#34; alt=&#34;Screenshot showing output of /proc/meminfo&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;That&amp;#39;s a lot of RAM&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;



&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/how-i-work-2.png&#34; alt=&#34;Screenshot showing output of /proc/cpuinfo&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;One of many cores&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h2 id=&#34;environment&#34;&gt;Environment&lt;/h2&gt;

&lt;p&gt;While the hardware of the platforms I use does vary tremendously, the software
environments are remarkably consistent. To start, everything runs whatever the
latest version of Fedora happens to be - while Ubuntu may be currently &lt;a href=&#34;https://www.openstack.org/assets/survey/April-2016-User-Survey-Report.pdf&#34;&gt;the
most popular platform to deploy OpenStack on&lt;/a&gt;, I&amp;rsquo;ve used
Fedora at home for years and saw no reason to switch. On top of this, I either
deploy OpenStack using DevStack, if I want to validate a feature, or I simply
clone and work on the project repos directly, if I&amp;rsquo;m working or unit-testable
code or &amp;ldquo;low-hanging-fruit&amp;rdquo; tasks. Finally, where required, I pre-configure my
tools using the configuration files provided by my &lt;a href=&#34;https://github.com/stephenfin/dotfiles&#34;&gt;dotfiles&lt;/a&gt;
project.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/how-i-work-3.png&#34; alt=&#34;Screenshot showing OpenStack projects I&amp;#39;ve worked on&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;I work on a lot of projects&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h2 id=&#34;tooling&#34;&gt;Tooling&lt;/h2&gt;

&lt;p&gt;Tooling makes or breaks developers: learning what tools to use, and when, is an
important part of any developers own development. I know a lot of people who
use IDEs like &lt;a href=&#34;https://www.jetbrains.com/pycharm/&#34;&gt;PyCharm&lt;/a&gt; (indeed, you can get a &lt;a href=&#34;https://wiki.openstack.org/wiki/How_To_Contribute#If_you.27re_a_developer&#34;&gt;free community
license&lt;/a&gt; if you contribute to OpenStack), but seeing as I don&amp;rsquo;t
develop on my local machine, I need to use some form of remote rendering - VNC,
X11 forwarding, RDP - for the IDE GUI, I need to configure a remote mount so
that a local installed IDE could access files on my remote machines. I&amp;rsquo;ve found
both of these options to perform poorly over bad connections and result in
either a janky, laggy UI or an inability to do things like change branches with
any regularity, respectively. Annoying, to say the least.&lt;/p&gt;

&lt;p&gt;As a result of the above, I&amp;rsquo;ve been slowly dropping GUI-based tools from my
toolkit over the years. The largest change here was my replacment of Sublime
Text and its plugins with Vim and plugins managed by &lt;a href=&#34;https://github.com/VundleVim/Vundle.vim&#34;&gt;Vundle&lt;/a&gt;
(delighted not to be writing plugins for Vim, tbh). In addition to this change,
I also dropped [Meld], which was pretty but laggy over X11 forwarding, in favor
of the more responsive &lt;a href=&#34;https://github.com/rhysd/conflict-marker.vim&#34;&gt;ConflictMarker&lt;/a&gt; Vim plugin (I&amp;rsquo;m yet to
grasp Vimdiff).  Similarly, I&amp;rsquo;ve replaced MTPuTTY and its multiple tabs with
standard PuTTY and &lt;a href=&#34;https://tmux.github.io/&#34;&gt;tmux&lt;/a&gt;. All these tools do have an additional learning
curve over their GUI-driven equivalents, but they&amp;rsquo;re all battle-tested,
incredibly efficient, and work well on pretty much any type of network
connection.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/how-i-work-4.png&#34; alt=&#34;Screenshot of Vim in tmux&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;I use Vim extensively&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;Outside of these tools, I also make extensive use of &lt;a href=&#34;https://github.com/openstack-infra/git-review&#34;&gt;git-review&lt;/a&gt;
and &lt;a href=&#34;https://github.com/ggreer/the_silver_searcher&#34;&gt;ag (a.k.a. the silver searcher)&lt;/a&gt;. git-review allows me to quickly
submit my own changes for community review or download other peoples&amp;rsquo; changes
for validation, and it is the tool the OpenStack community recommends for
working with Gerrit-based projects. ag, on the other hand, is my way of
handling the lack of an IntelliSense-like feature in Vim. It&amp;rsquo;s a faster version
of &lt;code&gt;awk&lt;/code&gt; that also takes things like gitignore files into account. I use this
to search for function calls etc. I plan to eventually try something like
&lt;a href=&#34;https://github.com/davidhalter/jedi&#34;&gt;Jedi&lt;/a&gt; but I just haven&amp;rsquo;t got around to this yet.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/how-i-work-5.png&#34; alt=&#34;Screenshot of ag in tmux&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;ag is fast and pretty&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;Finally, debugging, where necessary, is possible through &lt;a href=&#34;https://docs.python.org/2/library/pdb.html&#34;&gt;pdb&lt;/a&gt; and the odd
post to the mailing list is made using &lt;a href=&#34;http://www.mutt.org/&#34;&gt;mutt&lt;/a&gt;. pdb, like many of these
tools, does take a bit of time to get your head around, but, once up and
running, proves itself worth the effort. mutt has a similarly large learning
curve, but it doesn&amp;rsquo;t mess up the formatting of emails half as bad as Outlook
and its threading actually works.&lt;/p&gt;

&lt;h2 id=&#34;future-plans&#34;&gt;Future Plans&lt;/h2&gt;

&lt;p&gt;There are a couple of tools that have been recommended to me, that I just
haven&amp;rsquo;t got around to trying yet.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dolph/next-review&#34;&gt;git-next&lt;/a&gt;: Developed by the awesome Dolph Matthews, this simple
tool should be configured with your favourite OpenStack project. Once done, you
can run it provide you with the next patch that you should review.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/openstack/gertty&#34;&gt;gertty&lt;/a&gt;: This is another OpenStack-provided project. This tool
provides a CLI for Gerrit tool, and allows you to do things like review code
offline. The latter feature isn&amp;rsquo;t so useful when working remotely all the time,
but if/when I start developing locally, I&amp;rsquo;ll be sure to use this.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/davidhalter/jedi&#34;&gt;Jedi&lt;/a&gt;: As mentioned above, how I navigate the code base could do with
a bit of work. Jedi brings autocomplete and some other stuff to editors like
Vim.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/pycharm/&#34;&gt;PyCharm&lt;/a&gt;: This is another one to throw in the &amp;ldquo;if I ever develop
locally&amp;rdquo; bag. I don&amp;rsquo;t use this now, but if it becomes an option then I&amp;rsquo;ll
definitely try it. I do wish the open source alternatives weren&amp;rsquo;t quite
so&amp;hellip;Java&amp;rsquo;y though.&lt;/li&gt;
&lt;li&gt;???: Who knows what else I&amp;rsquo;ll discover in the coming years?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;bonus-ssh-configuration&#34;&gt;Bonus: SSH Configuration&lt;/h2&gt;

&lt;p&gt;How I actually connect to the machines is probably worth calling out also. For
this, I use the PuTTY family of tools. To begin with, I have
&lt;a href=&#34;https://github.com/FauxFaux/PuTTYTray&#34;&gt;PuTTYTray&lt;/a&gt; installed and pinned to my taskbar to enable quick
access to some tools in the suite (&lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html&#34;&gt;PuTTY, Pageant, PuTTYGen&lt;/a&gt;).&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/how-i-work-6.png&#34; alt=&#34;Screenshot of PuTTYTray&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;PuTTYTray in action&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;The out-of-the-box experience for PuTTY itself is rather poor, so I rely on the
&lt;a href=&#34;https://github.com/jblaine/solarized-and-modern-putty&#34;&gt;Solarized Modern PuTTY Defaults project&lt;/a&gt; to bring things into the
21st century.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/how-i-work-7.png&#34; alt=&#34;Screenshot of PuTTY&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Pretty colours. Not so pretty test results.&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;I don&amp;rsquo;t fancy typing in a password each time, so I &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-use-ssh-keys-with-putty-on-digitalocean-droplets-windows-users&#34;&gt;generate SSH keys using
Pageant&lt;/a&gt;, then I make sure Pageant &lt;a href=&#34;http://blog.shvetsov.com/2010/03/making-pageant-automatically-load-keys.html&#34;&gt;starts automatically&lt;/a&gt;
each time I boot my machine. I&amp;rsquo;ll probably do a more in-depth write up of this
process at some point.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configuring ZNC with HexChat</title>
      <link>https://that.guru/blog/znc-sasl-server-pass/</link>
      <pubDate>Sun, 26 Jun 2016 14:00:39 +0100</pubDate>
      
      <guid>https://that.guru/blog/znc-sasl-server-pass/</guid>
      <description>

&lt;h1 id=&#34;configuring-znc-with-hexchat&#34;&gt;Configuring ZNC with HexChat&lt;/h1&gt;

&lt;p&gt;I recently set up ZNC instance to capture whatever I may miss when not
connected to any of the many &lt;a href=&#34;https://wiki.openstack.org/wiki/IRC&#34;&gt;OpenStack IRC&lt;/a&gt; channels. One
tricky part of this configuration was my use of multiple authentication layers.
I have ZNC configured to use a server password, but I also have my nick
&lt;a href=&#34;https://freenode.net/kb/answer/registration&#34;&gt;registered on freenode&lt;/a&gt; and I would like to use
&lt;a href=&#34;https://freenode.net/kb/answer/sasl&#34;&gt;SASL&lt;/a&gt; to authenticate this. It turns out that this is
relatively easy to do.&lt;/p&gt;

&lt;h2 id=&#34;configure-server-password-pass-authentication&#34;&gt;Configure server password (/PASS) authentication&lt;/h2&gt;

&lt;p&gt;You should first configure the connection to your ZNC server. Create a new
server profile (&lt;em&gt;HexChat&lt;/em&gt; &amp;gt; &lt;em&gt;Network List&lt;/em&gt;, or &lt;code&gt;&amp;lt;Ctrl&amp;gt;&lt;/code&gt; + &lt;code&gt;S&lt;/code&gt;) and
configure it like so:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/znc-sasl-server-pass-1.png&#34;  /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Configuring server password authentication&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;



&lt;p&gt;Most of this configuration doesn&amp;rsquo;t differ from the many guides available on
configuring HexChat with ZNC. I&amp;rsquo;m using SSL, so I enable that (and accept my
&amp;ldquo;invalid&amp;rdquo;, self-signed key), and I select this as the server to automatically
connect to when I open HexChat. The interesting bit is the &lt;code&gt;Server Password
&amp;lt;/PASS password&lt;/code&gt; section. In here, I have my username and server password
stored in format &lt;code&gt;[username]:[password]&lt;/code&gt;, e.g. &lt;code&gt;admin:password&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once done, I also need to configure a channels you want to connect to on the
&lt;em&gt;Autojoin channels&lt;/em&gt; tab:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/znc-sasl-server-pass-2.png&#34;  /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Configuring autojoin channels&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;



&lt;p&gt;I&amp;rsquo;m mostly concerned with &lt;code&gt;#openstack-xxx&lt;/code&gt; channels, but your configuration
will differ.&lt;/p&gt;

&lt;h2 id=&#34;configure-sasl-authentication&#34;&gt;Configure SASL authentication&lt;/h2&gt;

&lt;p&gt;Now we should be able to connect to the ZNC server without gettings an &lt;code&gt;Invalid
password&lt;/code&gt; errors. However, looking at the logs for the &lt;em&gt;freenode&lt;/em&gt; server
connection, we can see that we&amp;rsquo;re being asked to authenticate our registered
nick:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TODO&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Time for SASL. Many of these steps are documented on the &lt;a href=&#34;http://wiki.znc.in/Sasl&#34;&gt;ZNC wiki&lt;/a&gt;,
but they&amp;rsquo;re documented here for posterity.&lt;/p&gt;

&lt;p&gt;First, &lt;a href=&#34;http://wiki.znc.in/Modules#Managing_Modules&#34;&gt;load the module&lt;/a&gt; on ZNC:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/msg *status loadmodule sasl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, set the mechanism. We use &lt;code&gt;PLAIN&lt;/code&gt; (plaintext), which is a-OK as we&amp;rsquo;re
using SSL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/msg *sasl mechanism PLAIN
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, supply your username and password:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/msg *sasl set &amp;lt;username&amp;gt; &amp;lt;password&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That should be the end the need to run pesky &lt;code&gt;nickserv&lt;/code&gt; commands.&lt;/p&gt;

&lt;h2 id=&#34;wrap-up&#34;&gt;Wrap up&lt;/h2&gt;

&lt;p&gt;We now have authentication against the server, using a server password, and
authentication against the nickserv, using SASL. Pretty much hassle free.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>