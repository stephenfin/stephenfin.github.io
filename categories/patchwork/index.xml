<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>patchwork on Stephen Finucane (Fin-oo-can)</title>
    <link>https://that.guru/categories/patchwork/</link>
    <description>Recent content in patchwork on Stephen Finucane (Fin-oo-can)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-IE</language>
    <lastBuildDate>Sun, 12 Feb 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://that.guru/categories/patchwork/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Patchwork and CI in a Tree</title>
      <link>https://that.guru/blog/patchwork-and-ci-in-a-tree/</link>
      <pubDate>Sun, 12 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://that.guru/blog/patchwork-and-ci-in-a-tree/</guid>
      <description>&lt;p&gt;This has been a long time in the works.&lt;/p&gt;
&lt;p&gt;With the upcoming release of &lt;a href=&#34;https://github.com/getpatchwork/patchwork/&#34;&gt;Patchwork&lt;/a&gt; 2.0, Patchwork will provides first
class support for series, or collections of patches, and expose these (and much
more besides) over a new REST API. Coupled with the &lt;a href=&#34;https://github.com/getpatchwork/patchwork/releases/tag/v1.1.0&#34;&gt;Check support added in
1.1&lt;/a&gt;, we will be able to use Patchwork with continuous integration and
automated testing tools like Jenkins to validate projects using the mailing
list workflow.&lt;/p&gt;
&lt;p&gt;Below is the result of my own experiments coupling Patchwork with Jenkins.  Be
aware that this represents but the very basics of what one can do with this
functionality. However, I aim to build upon this later and this should still
serve to illustrate most of the key concepts. An even simpler guide will be
available in the Patchwork documentation shortly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This guide has been updated since publication to reflect the changes
found in Patchwork 2.0.&lt;/p&gt;
&lt;h2 id=&#34;initializing-services&#34;&gt;Initializing Services&lt;/h2&gt;
&lt;p&gt;Before we begin, we need to install both Patchwork and Jenkins. I chose to use
Docker for this, though Patchwork can also be installed manually.&lt;/p&gt;
&lt;h3 id=&#34;patchwork&#34;&gt;Patchwork&lt;/h3&gt;
&lt;p&gt;First up, Patchwork. Clone the Patchwork repo and bring up the project, as
described in the &lt;a href=&#34;https://patchwork.readthedocs.io/en/latest/development/installation/&#34;&gt;docs&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git clone https://github.com/getpatchwork/patchwork
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd patchwork
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ docker-compose build
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ docker-compose up
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Leave this running and jump to another tab.&lt;/p&gt;
&lt;p&gt;You should also create an superuser that you can use manage the instance. I
used &lt;code&gt;admin&lt;/code&gt; and &lt;code&gt;tester&lt;/code&gt; for username and password, respectively:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ docker-compose run --rm web python manage.py createsuperuser
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once initialized, you should be able to browse Patchwork at &lt;code&gt;localhost:8000&lt;/code&gt;.
A default &lt;code&gt;Patchwork&lt;/code&gt; project will have been created, which we will use for
this demo.&lt;/p&gt;
&lt;h3 id=&#34;jenkins&#34;&gt;Jenkins&lt;/h3&gt;
&lt;p&gt;Now for Jenkins. We&amp;rsquo;ll follow the instructions provided on the the &lt;a href=&#34;https://hub.docker.com/_/jenkins/&#34;&gt;Docker
Hub&lt;/a&gt; page. Run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ docker pull jenkins
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ docker run --name myjenkins -p 8080:8080 -p 50000:50000 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -v /var/jenkins_home jenkins
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Browse to the Jenkins URL (&lt;code&gt;localhost:8080&lt;/code&gt;), where you will be asked to
authenticate, create a user, and select which plugins to install. I used
&lt;code&gt;admin&lt;/code&gt; and &lt;code&gt;tester&lt;/code&gt; for username and password once again, then chose the
following plugins:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Git plugin&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Parameterized Trigger plugin&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Timestamper&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that you can install additional plugins if necessary but these are the
bare minimum.&lt;/p&gt;
&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;Once this step is completed, both services should be accessible: the Patchwork
instance at &lt;code&gt;localhost:8000&lt;/code&gt; and the Jenkins instance at &lt;code&gt;localhost:8080&lt;/code&gt;.
Both instances should have a user account configured, using the &lt;code&gt;admin&lt;/code&gt;
username and &lt;code&gt;tester&lt;/code&gt; password. Finally, the Patchwork instance should have the
default &lt;code&gt;Patchwork&lt;/code&gt; project. Record all of these details for future steps.&lt;/p&gt;
&lt;h2 id=&#34;configuring-services&#34;&gt;Configuring Services&lt;/h2&gt;
&lt;p&gt;Once the services are initialized, we need to configure them.&lt;/p&gt;
&lt;h3 id=&#34;patchwork-1&#34;&gt;Patchwork&lt;/h3&gt;
&lt;p&gt;There isn&amp;rsquo;t really much initial configuration necessary for Patchwork. You
should already have a user account created and Patchwork will use the default
default &lt;code&gt;Patchwork&lt;/code&gt; project. One step that &lt;em&gt;is&lt;/em&gt; necessary is to assign your
user, &lt;code&gt;admin&lt;/code&gt; in this case, as a maintainer of the &lt;code&gt;Patchwork&lt;/code&gt; project. This is
necessary to ensure we can upload test results, change the state of patches
etc. You can do this using the admin console:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://localhost:8000/admin/auth/user/1/change/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We also need to extract the IP address of the Docker container running the
Patchwork instance. This is necessary so Jenkins can communicate with the
instance. You can extract the IP address using &lt;code&gt;docker inspect&lt;/code&gt;, per &lt;a href=&#34;http://stackoverflow.com/a/20686101/613428&#34;&gt;this
StackOverflow answer&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ docker inspect &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -f &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    &amp;lt;CONTAINER_NAME_OR_ID&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;where &lt;code&gt;&amp;lt;CONTAINER_NAME_OR_ID&amp;gt;&lt;/code&gt; refers to the active &lt;code&gt;patchwork_web&lt;/code&gt; container.
This will return an IP address, in my case &lt;code&gt;172.17.0.3&lt;/code&gt;. Ensure you can access
the Patchwork instance via this address (including port) - for example at
&lt;code&gt;172.17.0.3:8000&lt;/code&gt; - then store this IP for later.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://that.guru/media/patchwork-and-ci-in-a-tree-1.png&#34;
         alt=&#34;Screenshot of newly configured Patchwork instance&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;A Patchwork instance fresh out of the oven&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;jenkins-1&#34;&gt;Jenkins&lt;/h2&gt;
&lt;p&gt;Before beginning, you should extract your user&amp;rsquo;s &amp;ldquo;token&amp;rdquo;. We will use this to
talk to the Jenkins API in a later step. Browse to your user settings to obtain
this and copy it down somewhere:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://localhost:8080/user/admin/configure
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you have this token stored, we can move onto configuring the Jenkins job.
We&amp;rsquo;re going to make heavy use of &lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/Parameterized+Build&#34;&gt;Parameterized Builds&lt;/a&gt; and the &lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/Remote+access+API&#34;&gt;Remote
Access API&lt;/a&gt;, both of which are part of the default Jenkins install.&lt;/p&gt;
&lt;p&gt;Create a new &amp;ldquo;freestyle&amp;rdquo; project, setting the project name and description to
something useful. You also need to define two parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;MBOX_URL&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The URL to download the patch from.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;CHECK_URL&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The URL to report the test result to.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While we could expand the available parameters to avoid hard-coding variables
and make the job more flexible, we&amp;rsquo;re going to keep it simple for now.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://that.guru/media/patchwork-and-ci-in-a-tree-2.png&#34;
         alt=&#34;Screenshot of General configuration&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;General&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Next, configure Jenkins to check out the code from the project of choice in the
&lt;em&gt;Source Code Management&lt;/em&gt; section. We&amp;rsquo;re testing Patchwork, so we&amp;rsquo;re going to
use Git and the GitHub repo. For reference, the Patchwork repo URL is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://github.com/getpatchwork/patchwork.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You don&amp;rsquo;t need to specify credentials, nor should you change the default branch
specifier. You should, however, enable the &lt;em&gt;Clean before checkout&lt;/em&gt; behavior, to
ensure old tests don&amp;rsquo;t corrupt newer tests.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://that.guru/media/patchwork-and-ci-in-a-tree-3.png&#34;
         alt=&#34;Screenshot of Source Code Management configuration&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;Source Code Management&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;For the &lt;em&gt;Build Triggers&lt;/em&gt; section, we&amp;rsquo;re going to trigger this remotely using
another script. Simply tick the relevant box and set an &amp;ldquo;authentication token&amp;rdquo;.
Use &lt;code&gt;hello-world&lt;/code&gt; as a token.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://that.guru/media/patchwork-and-ci-in-a-tree-4.png&#34;
         alt=&#34;Screenshot of Build Triggers configuration&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;Build Triggers&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The &lt;em&gt;Build Environment&lt;/em&gt; section can be mostly ignored. Simply enable timestamps
in the build output.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://that.guru/media/patchwork-and-ci-in-a-tree-5.png&#34;
         alt=&#34;Screenshot of Build Environment configuration&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;Build Environment&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Now for the juicy bit: &lt;em&gt;Build&lt;/em&gt;. You&amp;rsquo;ll want to execute four steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Tell Patchwork (via the API) that we&amp;rsquo;re kicking off the build&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download and apply the patch&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run the test(s)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Report the end result to Patchwork (again, via the API)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A script provided below will do the job for you. This script will use the
username, password and IP address of the Patchwork instance, which we got
previously. Add a new &amp;ldquo;Execute Shell&amp;rdquo; build step to the &lt;em&gt;Build&lt;/em&gt; section. Paste
the script provided below there, updating the IP address or credentials where
necessary:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;##################################################&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Constants&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;##################################################&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Patchwork credentials&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;readonly PATCHWORK_URL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;172.17.0.3:8000&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;readonly PATCHWORK_USER&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;admin&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;readonly PATCHWORK_PASS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tester&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;##################################################&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Functions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;##################################################&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; submit_check&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Submit a check to Patchwork&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Args:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#   $1 - the state to register&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#   $2 - an optional description&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  state&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$1&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  description&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$2&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  curl -X POST &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$PATCHWORK_USER&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;$PATCHWORK_PASS&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -F &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;state=&lt;/span&gt;$state&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -F &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;target_url=&lt;/span&gt;$BUILD_URL&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -F &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;context=&lt;/span&gt;$JOB_NAME&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -F &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;description=&lt;/span&gt;$description&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$CHECK_URL&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;##################################################&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;##################################################&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Sanity checks&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MBOX_URL=&lt;/span&gt;$MBOX_URL&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CHECK_URL=&lt;/span&gt;$CHECK_URL&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;JOB_NAME=&lt;/span&gt;$JOB_NAME&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;BUILD_URL=&lt;/span&gt;$BUILD_URL&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Notify the user that the build is starting&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;submit_check &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pending&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Navigate to the Patchwork directory&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd patchwork &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; exit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Configure fake git credentials so we can use git-am&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git config user.name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;John Doe&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git config user.email &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;john.doe@example.org&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Simply download and apply the mbox to ensure it still applies&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ! curl &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$MBOX_URL&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; | git am -3; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  submit_check &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fail&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  exit &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  submit_check &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;success&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  exit &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You&amp;rsquo;ll notice we&amp;rsquo;re really not taking advantage of Jenkins&amp;rsquo; power here but
bear with me: these are baby steps.&lt;/p&gt;
&lt;p&gt;Once done, you should have something like the following:&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://that.guru/media/patchwork-and-ci-in-a-tree-6.png&#34;
         alt=&#34;Screenshot of Build configuration&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;Build&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Finally, the &lt;em&gt;Post-build Actions&lt;/em&gt;. I didn&amp;rsquo;t make use of this section, though
I&amp;rsquo;m sure the above script could be broken up to make use of this. Some other
time, perhaps.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&#34;https://that.guru/media/patchwork-and-ci-in-a-tree-7.png&#34;
         alt=&#34;Screenshot of Post-build Actions&#34;/&gt;&lt;figcaption&gt;
            &lt;h4&gt;Post-build Actions&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;summary-1&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;Once this step is complete, you should have configured a basic Jenkins job that
can be kicked off using the API. This job uses the credentials and IP of the
Patchwork instance. You&amp;rsquo;ll also have a token for your Jenkins user, which we
will use to talk to the Jenkins API.&lt;/p&gt;
&lt;h2 id=&#34;poll-patchwork-and-kick-of-jenkins-builds&#34;&gt;Poll Patchwork and Kick of Jenkins Builds&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;re going to use a rather simple Bash script to kick of the Jenkins build. We
could do the exact same thing in Python (it would likely be more robust), but
Bash makes for a good first pass. The script consists of a number of different
parts: all should be combined to produce the final scripts.&lt;/p&gt;
&lt;p&gt;Note that the below script(s) makes use of the &lt;code&gt;jq&lt;/code&gt; tool to parse JSON. This is
not part of the default install on many distros, and may need to be installed
manually. You should do this now. For example, on Fedora 25 run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo dnf install jq
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First up in the script: Jenkins and Patchwork credentials. We&amp;rsquo;re going to
hard-code these for now, using the Jenkins username and token and Patchwork
username and password we configured/collected earlier. We&amp;rsquo;re also going to
create some function stubs, which we will populate later.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;##################################################&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Constants&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;##################################################&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Patchwork credentials&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;readonly PATCHWORK_URL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;172.17.0.3:8000&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;readonly PATCHWORK_USER&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;admin&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;readonly PATCHWORK_PASS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tester&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Jenkins credentials&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;readonly JENKINS_URL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;localhost:8080&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;readonly JENKINS_USER&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;admin&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;readonly JENKINS_TOKEN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;962ccd82ce467804ec7e465602381d12&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;readonly JENKINS_CRUMB&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;curl -s &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;JENKINS_USER&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;JENKINS_TOKEN&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;JENKINS_URL&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,\&amp;#34;:\&amp;#34;,//crumb)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Job configuration&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;readonly JOB_NAME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;checkstyle&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;readonly JOB_TOKEN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello-world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;##################################################&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Functions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;##################################################&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; submit_job&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# TODO&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that Jenkins requires that you supply a &amp;ldquo;crumb&amp;rdquo; with all requests to
prevent CSRF, so we gather that now. More information is provided in &lt;a href=&#34;http://stackoverflow.com/a/38314369/613428&#34;&gt;this
StackOverflow question&lt;/a&gt; and in the &lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/Remote+access+API&#34;&gt;remote access API wiki&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next, the polling of &lt;code&gt;/events&lt;/code&gt;. This is an endpoint in the Patchwork REST API
that reports events related to elements like patches, series or checks. A list
of all supported events is &lt;a href=&#34;#&#34;&gt;provided in the docs&lt;/a&gt; but there are two that we
care about here: &lt;code&gt;patch-created&lt;/code&gt; and &lt;code&gt;patch-complete&lt;/code&gt;. Per the docs, the first
of these occurs when a patch is added to Patchwork. The second, meanwhile,
occurs when all dependencies (if any) are met. This means that if a two patch
series is sent to Patchwork and the second patch is received first, only the
&lt;code&gt;patch-created&lt;/code&gt; event will be created for this patch. Only when the first patch
in that series (the second patch&amp;rsquo;s only dependency) is received will the
&lt;code&gt;patch-completed&lt;/code&gt; be raised for the second patch (the &lt;code&gt;patch-created&lt;/code&gt; and
&lt;code&gt;patch-completed&lt;/code&gt; events will be raised at the same time for the first patch,
given that it has no dependencies per se).&lt;/p&gt;
&lt;p&gt;The below section of the script deals with reading these events from the
Patchwork API.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;##################################################&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;##################################################&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Pull in latest events&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;response&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;curl -s -u &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$PATCHWORK_USER&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;$PATCHWORK_PASS&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -H &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Host: &lt;/span&gt;$PATCHWORK_URL&lt;span style=&#34;color:#e6db74&#34;&gt; \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  http://&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PATCHWORK_URL&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/api/1.0/events/?category=patch-completed)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The use of the &lt;code&gt;Host:&lt;/code&gt; header is important - without this, responses
will be returned using &lt;code&gt;localhost&lt;/code&gt; as the host name. This won&amp;rsquo;t be usable from
another container.&lt;/p&gt;
&lt;p&gt;The response from the &lt;code&gt;/events&lt;/code&gt; API will include links to the created patch
and, for the &lt;code&gt;patch-completed&lt;/code&gt; event, the patch series which is providing the
dependencies. We must retrieve the patch and series from the Patchwork API.
Note that, in a future version of the API, we should support an &lt;code&gt;embed&lt;/code&gt;
parameter that would allow us to embed the patch and series in the response and
avoid these additional requests.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Extract patch and series URLs from each event, and create jobs based on&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# these&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;patches_series&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$response&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; | jq -rc &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.[] | .payload.patch.url + &amp;#34;,&amp;#34; + .payload.series.id&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$patches_series&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; | &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; IFS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;, read -r patch series; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Submitting job&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Patch URL: &lt;/span&gt;$patch&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Series ID: &lt;/span&gt;$series&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  submit_job &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$patch&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$series&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once we have the &lt;code&gt;patch_url&lt;/code&gt; and &lt;code&gt;series_id&lt;/code&gt;, we can submit the job to Jenkins.
We&amp;rsquo;re going to do this via a call to the &lt;code&gt;submit_job&lt;/code&gt; function, which we
already defined a stub for. Implementing this function is rather simple, given
that we have already configured the job and gathered all required parameters
and credentials. Replace the above stub with the below function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; submit_job&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  local patch_url
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  local series_id
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  local mbox_url
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  local build_url
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  patch&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;curl &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$1&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  series_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$2&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  mbox_url&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;echo $patch | jq -rc &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.mbox&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;?series=&lt;/span&gt;$series_id&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  check_url&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;echo $patch | jq -rc &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.checks&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  build_url&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://&lt;/span&gt;$JENKINS_USER&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;$JENKINS_TOKEN&lt;span style=&#34;color:#e6db74&#34;&gt;@&lt;/span&gt;$JENKINS_URL&lt;span style=&#34;color:#e6db74&#34;&gt;/job/&lt;/span&gt;$JOB_NAME&lt;span style=&#34;color:#e6db74&#34;&gt;/build&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Submitting job: &lt;/span&gt;$build_url&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Job parameters: PATCH_MBOX_URL=&lt;/span&gt;$mbox_url&lt;span style=&#34;color:#e6db74&#34;&gt;, CHECK_URL=&lt;/span&gt;$check_url&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  curl -X POST &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -H &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$JENKINS_CRUMB&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --data token&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$JOB_TOKEN&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --data-urlencode json&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      &amp;#34;parameter&amp;#34;: [
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        {&amp;#34;name&amp;#34;:&amp;#34;MBOX_URL&amp;#34;, &amp;#34;value&amp;#34;:&amp;#34;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$mbox_url&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;},
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        {&amp;#34;name&amp;#34;:&amp;#34;CHECK_URL&amp;#34;, &amp;#34;value&amp;#34;:&amp;#34;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$check_url&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      ]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    }&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$build_url&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Job submitted&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are a two important points to note related to how the Jenkins API works:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The Jenkins API requires parameters be passed via a JSON body rather than
than individual fields. This differs from Patchwork.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Jenkins API requires the inclusion of a &lt;em&gt;crumb&lt;/em&gt; header, by way of the
&lt;code&gt;JENKINS_CRUMB&lt;/code&gt; that we stored earlier. This is intended to prevent CSRF
attacks.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More information on the Jenkins API can be found in &lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/Remote+access+API&#34;&gt;remote access API
wiki&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;add-patches-to-patchwork&#34;&gt;Add Patches to Patchwork&lt;/h2&gt;
&lt;p&gt;Once done, it&amp;rsquo;s time to load in some patches. In practice, this would happen
automatically but, as this is for testing only, we&amp;rsquo;re going to once again
follow the &lt;a href=&#34;https://patchwork.readthedocs.io/en/latest/development/installation/#import-mailing-list-archives&#34;&gt;Patchwork documentation&lt;/a&gt; and make use Mailman archives. I
downloaded the archives for January 2017, like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ curl https://gist.github.com/stephenfin/d13183dad40f8c472234cb26777355c3 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    | gunzip &amp;gt; sample-series.mbox
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that this &lt;em&gt;must&lt;/em&gt; be downloaded to the &lt;code&gt;patchwork&lt;/code&gt; directory, else it will
not be accessible from the Docker containers.&lt;/p&gt;
&lt;p&gt;Once downloaded, use the &lt;code&gt;parsearchive&lt;/code&gt; tool provided with Patchwork to load
the archive:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ docker-compose run web python manage.py parsearchive &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --list-id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;patchwork.ozlabs.org &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    sample-series.mbox
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Keep an eye on the &lt;code&gt;/events&lt;/code&gt; URL - you should notice a few new patch events.&lt;/p&gt;
&lt;h2 id=&#34;go-time&#34;&gt;Go Time&lt;/h2&gt;
&lt;p&gt;Run the script on your host and watch the end result. That script will read the
events stream, filter the events we care about, and kick of Jenkins builds for
the patches you just added. Jenkins will then take over, reporting that it is
starting testing to Patchwork, actually running the tests, then reporting the
end result to Patchwork. You should be able to see the jobs running in Jenkins,
and the resulting checks reported in the API.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://localhost:8080/job/checkstyle/
http://localhost:8000/api/1.0/events/?category=patch-completed
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;summary-2&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;And so completes our demo. It&amp;rsquo;s rather basic, involving a lot of &amp;ldquo;shortcuts&amp;rdquo;
and tinkering. However, it does demonstrate the coming together of many of the
features available in the next version of Patchwork, namely:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Checks&lt;/em&gt;, available in &lt;a href=&#34;https://github.com/getpatchwork/patchwork/&#34;&gt;Patchwork 1.1&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;REST API&lt;/em&gt;, available in Patchwork 2.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Series&lt;/em&gt;, available in Patchwork 2.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Events&lt;/em&gt;, available in Patchwork 2.0&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Not all of these features are required for building an automated testing
system. For example, if you didn&amp;rsquo;t want to test series or were happy testing
individual patches, you could skip the series support. Likewise, you don&amp;rsquo;t have
to report test results to Patchwork and could poll the &lt;code&gt;/patches&lt;/code&gt; or &lt;code&gt;/series&lt;/code&gt;
endpoints instead of the &lt;code&gt;/events&lt;/code&gt; endpoint to find patches to test.  In my
opinion though, this represents a great starting point for building an
sustainable, stable, and ultimately beneficial testing infrastructure for
projects using a mailing list workflow.&lt;/p&gt;
&lt;h2 id=&#34;whats-next&#34;&gt;What&amp;rsquo;s Next&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A better permissions model for Patchwork users&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/HTTP_ETag&#34;&gt;ETag&lt;/a&gt; support, allowing us to minimize requests to the API&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Better upstream documentation&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Mailing List, Meet CI</title>
      <link>https://that.guru/talks/mailing-list-meet-ci/</link>
      <pubDate>Sun, 05 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://that.guru/talks/mailing-list-meet-ci/</guid>
      <description>&lt;p&gt;This talk was presented as a lightning talk at &lt;a href=&#34;https://fosdem.org/2017/schedule/event/patchwork_jenkins/&#34;&gt;FOSDEM 2017&lt;/a&gt;. It described
the CI features provided in Patchwork 2.0, which was at the time unreleased. I
wrote a &lt;a href=&#34;https://that.guru/blog/patchwork-and-ci-in-a-tree/&#34;&gt;blog post&lt;/a&gt; to accompany the talk which is well worth reading
(updated since to reflect changes in Patchwork 2.0 final).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What does it take to implement continuous integration-style automated testing
into a mailing list-driven software project? Not a lot, actually. In this
talk, we demonstrate how a simple but easily scaled testing system can be
implemented for a such a project through the combination of Patchwork, the
web-based patch tracking system, and open source CI tools such as Jenkins.&lt;/p&gt;
&lt;p&gt;At FOSDEM 2016, developers working on Patchwork, the web-based patch tracking
system, demonstrated some of the ongoing work in Patchwork. This work ranged
from UI improvements to new features and APIs but, collectively, it had the
goal of enabling automated testing functionality for software projects
developed via mailing lists. The Patchwork developers have been busy since
then and the application, in widespread use since 2008, recently hit the 2.0
milestone, marking this functionality as complete.&lt;/p&gt;
&lt;p&gt;Projects such as the Dataplane Development Kit (DPDK) have quickly adopted
the features that 2.0 brings, using them to enable real time, automated
testing of patches sent to the mailing list. This automated testing provides
a mechanism for developers to not only sidestep the more perfunctory of
tasks, such as coding standard checks, but also to test changes in
environments that they may not have at their disposal, such as differing
hardware or OS configurations. As seen in projects pairing open source code
collaboration tools like Gerrit or Rietveld with CI systems such as Jenkins
or BuildBot, this continuous testing can provide huge improvements in
developer velocity.&lt;/p&gt;
&lt;p&gt;In this talk, we demonstrate how to build a basic &amp;ldquo;checkstyle&amp;rdquo; testing system
through a combination of Patchwork and an off-the-shelf, open source CI
system. This system will retrieve patches and dependencies, apply and test
them, and report the results back to both Patchwork and a separate mailing
list. This configuration demonstrates the best of Patchwork&amp;rsquo;s new features,
and can be easily extended to cover far more complex testing scenarios.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;ce06b0e45f1e460b9fc3d5d96e65ab31&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;


</description>
    </item>
    
    <item>
      <title>A New Patchwork</title>
      <link>https://that.guru/talks/a-new-patchwork/</link>
      <pubDate>Sun, 31 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://that.guru/talks/a-new-patchwork/</guid>
      <description>&lt;p&gt;This was my first ever presentation to an audience that wasn&amp;rsquo;t entirely my
colleagues or fellow students. It was delivered as a lightning talk at &lt;a href=&#34;https://fosdem.org/2016/schedule/event/patchwork/&#34;&gt;FOSDEM
2016&lt;/a&gt; and focused on the work that had been done to bring &lt;a href=&#34;http://jk.ozlabs.org/projects/patchwork/&#34;&gt;Patchwork&lt;/a&gt;
up-to-date, after it had languished for a couple of years.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Mailing lists are the bedrock of many open source software projects, and have
been so since the early days of the Internet. However, mailing lists can
struggle to compete with code collaboration tools like Gerrit and Rietveld,
many of which offer features such as integration with automated testing tools
and patch tracking. How can such features be integrated into existing,
mailing list-based projects like the Linux kernel or DPDK? The presenter
reports on the ongoing work around the widely-deployed &amp;lsquo;patchwork&amp;rsquo; tool to do
just this.&lt;/p&gt;
&lt;p&gt;Tracking of patches between development mailing lists and automated testing
tools can be accomplished using patchwork. patchwork provides a web interface
for patches submitted to mailing lists and presents them alongside any
comments. patchwork also supports the tracking of the state of patches, be
they Accepted, Rejected or Under Review. By design, patchwork is not intended
to replace mailing lists but rather supplement them: these features are
entirely optional, but where used can help ease the burden on maintainers by
removing the need to perform tedious, time-consuming and low-value tasks like
manual sorting. patchwork is already widely deployed for many projects, and
instances can be found on kernel.org, dpdk.org and openembedded.org, to name
but a few. There are also many projects, including Open vSwitch and QEMU,
that can be found on ozlabs.org, which is maintained by the original author
of patchwork.&lt;/p&gt;
&lt;p&gt;This talk outlines the ongoing work to supplement development mailing lists
with web-based workflows using patchwork. We demonstrate how features such as
continuous integration support, automated patch and series tracking and a
vastly expanded API help position the combination of the Mailing List and
patchwork as a viable, feature-competitive alternative to tools such as
Gerrit or Rietveld. We also detail some of the complexities of structuring
the inherently unstructured data found on mailing lists. How do I identify a
series of patches, for example? How do identify a reply to a patch? How do I
identify a patch itself?&lt;/p&gt;
&lt;p&gt;This talk be of particular interest to testers of open source, mailing
list-based projects such as the Linux kernel, QEMU, DPDK or Open vSwitch.
These users will be able take advantage of features like support for
continuous integration servers and series tracking to develop automated,
distributed testing infrastructures. Communities like OpenStack have shown
that such infrastructures are critical for delivering software faster while
reducing risk and maintenance cost. Such an infrastructure is currently being
developed for the DPDK community, and it is easy to envision a similar
roll-out for other projects with similar requirements.&lt;/p&gt;
&lt;p&gt;It will also be of interest to the developers of these projects. These
developers can already use patchwork as a tool to track patch backlogs,
maintain personal TODO lists, or just browse submissions via a web UI/XML-RPC
API. However, the new features provide these users with functionality that
can help automate even more of the tedious yet necessary overhead tasks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;83af5ed2a4c646cba0ccba30955807f3&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;


</description>
    </item>
    
  </channel>
</rss>
