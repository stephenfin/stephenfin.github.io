<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stephen Finucane (Fin-oo-can)</title>
    <link>https://that.guru/index.xml</link>
    <description>Recent content on Stephen Finucane (Fin-oo-can)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-IE</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Sun, 12 Feb 2017 22:27:38 +0000</lastBuildDate>
    <atom:link href="https://that.guru/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Patchwork and CI in a tree</title>
      <link>https://that.guru/blog/patchwork-and-ci-in-a-tree/</link>
      <pubDate>Sun, 12 Feb 2017 22:27:38 +0000</pubDate>
      
      <guid>https://that.guru/blog/patchwork-and-ci-in-a-tree/</guid>
      <description>

&lt;p&gt;This has been a long time in the works.&lt;/p&gt;

&lt;p&gt;With the upcoming release of &lt;a href=&#34;https://github.com/getpatchwork/patchwork/&#34;&gt;Patchwork&lt;/a&gt; 2.0, Patchwork will provides first
class support for series, or collections of patches, and expose these (and much
more besides) over a new REST API. Coupled with the &lt;a href=&#34;https://github.com/getpatchwork/patchwork/releases/tag/v1.1.0&#34;&gt;Check support added in
1.1&lt;/a&gt;, we will be able to use Patchwork with continuous integration and
automated testing tools like Jenkins to validate projects using the mailing
list workflow.&lt;/p&gt;

&lt;p&gt;Below is the result of my own experiments coupling Patchwork with Jenkins.  Be
aware that this represents but the very basics of what one can do with this
functionality. However, I aim to build upon this later and this should still
serve to illustrate most of the key concepts. An even simpler guide will be
available in the Patchwork documentation shortly.&lt;/p&gt;

&lt;h2 id=&#34;initializing-services&#34;&gt;Initializing Services&lt;/h2&gt;

&lt;p&gt;Before we begin, we need to install both Patchwork and Jenkins. I chose to use
Docker for this, though Patchwork can also be installed using Vagrant or
manually.&lt;/p&gt;

&lt;h3 id=&#34;patchwork&#34;&gt;Patchwork&lt;/h3&gt;

&lt;p&gt;First up, Patchwork. Clone the Patchwork repo and bring up the project, as
described in the &lt;a href=&#34;https://patchwork.readthedocs.io/en/latest/development/installation/&#34;&gt;docs&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git clone https://github.com/getpatchwork/patchwork

$ cd patchwork
$ docker-compose build
$ docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should also create an superuser that you can use manage the instance. I
used &lt;code&gt;admin&lt;/code&gt; and &lt;code&gt;tester&lt;/code&gt; for username and password, respectively:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ docker-compose run web python manage.py createsuperuser
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once initialized, you should be able to browse Patchwork at &lt;code&gt;localhost:8000&lt;/code&gt;.
A default &lt;code&gt;Patchwork&lt;/code&gt; project will have been created, which we will use for
this demo.&lt;/p&gt;

&lt;h3 id=&#34;jenkins&#34;&gt;Jenkins&lt;/h3&gt;

&lt;p&gt;Now for Jenkins. We&amp;rsquo;ll follow the instructions provided on the the &lt;a href=&#34;https://hub.docker.com/_/jenkins/&#34;&gt;Docker
Hub&lt;/a&gt; page. Run:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ docker pull jenkins
$ docker run --name myjenkins -p 8080:8080 -p 50000:50000 \
    -v /var/jenkins_home jenkins
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Browse to the Jenkins URL (&lt;code&gt;localhost:8080&lt;/code&gt;), where you will be asked to
authenticate, create a user, and select which plugins to install. I used
&lt;code&gt;admin&lt;/code&gt; and &lt;code&gt;tester&lt;/code&gt; for username and password once again, then chose the
following plugins:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Git plugin&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Parameterized Trigger plugin&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Timestamper&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that you can install additional plugins if necessary but these are the
bare minimum.&lt;/p&gt;

&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Once this step is completed, both services should be accessible: the Patchwork
instance at &lt;code&gt;localhost:8000&lt;/code&gt; and the Jenkins instance at &lt;code&gt;localhost:8080&lt;/code&gt;.
Both instances should have a user account configured, using the &lt;code&gt;admin&lt;/code&gt;
username and &lt;code&gt;tester&lt;/code&gt; password. Finally, the Patchwork instance should have the
default &lt;code&gt;Patchwork&lt;/code&gt; project. Record all of these details for future steps.&lt;/p&gt;

&lt;h2 id=&#34;configuring-services&#34;&gt;Configuring Services&lt;/h2&gt;

&lt;p&gt;Once the services are initialized, we need to configure them.&lt;/p&gt;

&lt;h3 id=&#34;patchwork-1&#34;&gt;Patchwork&lt;/h3&gt;

&lt;p&gt;There isn&amp;rsquo;t really much initial configuration necessary for Patchwork. You
should already have a user account created and Patchwork will use the default
default &lt;em&gt;Patchwork&lt;/em&gt; project. One step that &lt;em&gt;is&lt;/em&gt; necessary is to assign your
user, &lt;code&gt;admin&lt;/code&gt; in this case, as a maintainer of the &lt;code&gt;Patchwork&lt;/code&gt; project. This is
necessary to ensure we can upload test results, change the state of patches
etc. You can do this using the admin console:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://localhost:8000/admin/auth/user/1/change/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also need to extract the IP address of the Docker container running the
Patchwork instance. This is necessary so Jenkins can communicate with the
instance. You can extract the IP address using &lt;code&gt;docker inspect&lt;/code&gt;, per &lt;a href=&#34;http://stackoverflow.com/a/20686101/613428&#34;&gt;this
StackOverflow answer&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ docker inspect -f &#39;{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}&#39; \
    &amp;lt;CONTAINER_NAME_OR_ID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where &lt;code&gt;&amp;lt;CONTAINER_NAME_OR_ID&amp;gt;&lt;/code&gt; refers to the active &lt;code&gt;patchwork_web&lt;/code&gt; container.
This will return an IP address, in my case &lt;code&gt;172.17.0.3&lt;/code&gt;. Ensure you can access
the Patchwork instance via this address (including port) - for example at
&lt;code&gt;172.17.0.3:8000&lt;/code&gt; - then store this IP for later.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/patchwork-and-ci-in-a-tree-1.png&#34; alt=&#34;Screenshot of newly configured Patchwork instance&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;A Patchwork instance fresh out of the oven&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h2 id=&#34;jenkins-1&#34;&gt;Jenkins&lt;/h2&gt;

&lt;p&gt;Before beginning, you should extract your user&amp;rsquo;s &amp;ldquo;token&amp;rdquo;. We will use this to
talk to the Jenkins API in a later step. Browse to your user settings to obtain
this and copy it down somewhere:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://localhost:8080/user/admin/configure
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you have this token stored, we can move onto configuring the Jenkins job.
We&amp;rsquo;re going to make heavy use of &lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/Parameterized+Build&#34;&gt;Parameterized Builds&lt;/a&gt; and the &lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/Remote+access+API&#34;&gt;Remote
Access API&lt;/a&gt;, both of which are part of the default Jenkins install.&lt;/p&gt;

&lt;p&gt;Create a new &amp;ldquo;freestyle&amp;rdquo; project, setting the project name and description to
something useful. You also need to define two parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;MBOX_URL&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The URL to download the patch from.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;CHECK_URL&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The URL to report the test result to.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While we could expand the available parameters to avoid hard-coding variables
and make the job more flexible, we&amp;rsquo;re going to keep it simple for now.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/patchwork-and-ci-in-a-tree-2.png&#34; alt=&#34;Screenshot of General configuration&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;General&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;Next, configure Jenkins to check out the code from the project of choice in the
&lt;em&gt;Source Code Management&lt;/em&gt; section. We&amp;rsquo;re testing Patchwork, so we&amp;rsquo;re going to
use Git and the GitHub repo. For reference, the Patchwork repo URL is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://github.com/getpatchwork/patchwork.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You don&amp;rsquo;t need to specify credentials, nor should you change the default branch
specifier. You should, however, enable the &lt;em&gt;Clean before checkout&lt;/em&gt; behavior, to
ensure old tests don&amp;rsquo;t corrupt newer tests.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/patchwork-and-ci-in-a-tree-3.png&#34; alt=&#34;Screenshot of Source Code Management configuration&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Source Code Management&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;For the &lt;em&gt;Build Triggers&lt;/em&gt; section, we&amp;rsquo;re going to trigger this remotely using
another script. Simply tick the relevant box and set an &amp;ldquo;authentication token&amp;rdquo;.
Use &lt;code&gt;hello-world&lt;/code&gt; as a token.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/patchwork-and-ci-in-a-tree-4.png&#34; alt=&#34;Screenshot of Build Triggers configuration&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Build Triggers&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;The &lt;em&gt;Build Environment&lt;/em&gt; section can be mostly ignored. Simply enable timestamps
in the build output.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/patchwork-and-ci-in-a-tree-5.png&#34; alt=&#34;Screenshot of Build Environment configuration&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Build Environment&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;Now for the juicy bit: &lt;em&gt;Build&lt;/em&gt;. You&amp;rsquo;ll want to execute four steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Tell Patchwork (via the API) that we&amp;rsquo;re kicking off the build&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Download and apply the patch&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run the test(s)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Report the end result to Patchwork (again, via the API)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A script provided below will do the job for you. This script will use the
username, password and IP address of the Patchwork instance, which we got
previously. Add a new &amp;ldquo;Execute Shell&amp;rdquo; build step to the &lt;em&gt;Build&lt;/em&gt; section. Paste
the script provided below there, updating the IP address or credentials where
necessary:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/usr/bin/env bash

##################################################
# Constants
##################################################

# Patchwork credentials

readonly PATCHWORK_URL=&amp;quot;172.17.0.3:8000&amp;quot;
readonly PATCHWORK_USER=&amp;quot;admin&amp;quot;
readonly PATCHWORK_PASS=&amp;quot;tester&amp;quot;

##################################################
# Functions
##################################################

function submit_check() {
  # Submit a check to Patchwork
  #
  # Args:
  #   $1 - the state to register
  #   $2 - an optional description
  state=&amp;quot;$1&amp;quot;
  description=&amp;quot;$2&amp;quot;

  curl -X POST \
    -u &amp;quot;$PATCHWORK_USER:$PATCHWORK_PASS&amp;quot; \
    -F &amp;quot;state=$state&amp;quot; \
    -F &amp;quot;target_url=$BUILD_URL&amp;quot; \
    -F &amp;quot;context=$JOB_NAME&amp;quot; \
    -F &amp;quot;description=$description&amp;quot; \
    &amp;quot;$CHECK_URL&amp;quot;
}

##################################################
# Main
##################################################

# Sanity checks

echo &amp;quot;MBOX_URL=$MBOX_URL&amp;quot;
echo &amp;quot;CHECK_URL=$CHECK_URL&amp;quot;
echo &amp;quot;JOB_NAME=$JOB_NAME&amp;quot;
echo &amp;quot;BUILD_URL=$BUILD_URL&amp;quot;

# Notify the user that the build is starting
submit_check &amp;quot;pending&amp;quot;

# Navigate to the Patchwork directory
cd patchwork || exit

# Configure fake git credentials so we can use git-am
git config user.name &#39;John Doe&#39;
git config user.email &#39;john.doe@example.org&#39;

# Simply download and apply the mbox to ensure it still applies
if ! curl &amp;quot;$MBOX_URL&amp;quot; | git am -3; then
  submit_check &amp;quot;fail&amp;quot;
  exit 1
else
  submit_check &amp;quot;success&amp;quot;
  exit 0
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;rsquo;ll notice we&amp;rsquo;re really not taking advantage of Jenkins&amp;rsquo; power here, but
bear with me: these are baby steps.&lt;/p&gt;

&lt;p&gt;Once done, you should have something like the following:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/patchwork-and-ci-in-a-tree-6.png&#34; alt=&#34;Screenshot of Build configuration&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Build&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;Finally, the &lt;em&gt;Post-build Actions&lt;/em&gt;. I didn&amp;rsquo;t make use of this section, though
I&amp;rsquo;m sure the above script could be broken up to make use of this. Some other
time, perhaps.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/patchwork-and-ci-in-a-tree-7.png&#34; alt=&#34;Screenshot of Post-build Actions&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Post-build Actions&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h3 id=&#34;summary-1&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Once this step is complete, you should have configured a basic Jenkins job that
can be kicked off using the API. This job uses the credentials and IP of the
Patchwork instance. You&amp;rsquo;ll also have a token for your Jenkins user, which we
will use to talk to the Jenkins API.&lt;/p&gt;

&lt;h2 id=&#34;poll-patchwork-and-kick-of-jenkins-builds&#34;&gt;Poll Patchwork and Kick of Jenkins Builds&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;re going to use a rather simple Bash script to kick of the Jenkins build. We
could do the exact same thing in Python (it would likely be more robust), but
Bash makes for a good first pass. The script consists of a number of different
parts: all should be combined to produce the final scripts.&lt;/p&gt;

&lt;p&gt;Note that the below script(s) makes use of the &lt;code&gt;jq&lt;/code&gt; tool to parse JSON. This is
not part of the default install on many distros, and may need to be installed
manually. You should do this now. For example, on Fedora 25 run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo dnf install jq
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First up in the script: Jenkins and Patchwork credentials. We&amp;rsquo;re going to
hard-code these for now, using the Jenkins username and token and Patchwork
username and password we configured/collected earlier. We&amp;rsquo;re also going to
create some function stubs, which we will populate later.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;##################################################
# Constants
##################################################

# Patchwork credentials

readonly PATCHWORK_URL=&amp;quot;172.17.0.3:8000&amp;quot;
readonly PATCHWORK_USER=&amp;quot;admin&amp;quot;
readonly PATCHWORK_PASS=&amp;quot;tester&amp;quot;

# Jenkins credentials

readonly JENKINS_URL=&amp;quot;localhost:8080&amp;quot;
readonly JENKINS_USER=&amp;quot;admin&amp;quot;
readonly JENKINS_TOKEN=&amp;quot;962ccd82ce467804ec7e465602381d12&amp;quot;
readonly JENKINS_CRUMB=$(curl -s &amp;quot;http://${JENKINS_USER}:${JENKINS_TOKEN}@${JENKINS_URL}/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,\&amp;quot;:\&amp;quot;,//crumb)&amp;quot;)

# Job configuration

readonly JOB_NAME=&amp;quot;checkstyle&amp;quot;
readonly JOB_TOKEN=&amp;quot;hello-world&amp;quot;

##################################################
# Functions
##################################################

function submit_job() {
  # TODO
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that Jenkins requires that you supply a &amp;ldquo;crumb&amp;rdquo; with all requests to
prevent CSRF, so we gather that now. More information is provided in &lt;a href=&#34;http://stackoverflow.com/a/38314369/613428&#34;&gt;this
StackOverflow question&lt;/a&gt; and in the &lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/Remote+access+API&#34;&gt;remote access API wiki&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next, the polling of &lt;code&gt;/events&lt;/code&gt;. This is an endpoint in the Patchwork REST API
that reports events related to elements like patches, series or checks. A list
of all supported events is &lt;a href=&#34;#&#34;&gt;provided in the docs&lt;/a&gt; but there are two that we
care about here: &lt;code&gt;patch-created&lt;/code&gt; and &lt;code&gt;patch-complete&lt;/code&gt;. Per the docs, the first
of these occurs when a patch is added to Patchwork. The second, meanwhile,
occurs when all dependencies (if any) are met. This means that if a two patch
series is sent to Patchwork and the second patch is received first, only the
&lt;code&gt;patch-created&lt;/code&gt; event will be created for this patch. Only when the first patch
in that series (the second patch&amp;rsquo;s only dependency) is received will the
&lt;code&gt;patch-completed&lt;/code&gt; be raised for the second patch (the &lt;code&gt;patch-created&lt;/code&gt; and
&lt;code&gt;patch-completed&lt;/code&gt; events will be raised at the same time for the first patch,
given that it has no dependencies per se).&lt;/p&gt;

&lt;p&gt;The below section of the script deals with reading these events from the
Patchwork API.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;##################################################
# Main
##################################################

# Pull in latest events

response=$(curl -s -u &amp;quot;$PATCHWORK_USER:$PATCHWORK_PASS&amp;quot; \
  http://${PATCHWORK_URL}/api/1.0/events/?category=patch-completed)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The response from the &lt;code&gt;/events&lt;/code&gt; API will include links to the created patch
and, for the &lt;code&gt;patch-completed&lt;/code&gt; event, the patch series which is providing the
dependencies. We must retrieve the patch and series from the Patchwork API.
Note that, in a future version of the API, we should support an &lt;code&gt;embed&lt;/code&gt;
parameter that would allow us to embed the patch and series in the response and
avoid these additional requests.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Extract patch and series URLs from each event, and create jobs based on
# these

patches_series=$(echo &amp;quot;$response&amp;quot; | jq -rc &#39;.[] | .payload.patch + &amp;quot;,&amp;quot; + .payload.series&#39;)
echo &amp;quot;$patches_series&amp;quot; | while IFS=, read -r patch series; do
  echo &amp;quot;Submitting job&amp;quot;
  echo &amp;quot;Patch URL: $patch&amp;quot;
  echo &amp;quot;Series URL: $series&amp;quot;

  submit_job &amp;quot;$patch&amp;quot; &amp;quot;$series&amp;quot;

  exit 1
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we have the &lt;code&gt;patch_url&lt;/code&gt; and &lt;code&gt;series_url&lt;/code&gt;, we can submit the job to
Jenkins. We&amp;rsquo;re going to do this via a call to the &lt;code&gt;submit_job&lt;/code&gt; function, which
we already defined a stub for. Implementing this function is rather simple,
given that we have already configured the job and gathered all required
parameters and credentials. Replace the above stub with the below function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;function submit_job() {
  local patch
  local patch_id
  local series_id
  local mbox_url
  local build_url

  patch=$(curl -s &amp;quot;$1&amp;quot;)
  series=$(curl -s &amp;quot;$2&amp;quot;)
  patch_id=$(echo &amp;quot;$patch&amp;quot; | jq -rc &#39;.id&#39;)
  series_id=$(echo &amp;quot;$series&amp;quot; | jq -rc &#39;.id&#39;)

  # we need to build this manually to ensure the Patchwork IP address is used
  mbox_url=&amp;quot;http://$PATCHWORK_URL/patch/${patch_id}/mbox/?series=${series_id}&amp;quot;
  check_url=&amp;quot;http://$PATCHWORK_URL/api/1.0/patches/${patch_id}/checks/&amp;quot;
  build_url=&amp;quot;http://$JENKINS_USER:$JENKINS_TOKEN@$JENKINS_URL/job/$JOB_NAME/build&amp;quot;

  echo &amp;quot;Submitting job: $build_url&amp;quot;
  echo &amp;quot;Job parameters: PATCH_MBOX_URL=$mbox_url, CHECK_URL=$check_url&amp;quot;

  curl -X POST \
    -H &amp;quot;$JENKINS_CRUMB&amp;quot; \
    --data token=&amp;quot;$JOB_TOKEN&amp;quot; \
    --data-urlencode json=&#39;{
      &amp;quot;parameter&amp;quot;: [
        {&amp;quot;name&amp;quot;:&amp;quot;MBOX_URL&amp;quot;, &amp;quot;value&amp;quot;:&amp;quot;&#39;&amp;quot;$mbox_url&amp;quot;&#39;&amp;quot;},
        {&amp;quot;name&amp;quot;:&amp;quot;CHECK_URL&amp;quot;, &amp;quot;value&amp;quot;:&amp;quot;&#39;&amp;quot;$check_url&amp;quot;&#39;&amp;quot;}
      ]
    }&#39; \
    &amp;quot;$build_url&amp;quot;

  echo &amp;quot;Job submitted&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are a couple of important points to note here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We&amp;rsquo;re building the &lt;code&gt;mbox_url&lt;/code&gt; and &lt;code&gt;check_url&lt;/code&gt; URLs manually, rather than
extracting it from the &lt;code&gt;patch&lt;/code&gt; response. This is because the response will be
relative to the Patchwork Docker domain, or &lt;code&gt;localhost&lt;/code&gt;, which Jenkins cannot
access.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The Jenkins API requires parameters be passed via a JSON body rather than
than individual fields. This differs from Patchwork.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The Jenkins API requires the inclusion of a &lt;em&gt;crumb&lt;/em&gt; header, by way of the
&lt;code&gt;JENKINS_CRUMB&lt;/code&gt; that we stored earlier. This is intended to prevent CSRF
attacks.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More information on the Jenkins API can be found in &lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/Remote+access+API&#34;&gt;remote access API
wiki&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;add-patches-to-patchwork&#34;&gt;Add Patches to Patchwork&lt;/h2&gt;

&lt;p&gt;Once done, it&amp;rsquo;s time to load in some patches. We&amp;rsquo;re going to once again follow
the &lt;a href=&#34;https://patchwork.readthedocs.io/en/latest/development/installation/#import-mailing-list-archives&#34;&gt;Patchwork documentation&lt;/a&gt; and make use Mailman archives. I downloaded
the archives for January 2017, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ curl https://gist.github.com/stephenfin/d13183dad40f8c472234cb26777355c3 \
    | gunzip &amp;gt; sample-series.mbox
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that this &lt;em&gt;must&lt;/em&gt; be downloaded to the &lt;code&gt;patchwork&lt;/code&gt; directory, else it will
not be accessible from the Docker containers.&lt;/p&gt;

&lt;p&gt;Once downloaded, use the &lt;code&gt;parsearchive&lt;/code&gt; tool provided with Patchwork to load
the archive:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ docker-compose run web python manage.py parsearchive \
    --list-id=patchwork.ozlabs.org \
    sample-series.mbox
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Keep an eye on the &lt;code&gt;/events&lt;/code&gt; URL - you should notice a few new patch events.&lt;/p&gt;

&lt;h2 id=&#34;go-time&#34;&gt;Go Time&lt;/h2&gt;

&lt;p&gt;Run the script on your host and watch the end result. That script will read the
events stream, filter the events we care about, and kick of Jenkins builds for
the patches you just added. Jenkins will then take over, reporting that it is
starting testing to Patchwork, actually running the tests, then reporting the
end result to Patchwork. You should be able to see the jobs running in Jenkins,
and the resulting checks reported in the API.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://localhost:8080/job/checkstyle/
http://localhost:8000/api/1.0/events/?category=patch-completed
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;summary-2&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;And so completes our demo. It&amp;rsquo;s rather basic, involving a lot of &amp;ldquo;shortcuts&amp;rdquo;
and tinkering. However, it does demonstrate the coming together of many of the
features available in the next version of Patchwork, namely:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Checks&lt;/em&gt;, available in &lt;a href=&#34;https://github.com/getpatchwork/patchwork/&#34;&gt;Patchwork 1.1&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;REST API&lt;/em&gt;, available in the upcoming Patchwork 2.0&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Series&lt;/em&gt;, available in the upcoming Patchwork 2.0&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Events&lt;/em&gt;, still WIP but planned for the upcoming Patchwork 2.0&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not all of these features are required for building an automated testing
system. For example, if you didn&amp;rsquo;t want to test series or were happy testing
individual patches, you could skip the series support. Likewise, you don&amp;rsquo;t have
to report test results to Patchwork and could poll the &lt;code&gt;/patches&lt;/code&gt; or &lt;code&gt;/series&lt;/code&gt;
endpoints instead of the &lt;code&gt;/events&lt;/code&gt; endpoint to find patches to test.  In my
opinion though, this represents a great starting point for building an
sustainable, stable, and ultimately beneficial testing infrastructure for
projects using a mailing list workflow.&lt;/p&gt;

&lt;h2 id=&#34;what-s-next&#34;&gt;What&amp;rsquo;s Next&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A better permissions model for Patchwork users&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Support for an &lt;code&gt;embed&lt;/code&gt; parameter in all API endpoints, allowing us to
minimize requests to the API&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/HTTP_ETag&#34;&gt;ETag&lt;/a&gt; support, again helping us minimize API traffic&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Better upstream documentation&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Open Python paths with vim</title>
      <link>https://that.guru/blog/open-python-paths-with-vim/</link>
      <pubDate>Mon, 06 Feb 2017 14:33:53 +0000</pubDate>
      
      <guid>https://that.guru/blog/open-python-paths-with-vim/</guid>
      <description>&lt;p&gt;In OpenStack nova land, you run tests by specifying their Python paths, like
so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tox -e py27 nova.tests.unit.virt.libvirt.test_vif.LibvirtVifTestCase
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is also how tests are run and reported by the CI. If a tests fails when
run locally or in the CI, the failure will be reported with similar Python
module path-style references. These take a little cleanup to get a usable file
path that we can use to open the file, so I automated it.&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/stephenfin/ea6bb2d650060d2a998a2dcd41f58291.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Download and copy this to somewhere on your path, then run it like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd $openstack_nova_dir
$ pyvi nova.tests.unit.virt.libvirt.test_vif.LibvirtVifTestCase
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Creating a Windows 7 USB on Fedora 25</title>
      <link>https://that.guru/blog/creating-a-windows-7-usb-on-fedora-25/</link>
      <pubDate>Tue, 31 Jan 2017 22:43:38 +0000</pubDate>
      
      <guid>https://that.guru/blog/creating-a-windows-7-usb-on-fedora-25/</guid>
      <description>

&lt;p&gt;Turns out Fedora 25 didn&amp;rsquo;t like my Samsung Series 9 (NP900X4C) much. Among
other things, the WiFi was intermittent (weird, as it&amp;rsquo;s an Intel NIC), suspend
didn&amp;rsquo;t work (the laptop is always dead when I come to it), and the keyboard
backlight turned off immediately after turning it on. I figured installing
Windows again might be a good move (I also miss Office), but that turned out a
little more difficult that anticipated. Below is the steps I ended up taking,
should anyone else encounter the same issue.&lt;/p&gt;

&lt;h1 id=&#34;get-an-iso&#34;&gt;Get an ISO&lt;/h1&gt;

&lt;p&gt;First up: finding a valid Windows 7 Home Premium x64 ISO. Given that I still
had my OEM key, this should not have been as difficult as it was. I finally
found a workaround, thanks to &lt;a href=&#34;https://www.raymond.cc/blog/links-for-windows-7-sp1-iso-from-microsofts-official-distributer/&#34;&gt;this excellent guide on Raymond.cc&lt;/a&gt; (follow
the &amp;ldquo;Download Windows &lt;sup&gt;7&lt;/sup&gt;&amp;frasl;&lt;sub&gt;8&lt;/sub&gt;.1 From The Windows 10 Download Page&amp;rdquo; section). With
that &amp;ldquo;hack&amp;rdquo;, you should be able to pull in an ISO for the required version
(&lt;code&gt;Win7_HomePrem_SP1_English_x64.iso&lt;/code&gt; in my case).&lt;/p&gt;

&lt;h1 id=&#34;connect-usb-drive&#34;&gt;Connect USB Drive&lt;/h1&gt;

&lt;p&gt;We&amp;rsquo;re going to install to a USB drive, so ensure it&amp;rsquo;s plugged in now. Record
the device name - &lt;code&gt;/dev/sdb&lt;/code&gt; in my case - for use later.&lt;/p&gt;

&lt;h1 id=&#34;prepare-your-usb&#34;&gt;Prepare Your USB&lt;/h1&gt;

&lt;p&gt;This was another exercise in frustration. I followed many, many guides, all of
which invariably ended in a failure. I suspect this is because the guides all
recommended formatting my drive with NTFS when UEFI, as found on this laptop,
requires FAT32. Thankfully, I stumbled upon &lt;a href=&#34;https://onetransistor.blogspot.ie/2014/09/make-bootable-windows-usb-from-ubuntu.html&#34;&gt;a guide&lt;/a&gt; that suggested as
much. This guide used GParted but unfortunately there&amp;rsquo;s a known &lt;a href=&#34;https://bugzilla.redhat.com/show_bug.cgi?id=1397103&#34;&gt;issue with
&lt;code&gt;gparted&lt;/code&gt; on Wayland&lt;/a&gt;. A workaround for this issue is to allow &amp;ldquo;non-network
local connections&amp;rdquo; by running the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ xhost +local:
non-network local connections being added to access control list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we can start GParted:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo gparted
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Execute the following operations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Unmount the drive&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Delete any existing partitions&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a &lt;em&gt;New&lt;/em&gt; primary partition&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Format this partition as FAT32&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Set a label, e.g. &lt;code&gt;WIN7_HP_X64&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Set the &lt;code&gt;boot&lt;/code&gt; flag to make the drive bootable&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once completed, &lt;em&gt;Apply all operations&lt;/em&gt;, exit GParted, and disallow non-network
local connections:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ xhost -local:
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;copy-files&#34;&gt;Copy Files&lt;/h1&gt;

&lt;p&gt;You can now proceed to mount both the USB drive and the ISO:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo mkdir /mnt/usb
$ sudo mkdir /mnt/iso
$ sudo mount /dev/sdb1 /mnt/usb/
$ sudo mount -o loop ~/Downloads/Win7_HomePrem_SP1_English_x64.iso /mnt/iso/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;updating paths where necessary.&lt;/p&gt;

&lt;p&gt;Copy the contents of the ISO to the USB drive:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo cp -av /mnt/iso/* /mnt/usb/
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;install-bootloader&#34;&gt;Install Bootloader&lt;/h1&gt;

&lt;p&gt;We&amp;rsquo;re going to use grub2 as the bootloader. Run the following to install the
bootloader on the USB drive:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo grub2-install --boot-directory=/mnt/usb/boot /dev/sdb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;once again, updating paths where necessary.&lt;/p&gt;

&lt;p&gt;Once completed, you should see the following message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Installing for i386-pc platform.
Installation finished. No error reported.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If so, save the following to &lt;code&gt;boot/grub2/grub.cfg&lt;/code&gt; on the USB drive:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;default=1
timeout=15
color_normal=light-cyan/dark-gray
menu_color_normal=black/light-cyan
menu_color_highlight=white/black

menuentry &amp;quot;Start Windows Installation&amp;quot; {
    insmod ntfs
    insmod search_label
    search --no-floppy --set=root --label &amp;lt;USB_drive_label&amp;gt; --hint hd0,msdos1
    ntldr /bootmgr
    boot
}

menuentry &amp;quot;Boot from the first hard drive&amp;quot; {
    insmod ntfs
    insmod chain
    insmod part_msdos
    insmod part_gpt
    set root=(hd1)
    chainloader +1
    boot
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;replacing &lt;code&gt;&amp;lt;USB_drive_label&amp;gt;&lt;/code&gt; with the label you used earlier - &lt;code&gt;WIN7_HP_X64&lt;/code&gt;
for me.&lt;/p&gt;

&lt;h1 id=&#34;profit&#34;&gt;Profit&lt;/h1&gt;

&lt;p&gt;Unmount the drive, insert it into the laptop and install Windows 7.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sync  # to ensure all file transfers are complete.
$ sudo umount
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Install Netbeans on Fedora 25</title>
      <link>https://that.guru/blog/install-netbeans-on-fedora-25/</link>
      <pubDate>Sat, 10 Dec 2016 20:16:27 +0000</pubDate>
      
      <guid>https://that.guru/blog/install-netbeans-on-fedora-25/</guid>
      <description>

&lt;p&gt;It&amp;rsquo;s been a while since I last wrote a non-trivial amount of Java and I can&amp;rsquo;t
say I miss it. However, I want to work on a plugin for Jenkins which means
diving back in. Netbeans was my IDE of choice when I last worked with Java but
unfortunately Netbeans is not packaged for Fedora (presumably due to it&amp;rsquo;s use
of Oracle&amp;rsquo;s JDK rather than OpenJDK?). As such, if you want to avoid using
Eclipse then you need to install Netbeans &amp;ldquo;by hand&amp;rdquo;. There are a couple of
tricks to doing this correctly.&lt;/p&gt;

&lt;h1 id=&#34;install-dependencies&#34;&gt;Install dependencies&lt;/h1&gt;

&lt;p&gt;We&amp;rsquo;re going to use OpenJDK rather than Oracle JDK as the former is packaged in
Fedora.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo dnf install java-1.8.0-openjdk.x86_64
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;download-installer&#34;&gt;Download installer&lt;/h1&gt;

&lt;p&gt;Download the latest installer from the &lt;a href=&#34;https://netbeans.org/downloads/&#34;&gt;Netbeans website&lt;/a&gt;. At the time of
writing, this was &lt;em&gt;Netbeans 8.2&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&#34;enable-root-access-to-x&#34;&gt;Enable root access to X&lt;/h1&gt;

&lt;p&gt;I wanted Netbeans installed in a standard location (&lt;code&gt;/usr/local&lt;/code&gt;) rather than
in my home directory. Unfortunately this requires root privileges and and
running the installer under &lt;code&gt;sudo&lt;/code&gt; produces errors. The &lt;a href=&#34;https://wiki.archlinux.org/index.php/Running_X_apps_as_root&#34;&gt;Arch
wiki&lt;/a&gt; provides a
number of suggestions for how to do this, but the one that worked for me was to
temporarily allow root access to X like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ xhost +
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;run-the-installer&#34;&gt;Run the installer&lt;/h1&gt;

&lt;p&gt;The only change you will need to make is to change the JDK path from &lt;code&gt;/usr&lt;/code&gt; to
wherever OpenJDK is installed
(&lt;code&gt;/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.111-3.b16.fc25.x86_64&lt;/code&gt; for me). If you
don&amp;rsquo;t do this, you will get a warning stating &amp;ldquo;The JDK is missing&amp;rdquo;. If this
happens, follow the instructions provided &lt;a href=&#34;https://mydayswithlinux.wordpress.com/2016/03/02/how-to-install-netbeans-8-1-in-kororafedora/&#34;&gt;here&lt;/a&gt; to resolve the issue
post-installation.&lt;/p&gt;

&lt;h1 id=&#34;disable-root-access-to-x&#34;&gt;Disable root access to X&lt;/h1&gt;

&lt;p&gt;Once installation is complete, we can disable root access to prevent anyone
else accessing our X session.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ xhost -
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;profit&#34;&gt;Profit&lt;/h1&gt;

&lt;p&gt;NetBeans should now be installed.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using git-review</title>
      <link>https://that.guru/blog/how-to-use-git-review/</link>
      <pubDate>Tue, 06 Dec 2016 15:48:32 +0000</pubDate>
      
      <guid>https://that.guru/blog/how-to-use-git-review/</guid>
      <description>

&lt;p&gt;&lt;code&gt;git-review&lt;/code&gt; is a Python wrapper for many of the common Git commands used in
conjunction with Gerrit. It encapsulates many of the most common commands used,
in order to speed things up.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s possible to use Gerrit without using the &lt;code&gt;git-review&lt;/code&gt; tool. All the
commands we use below have their plain &lt;code&gt;git&lt;/code&gt; equivalents. However, the question
remains: why would you want to? The &lt;code&gt;git-review&lt;/code&gt; tool speeds things up, and is
used by a number of teams outside Intel (including MediaWiki and OpenStack).&lt;/p&gt;

&lt;p&gt;This guide is borrows heavily from the original Openstack guide, found here:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://wiki.openstack.org/wiki/Gerrit_Workflow
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;a-word-on-workflows&#34;&gt;A word on workflows&lt;/h2&gt;

&lt;p&gt;Gerrit, like Git, is extremely flexible. There is no one true way to work with
it. However, Git has two predominant &amp;ldquo;workflows&amp;rdquo;: the merge workflow, and the
rebase workflow. Each of these have their pros and cons, but both work equally
well with standard Git. This is not the case with Gerrit. While the former
workflow is possible, it&amp;rsquo;s very awkward (Gerrit doesn&amp;rsquo;t handle merge commits
very well). Hence, despite the issues that can occur from &amp;ldquo;rewriting history&amp;rdquo;
in the rebase workflow, it&amp;rsquo;s the best option.&lt;/p&gt;

&lt;h2 id=&#34;initial-steps&#34;&gt;Initial steps&lt;/h2&gt;

&lt;p&gt;First, install the tool. On Fedora 16 and up:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ dnf install git-review
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Navigate to the project you wish to use, and ensure you can connect to the
Gerrit server:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd &amp;lt;repo&amp;gt;
$ git review -s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may get a warning like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;No &#39;.gitreview&#39; file found in this repository.
We don&#39;t know where your gerrit is. Please manually create
a remote named gerrit and try again.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If so, you likely have your Gerrit review server&amp;rsquo;s &amp;ldquo;remote&amp;rdquo; called &lt;code&gt;origin&lt;/code&gt; or
something similar. You can check this like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git remote -v
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;rsquo;ll likely get something like so, where the url points to a Gerrit project:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;origin  &amp;lt;url&amp;gt; (fetch)
origin  &amp;lt;url&amp;gt; (push)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Assuming this is the case, just rename the remote:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git remote rename origin gerrit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If this isn&amp;rsquo;t (i.e. you have more than one remote), you may want to rename
the relevant remote or add a new one for Gerrit:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git remote add gerrit [url]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;making-and-uploading-changesets&#34;&gt;Making and uploading changesets&lt;/h2&gt;

&lt;p&gt;Checkout a feature branch using your teams naming conventions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git checkout -b &amp;lt;topic_branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; You should always work on feature branches when working with Gerrit.
If you work on &lt;code&gt;master&lt;/code&gt; or &lt;code&gt;development&lt;/code&gt;, you&amp;rsquo;re going to get merge conflicts
when you pull in the latest changes from Gerrit/upstream.&lt;/p&gt;

&lt;p&gt;Now make some changes: add some new files, delete old ones, do what you have to
do. Following this, save the changes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git commit -as  # this is the same as `git add -u` and `git commit -as`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should create a new commit. You can upload this changeset like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git remote update  # to get latest changes
$ git review &amp;lt;upstream_branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This will automatically rebase the change against the upstream master.&lt;/p&gt;

&lt;p&gt;If you now go to Gerrit, you&amp;rsquo;ll see a new changeset there. Its &amp;ldquo;Branch&amp;rdquo; will
correspond with the value of &lt;code&gt;&amp;lt;upstream_branch&amp;gt;&lt;/code&gt;, while the &amp;ldquo;Topic&amp;rdquo; will
correspond with the value of &lt;code&gt;&amp;lt;topic_branch&amp;gt;&lt;/code&gt; (i.e. your local branch).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; In Gerrit, the &amp;ldquo;Branch&amp;rdquo; means the Git branch that the commit is meant
for. However, the &amp;ldquo;Topic&amp;rdquo; has no bearing on the actual underlying repo. Instead
it is merely used to gather similar changes together.&lt;/p&gt;

&lt;h2 id=&#34;reworking-a-changeset&#34;&gt;Reworking a changeset&lt;/h2&gt;

&lt;p&gt;No one&amp;rsquo;s perfect, and neither is your code. When you need to rework some, you
do so using the &lt;code&gt;rebase&lt;/code&gt; and &lt;code&gt;commit --amend&lt;/code&gt; tools. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[make changes...]
$ git commit -a --amend
$ git review &amp;lt;upstream_branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git rebase -i &amp;lt;ancestor&amp;gt;
[make changes...]
$ git review &amp;lt;upstream_branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If you delete a commit using rebase, you &lt;em&gt;will&lt;/em&gt; need to manually
abandon it. Unfortunately there doesn&amp;rsquo;t seem to be any way to avoid this.&lt;/p&gt;

&lt;h2 id=&#34;collaboration&#34;&gt;Collaboration&lt;/h2&gt;

&lt;p&gt;If you want to review/rework someone else&amp;rsquo;s changes, it&amp;rsquo;s very easy to do. This
is great for collaboration/pair-programming.&lt;/p&gt;

&lt;p&gt;To check out someone else&amp;rsquo;s code, you&amp;rsquo;ll want the &amp;ldquo;change id&amp;rdquo;. When you have
this, just use the following change:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git review -d &amp;lt;change_id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will checkout the change, and all changes that it depends on (i.e. the
branch).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MTUs in neutron</title>
      <link>https://that.guru/blog/mtus-in-neutron/</link>
      <pubDate>Tue, 06 Dec 2016 15:32:46 +0000</pubDate>
      
      <guid>https://that.guru/blog/mtus-in-neutron/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m not overly familiar with neutron but it appears that in the past correctly
setting MTU values was easier said than done. This has been massively improved
in recent releases, but getting us to this point required a lot of work and, in
particular, a lot of changes to the MTU-related configuration options available
over the course of Liberty and Newton. The below table tries to collect these
changes in a coherent table.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Configuration Option&lt;/th&gt;
&lt;th&gt;Version&lt;/th&gt;
&lt;th&gt;Commit&lt;/th&gt;
&lt;th&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;segment_mtu&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Liberty&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;path_mtu&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Liberty&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;segment_mtu&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Mitaka&lt;/td&gt;
&lt;td&gt;b2d0985d&lt;/td&gt;
&lt;td&gt;Default set to 1500&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;global_physnet_mtu&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Mitaka&lt;/td&gt;
&lt;td&gt;ae45cd57&lt;/td&gt;
&lt;td&gt;New name for &lt;code&gt;segment_mtu&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;path_mtu&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Mitaka&lt;/td&gt;
&lt;td&gt;7a4633a9&lt;/td&gt;
&lt;td&gt;Default set to 1500&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;global_physnet_mtu&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Newton&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;path_mtu&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Newton&lt;/td&gt;
&lt;td&gt;38531ca5&lt;/td&gt;
&lt;td&gt;Default set to 0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;These options are described in the docs for both &lt;a href=&#34;http://docs.openstack.org/mitaka/networking-guide/config-mtu.html&#34;&gt;Mitaka&lt;/a&gt; and
&lt;a href=&#34;http://docs.openstack.org/newton/networking-guide/config-mtu.html&#34;&gt;Newton&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In addition, it&amp;rsquo;s also worth noting that the default for &lt;code&gt;global_physnet_mtu&lt;/code&gt;
in TripleO was changed from 1400 to 1500 as part of &lt;a href=&#34;https://bugs.launchpad.net/tripleo/+bug/1590101&#34;&gt;bug 1590101&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GNU Autotest</title>
      <link>https://that.guru/blog/gnu-autotest/</link>
      <pubDate>Fri, 15 Jul 2016 11:26:37 +0100</pubDate>
      
      <guid>https://that.guru/blog/gnu-autotest/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/software/autoconf/manual/autoconf-2.67/html_node/Using-Autotest.html#Using-Autotest&#34;&gt;GNU Autotest&lt;/a&gt; is a test framework that, together with supporting
scripts and unit test files, can unit test an application. Autotest is part of
the &lt;a href=&#34;http://www.gnu.org/savannah-checkouts/gnu/automake/manual/html_node/Autotools-Introduction.html&#34;&gt;Autotools&lt;/a&gt; library, a.k.a. the &lt;a href=&#34;http://en.wikipedia.org/wiki/GNU_build_system&#34;&gt;GNU Build System&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Autotest scripts execute unit tests by making shell-like calls to
utilities, Python scripts and C unit test applications, and comparing their
return values (exit code, stdout and stderr) to predefined values. To do this,
Autotest defines a number of &lt;a href=&#34;http://en.wikipedia.org/wiki/M4_(computer_language)http://en.wikipedia.org/wiki/M4_(computer_language)&#34;&gt;M4&lt;/a&gt;  macros, such as &lt;code&gt;AT_INIT&lt;/code&gt; and
&lt;code&gt;AT_CLEANUP&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;An example of a test is given below. This test is from the &lt;a href=&#34;http://wiki.ir.intel.com/sw/index.php/OVS&#34;&gt;Open vSwitch&lt;/a&gt;
project, and tests the resubmit action in the datapath.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AT_SETUP([ofproto-dpif - resubmit])
OVS_VSWITCHD_START
AT_DATA([flows.txt], [dnl
table=0 in_port=1 priority=1000 icmp actions=output(10),resubmit(2),\
output(19),resubmit(3),output(21)
table=0 in_port=2 priority=1500 icmp actions=output(11),resubmit(,1),\
output(16),resubmit(2,1),output(18)
table=0 in_port=3 priority=2000 icmp actions=output(20)
table=1 in_port=1 priority=1000 icmp actions=output(12),resubmit(4,1),\
output(13),resubmit(3),output(15)
table=1 in_port=2 priority=1500 icmp actions=output(17),resubmit(,2)
table=1 in_port=3 priority=1500 icmp actions=output(14),resubmit(,2)
])
AT_CHECK([ovs-ofctl add-flows br0 flows.txt])
AT_CHECK([ovs-appctl ofproto/trace br0 &#39;in_port(1),eth(src=50:54:00:00:00:05,\
dst=50:54:00:00:00:07),eth_type(0x0800),ipv4(src=192.168.0.1,dst=192.168.0.2,\
proto=1,tos=0,ttl=128,frag=no),icmp(type=8,code=0)&#39;], [0], [stdout])
AT_CHECK([tail -1 stdout], [0],
  [Datapath actions: 10,11,12,13,14,15,16,17,18,19,20,21
])
OVS_VSWITCHD_STOP
AT_CLEANUP
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;macros&#34;&gt;Macros&lt;/h2&gt;

&lt;h3 id=&#34;m4-macros&#34;&gt;m4 macros&lt;/h3&gt;

&lt;dl&gt;
  &lt;dt&gt;&lt;code&gt;m4_define([name], [substitution])&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;Substitutes the word(s) given by name with the text given in substitution&lt;/dd&gt;
  &lt;dt&gt;&lt;code&gt;m4_if([name], [value], [execution])&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;If the value of the name variable equals that of the value variable, then
  execute execution&lt;/dd&gt;
&lt;/dl&gt;

&lt;h3 id=&#34;autotest-macros&#34;&gt;Autotest macros&lt;/h3&gt;

&lt;p&gt;Autotest macros are just predefined M4 macros. There are a number of them,
including:&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;&lt;code&gt;AT_SETUP(title)&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;Begin a test group named title. This title is really the identifier of
  the test group, used in quiet and verbose outputs. It should be short, but
  descriptive.&lt;/dd&gt;
  &lt;dt&gt;&lt;code&gt;AT_CHECK(commands, [status = 0], [stdout], [stderr])&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;Execute a test by performing given shell commands. These commands should
  normally exit with status, while producing expected stdout and stderr
  contents.&lt;/dd&gt;
  &lt;dt&gt;&lt;code&gt;AT_CLEANUP()&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;End a test group.&lt;/dd&gt;
&lt;/dl&gt;

&lt;h3 id=&#34;additional-macros&#34;&gt;Additional macros&lt;/h3&gt;

&lt;p&gt;There are many additional macros available to use. For a list of these, it&amp;rsquo;s
probably best to check out the official &lt;a href=&#34;http://www.gnu.org/software/autoconf/manual/autoconf-2.64/html_node/Writing-Testsuites.html#Writing-Testsuites&#34;&gt;GNU Autotest Manual&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;writing-a-sample-test&#34;&gt;Writing a sample test&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;rdquo;&amp;hellip;to learn and not to do is really not to learn. To know and not to do is
really not to know.&amp;ldquo;, Stephen R. Covey&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The best way to learn this stuff is to &lt;em&gt;do it&lt;/em&gt;. As such, we&amp;rsquo;re going to write a
sample test script that will explain the basic functionality of the Autotest
framework.&lt;/p&gt;

&lt;h3 id=&#34;what-we-want-to-achieve&#34;&gt;What we want to achieve&lt;/h3&gt;

&lt;p&gt;We want to test the &lt;code&gt;cat&lt;/code&gt; application. As with most shell applications, this
application provides an awful lot of functionality. We&amp;rsquo;re going to test only a
small subset of it&amp;rsquo;s functionality, and ignore all the other options and the
flags available to us. As such, we want to check that the following features
work as expected:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;cat&lt;/code&gt; prints an error message for a non-existing file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cat&lt;/code&gt; prints nothing for an empty, existing file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cat&lt;/code&gt; prints some output for a non-empty, existing file&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;initial-setup&#34;&gt;Initial setup&lt;/h3&gt;

&lt;p&gt;The first thing we should do is declare our own macro to place tests in. This
will act as a &lt;em&gt;function&lt;/em&gt; of sorts and allow us to call the tests at once or
from another file (plus it acts as a container to illustrate the difference in
different files). To do this, add the following code in a file called
&lt;code&gt;mytest.at&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;m4_define([MYTEST_CHECK_CAT], [])

MYTEST_CHECK_CAT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works pretty straight-forwardly. When typed, the keyword
&lt;code&gt;MYTEST_CHECK_CAT&lt;/code&gt; on the bottom line will be replaced with the lines in the
second parameter of the macro (currently none). Obviously, in order to make
this useful, we need something in the second parameter like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;m4_define([MYTEST_CHECK_CAT], [
  AT_BANNER([])
  AT_SETUP([])
  AT_CHECK([], [], [], [])
  AT_CLEANUP
])

MYTEST_CHECK_CAT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Replace the text in &lt;code&gt;mytest.at&lt;/code&gt; with the above code. You&amp;rsquo;ll notice we&amp;rsquo;ve placed
four new lines in the previous empty second parameter. As described above,
these lines are what will be used in place of the keyword defined by the second
parameter. The actual lines in question are merely empty Autotest Macros, as
seen above. These must be used with values, as seen in the next section.&lt;/p&gt;

&lt;h3 id=&#34;the-test&#34;&gt;The test&lt;/h3&gt;

&lt;p&gt;The only test we&amp;rsquo;re writing here is for the following assertion:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;cat prints an error message for a non-existing file&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This test should just about do it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;m4_define([MYTEST_CHECK_CAT], [
  AT_BANNER([cat simple unit tests])
  AT_SETUP([execute cat with non-existing file])
  AT_CHECK([cat /dev/nulls], [ignore], [], [&amp;quot;cat: /dev/nulls: No such file or directory&amp;quot;])
  AT_CLEANUP
])

MYTEST_CHECK_CAT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each of the lines work as follow:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AT_BANNER([cat simple unit tests])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This merely describes some test that should be printed before the tests are
executed. This is useful for providing a title to a group of tests and hence
enforcing separation between them.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AT_SETUP([execute cat with non-existing file])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This describes the name of test in question. Most likely this is a brief
description of the test.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AT_CHECK([cat /dev/nulls], [ignore], [], [&amp;quot;cat: /dev/nulls: No such file or directory&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the real juicy part. The first parameter describes what operation to
run. In this case, we&amp;rsquo;re running cat on a non-existent file (note the &lt;code&gt;s&lt;/code&gt; in
&lt;code&gt;/dev/nulls&lt;/code&gt;). The second parameter describes the expected status. I&amp;rsquo;m not
entirely sure what the status could be, so I&amp;rsquo;ll ignore it. The third parameter
describes the stdout. This application should output to stderr rather than
stdout in the case of an error, so leave it empty. Finally the last parameter
describes the stderr. This is what the application should output on calling
this command and we ensure this is so.&lt;/p&gt;

&lt;h2 id=&#34;wrap-up&#34;&gt;Wrap up&lt;/h2&gt;

&lt;p&gt;It isn&amp;rsquo;t possible to run this test as-is, because we&amp;rsquo;re missing a lot of
configuration stuff (like the &lt;code&gt;AT_INIT&lt;/code&gt;). However, if you&amp;rsquo;re writing your own
tests, you&amp;rsquo;re most likely plugging into an existing test framework. The
specifics of this will change from project to project but someone on the
project&amp;rsquo;s team should be able to advise you on the specifics of integration.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Working with Jenkins &#43; Chrome</title>
      <link>https://that.guru/blog/helpful-jenkins-plugins/</link>
      <pubDate>Wed, 13 Jul 2016 14:46:56 +0100</pubDate>
      
      <guid>https://that.guru/blog/helpful-jenkins-plugins/</guid>
      <description>

&lt;p&gt;It&amp;rsquo;s been a while since I had to work with Jenkins directly (since I started on
OpenStack, really). However, I had a few tricks picked up around plugins for
Chrome that make working with pre-3.0 Jenkins a little more pleasant.&lt;/p&gt;

&lt;h1 id=&#34;buildreactor&#34;&gt;BuildReactor&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://chrome.google.com/webstore/detail/buildreactor/agfdekbncfakhgofmaacjfkpbhjhpjmp&#34;&gt;Site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/AdamNowotny/BuildReactor&#34;&gt;Source&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Overview&lt;/p&gt;

&lt;p&gt;This provides a current statuses of a user-defined number of Jenkins jobs.
It also gives notifications when projects pass/fail.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Installation&lt;/p&gt;

&lt;p&gt;Install from the Chrome store. Once installed, &amp;ldquo;Add&amp;rdquo; a new view, give it a
name (i.e. &amp;ldquo;Open vSwitch&amp;rdquo;) and configure the following settings:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Server: jenkins.example.com:8080
User:   [leave empty]
Pass:   [leave empty]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Substitute the appropriate URL for your local server. Once done, select the
&amp;ldquo;Show&amp;rdquo; button, and select which of the projects you want to display. Then
&amp;ldquo;Save&amp;rdquo;. You should now be able to get an overview of your builds by
clicking on the toolbar icon. You should also get notifications.  This is
easier to parse than the emails, IMO.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;doony&#34;&gt;Doony&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kevinburke/doony#chrome-extension&#34;&gt;Site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kevinburke/doony&#34;&gt;Source&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Overview&lt;/p&gt;

&lt;p&gt;This provides a new, ultra-usable stylesheet for Jenkins. IMO it makes
Jenkins easier to work with.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Installation&lt;/p&gt;

&lt;p&gt;Follow the guide on the README. When modifying the &amp;lsquo;manifest.json&amp;rsquo; file,
add the following URLs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;matches&amp;quot;: [
  &amp;quot;https://jenkins.ci.cloudbees.com/*&amp;quot;,
  &amp;quot;http://localhost:8080/*&amp;quot;,
  &amp;quot;https://jenkins.example.com:8080/*&amp;quot;,
  &amp;quot;http://jenkins.example.com:8080/*&amp;quot;,
  &amp;quot;https://jenkins.example.com/*&amp;quot;,
  &amp;quot;http://jenkins.example.com/*&amp;quot;,
],
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Substitute the appropriate URL for you local server. Don&amp;rsquo;t forget to
&amp;ldquo;reload&amp;rdquo; the plugin once installed.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>How are datacenters physically wired?</title>
      <link>https://that.guru/blog/how-are-datacenters-physically-wired/</link>
      <pubDate>Wed, 13 Jul 2016 14:33:21 +0100</pubDate>
      
      <guid>https://that.guru/blog/how-are-datacenters-physically-wired/</guid>
      <description>&lt;p&gt;I sent this question to my team in Intel some time ago.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I gave a run down on SDN, NFV and all things Open to the OpenStack new
hires today. One of the questions that came out of this concerned the
physical wiring of server room or datacenter using SDN. Does anyone
have any info on how n servers in a datacenter would be physically
connected (where n &amp;gt;= 100, for example)? In case it matters, I&amp;rsquo;m
picturing either a mesh network (high efficiency, high complexity) or
a hierarchical network of increasingly large-bandwidth switches and
routers (low efficiency, low complexity), but I&amp;rsquo;m only guessing here.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://ie.linkedin.com/in/robin-giller-1174193b&#34;&gt;Robin Giller&lt;/a&gt; started with an excellent introduction:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I believe that &amp;ldquo;leaf and spine&amp;rdquo; is the current topology of choice,
moving away from the &amp;ldquo;fat tree&amp;rdquo; architecture of the past when one
inbound request needed to be routed to one server, who would compute
and send data back up to the core and out. Leaf and spine is more
efficient when you&amp;rsquo;ve got lots of east-west traffic. There&amp;rsquo;s an
explanation of both in the link below, and loads more available - just search
for leaf and spine.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://searchdatacenter.techtarget.com/feature/Data-center-network-design-moves-from-tree-to-leaf&#34;&gt;http://searchdatacenter.techtarget.com/feature/Data-center-network-design-moves-from-tree-to-leaf&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While the always helpful &lt;a href=&#34;https:/ie.linkedin.com/in/sean-mooney-7a842429&#34;&gt;Sean Mooney&lt;/a&gt; provided that little bit
of additional info:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To expand on that, I believe it is leaf spine at the pod level (~5-10 racks
of servers) with spine switches interconnected in a mesh.&lt;/p&gt;

&lt;p&gt;So each spine switch will be connected to leaf top-of-rack switches and then
interconnected with other spine switches to form a core mesh network.&lt;/p&gt;

&lt;p&gt;There is also work in OpenStack around Hierarchical Port Binding to allow
different overlay technologies to be used at the spine and leaf layers.
&lt;a href=&#34;https://blueprints.launchpad.net/neutron/+spec/ml2-hierarchical-port-binding&#34;&gt;https://blueprints.launchpad.net/neutron/+spec/ml2-hierarchical-port-binding&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With Hierarchical Port Binding you can use vlans between server and leaf
level and vxlan or other more scalable/computationally expensive overlays at
the leaf/spine level.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Interesting stuff.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Loading mailing list archives with Mutt</title>
      <link>https://that.guru/blog/mutt-archives/</link>
      <pubDate>Wed, 13 Jul 2016 10:59:30 +0100</pubDate>
      
      <guid>https://that.guru/blog/mutt-archives/</guid>
      <description>&lt;p&gt;You can use &lt;a href=&#34;http://www.mutt.org/&#34;&gt;Mutt&lt;/a&gt; to load archives from a mailing list. This is useful
for replying to mails when you weren&amp;rsquo;t previously subscribed to said mailing
list.&lt;/p&gt;

&lt;p&gt;To begin, first go to the archive site for your given mailing list. This will
probably be a Pipermail instance. Once here, identify the archives you require:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/mutt-archives-1.png&#34; alt=&#34;Screenshot of the download button for Pipermail&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Download the archive&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;Once you&amp;rsquo;ve identified this, download and, if necessary, extract the archive:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ wget http://openvswitch.org/pipermail/dev/2016-June.txt.gz
$ gunzip 2016-June.txt.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This extracted archive file will be in mbox format, and can be easily loaded
with mutt:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mutt -f 2016-June.txt
&lt;/code&gt;&lt;/pre&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/mutt-archives-2.png&#34; alt=&#34;Screenshot of Mutt with archives loaded&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;All patches available in Mutt&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>Sane Outlook: Making plain text better in Outlook</title>
      <link>https://that.guru/blog/sane-outlook/</link>
      <pubDate>Mon, 11 Jul 2016 18:11:38 +0100</pubDate>
      
      <guid>https://that.guru/blog/sane-outlook/</guid>
      <description>

&lt;p&gt;I like well-formatted, plain text emails, and I like reading them in a
monospace font. I find plain text to be more readable, and provides less ways
for people to impact this legibility. Sadly, Outlooks defaults to settings that
seemingly encourage bad email ettiquete. Fortunately, we can wrangle Outlook
into working some bit normally. You still need to do a bit of work (removing
the Outlook context header, giving out to people for top-posting (☺), etc.),
but it&amp;rsquo;s better.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/sane-outlook-1.png&#34; alt=&#34;Screenshot of plain text mail before changes&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;A plain text email before&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;



&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/sane-outlook-2.png&#34; alt=&#34;Screenshot of plain text mail after changes&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;...and after&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h2 id=&#34;send-new-emails-using-plain-text&#34;&gt;Send new emails using plain text&lt;/h2&gt;

&lt;p&gt;The first step on our road to plain text greatness is to always send new emails
using plain text. This won&amp;rsquo;t modify the formatting of replies: only new emails
from you.&lt;/p&gt;

&lt;p&gt;You can do this in settings menu (Alt + F, Alt + T). Once here, click on the
mail tab and change the &amp;ldquo;Compose messages in this format:&amp;rdquo; option.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/sane-outlook-3.png&#34; alt=&#34;Screenshot of configuring Outlook to send new emails in plain text&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Send new messages in plain text&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h2 id=&#34;prefix-and-wrap-replies-correctly&#34;&gt;Prefix and wrap replies correctly&lt;/h2&gt;

&lt;p&gt;Next up, let&amp;rsquo;s prefix our emails with the &amp;lsquo;&amp;gt; &amp;rsquo; character. Scroll down on the
same settings dialog and enable this.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/sane-outlook-4.png&#34; alt=&#34;Screenshot of configuring Outlook to prefix replies in a plain text email&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Prefix replies to plain text emails&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;We should also disable stripping of extra line breaks and force wrapping of the
message. For the latter, note that this wrapping is done using Windows&amp;rsquo; CRLF
combination, thus, users of non-Windows clients may see an extra newline
between each line. This isn&amp;rsquo;t configurable, sadly.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/sane-outlook-5.png&#34; alt=&#34;Screenshot of configuring Outlook to not strip extra line breaks&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Don&amp;#39;t strip extra line breaks&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h2 id=&#34;display-emails-in-monospace-font&#34;&gt;Display emails in monospace font&lt;/h2&gt;

&lt;p&gt;The final step of this is display the emails in a nice, monospace font. I have
&lt;a href=&#34;https://adobe-fonts.github.io/source-code-pro/&#34;&gt;Source Code Pro&lt;/a&gt; installed, and use the &amp;ldquo;Light&amp;rdquo; variant of this in
Outlook. To do this, select the &amp;ldquo;&lt;em&gt;Stationary and Fonts&amp;hellip;&lt;/em&gt;&amp;rdquo; button in that same
pane.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/sane-outlook-6.png&#34; alt=&#34;Screenshot of configuring Outlook to use monospace font (1)&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Open the Stationary and Fonts dialog&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;Once here, modify the config for &amp;ldquo;&lt;em&gt;Composing and reading plain text messages&lt;/em&gt;&amp;rdquo;.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/sane-outlook-7.png&#34; alt=&#34;Screenshot of configuring Outlook to use monospace font (2)&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;We&amp;#39;re changing plain text message formating&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;Finally, set your desired monospace font.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/sane-outlook-8.png&#34; alt=&#34;Screenshot of configuring Outlook to use monospace font (3)&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Open the Stationary and Fonts dialog&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h2 id=&#34;wrap-up&#34;&gt;Wrap Up&lt;/h2&gt;

&lt;p&gt;Better plain text emails, for the win.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/sane-outlook-9.png&#34; alt=&#34;Screenshot of plain text email with correctly configured Outlook&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Beautiful, monospace messages&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>How I Work</title>
      <link>https://that.guru/blog/how-i-work/</link>
      <pubDate>Sat, 09 Jul 2016 18:08:16 +0100</pubDate>
      
      <guid>https://that.guru/blog/how-i-work/</guid>
      <description>

&lt;p&gt;Next Friday is the last week of this stint at Intel, so I figured now was as
good a time as ever to do a write up on how I work, or, more accurately, how
I&amp;rsquo;ve worked, during my time here. Note that this has evolved massively over the
past three years, so expect what I say now to have changed significantly a year
down the line.&lt;/p&gt;

&lt;p&gt;At the moment, I work predominantly on &lt;a href=&#34;https://github.com/openstack/nova&#34;&gt;nova&lt;/a&gt;, though I contribute to
many other projects like &lt;a href=&#34;https://github.com/openstack/openstack-manuals&#34;&gt;openstack-manuals&lt;/a&gt;,
&lt;a href=&#34;https://github.com/openstack/oslo.config&#34;&gt;oslo.config&lt;/a&gt;, &lt;a href=&#34;https://github.com/openstack-dev/devstack&#34;&gt;DevStack&lt;/a&gt; and &lt;a href=&#34;https://github.com/getpatchwork/patchwork&#34;&gt;Patchwork&lt;/a&gt;.
Not all of these projects are OpenStack projects, but they are all
Python-based, meaning the development environments for each tend to be rather
similar.&lt;/p&gt;

&lt;h2 id=&#34;platform&#34;&gt;Platform&lt;/h2&gt;

&lt;p&gt;First up - my development platform. My current work laptop is a tad
bit&amp;hellip;under-resourced (think: 4GB of RAM) and is Windows-based, meaning I
always end up working on remote machines via SSH (more on that later). The
remote machines I use vary depending on what I want to do. Most of the time I
use a handful of VMs provided via an internal cloud. These provide me with a
shared home directory (so I don&amp;rsquo;t have to configure Vim each time I start using
a new VM, heh) and some flexibility for things like basic multi-node testing.
However, when I need to validate features on real hardware (which happens quite
regularly, given the areas I&amp;rsquo;m working on), I&amp;rsquo;ll use some real hardware from
the lab. These platforms are the kind of platforms you&amp;rsquo;ll find in every good
data center around the world: multiple top-of-the-line Xeon E5s, super-fast
NVMe SSD storage, the latest Intel NICs (SR-IOV compatible, of course) and
many, many GBs of RAM.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/how-i-work-1.png&#34; alt=&#34;Screenshot showing output of /proc/meminfo&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;That&amp;#39;s a lot of RAM&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;



&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/how-i-work-2.png&#34; alt=&#34;Screenshot showing output of /proc/cpuinfo&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;One of many cores&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h2 id=&#34;environment&#34;&gt;Environment&lt;/h2&gt;

&lt;p&gt;While the hardware of the platforms I use does vary tremendously, the software
environments are remarkably consistent. To start, everything runs whatever the
latest version of Fedora happens to be - while Ubuntu may be currently &lt;a href=&#34;https://www.openstack.org/assets/survey/April-2016-User-Survey-Report.pdf&#34;&gt;the
most popular platform to deploy OpenStack on&lt;/a&gt;, I&amp;rsquo;ve used
Fedora at home for years and saw no reason to switch. On top of this, I either
deploy OpenStack using DevStack, if I want to validate a feature, or I simply
clone and work on the project repos directly, if I&amp;rsquo;m working or unit-testable
code or &amp;ldquo;low-hanging-fruit&amp;rdquo; tasks. Finally, where required, I pre-configure my
tools using the configuration files provided by my &lt;a href=&#34;https://github.com/stephenfin/dotfiles&#34;&gt;dotfiles&lt;/a&gt;
project.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/how-i-work-3.png&#34; alt=&#34;Screenshot showing OpenStack projects I&amp;#39;ve worked on&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;I work on a lot of projects&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;h2 id=&#34;tooling&#34;&gt;Tooling&lt;/h2&gt;

&lt;p&gt;Tooling makes or breaks developers: learning what tools to use, and when, is an
important part of any developers own development. I know a lot of people who
use IDEs like &lt;a href=&#34;https://www.jetbrains.com/pycharm/&#34;&gt;PyCharm&lt;/a&gt; (indeed, you can get a &lt;a href=&#34;https://wiki.openstack.org/wiki/How_To_Contribute#If_you.27re_a_developer&#34;&gt;free community
license&lt;/a&gt; if you contribute to OpenStack), but seeing as I don&amp;rsquo;t
develop on my local machine, I need to use some form of remote rendering - VNC,
X11 forwarding, RDP - for the IDE GUI, I need to configure a remote mount so
that a local installed IDE could access files on my remote machines. I&amp;rsquo;ve found
both of these options to perform poorly over bad connections and result in
either a janky, laggy UI or an inability to do things like change branches with
any regularity, respectively. Annoying, to say the least.&lt;/p&gt;

&lt;p&gt;As a result of the above, I&amp;rsquo;ve been slowly dropping GUI-based tools from my
toolkit over the years. The largest change here was my replacment of Sublime
Text and its plugins with Vim and plugins managed by &lt;a href=&#34;https://github.com/VundleVim/Vundle.vim&#34;&gt;Vundle&lt;/a&gt;
(delighted not to be writing plugins for Vim, tbh). In addition to this change,
I also dropped [Meld], which was pretty but laggy over X11 forwarding, in favor
of the more responsive &lt;a href=&#34;https://github.com/rhysd/conflict-marker.vim&#34;&gt;ConflictMarker&lt;/a&gt; Vim plugin (I&amp;rsquo;m yet to
grasp Vimdiff).  Similarly, I&amp;rsquo;ve replaced MTPuTTY and its multiple tabs with
standard PuTTY and &lt;a href=&#34;https://tmux.github.io/&#34;&gt;tmux&lt;/a&gt;. All these tools do have an additional learning
curve over their GUI-driven equivalents, but they&amp;rsquo;re all battle-tested,
incredibly efficient, and work well on pretty much any type of network
connection.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/how-i-work-4.png&#34; alt=&#34;Screenshot of Vim in tmux&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;I use Vim extensively&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;Outside of these tools, I also make extensive use of &lt;a href=&#34;https://github.com/openstack-infra/git-review&#34;&gt;git-review&lt;/a&gt;
and &lt;a href=&#34;https://github.com/ggreer/the_silver_searcher&#34;&gt;ag (a.k.a. the silver searcher)&lt;/a&gt;. git-review allows me to quickly
submit my own changes for community review or download other peoples&amp;rsquo; changes
for validation, and it is the tool the OpenStack community recommends for
working with Gerrit-based projects. ag, on the other hand, is my way of
handling the lack of an IntelliSense-like feature in Vim. It&amp;rsquo;s a faster version
of &lt;code&gt;awk&lt;/code&gt; that also takes things like gitignore files into account. I use this
to search for function calls etc. I plan to eventually try something like
&lt;a href=&#34;https://github.com/davidhalter/jedi&#34;&gt;Jedi&lt;/a&gt; but I just haven&amp;rsquo;t got around to this yet.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/how-i-work-5.png&#34; alt=&#34;Screenshot of ag in tmux&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;ag is fast and pretty&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;Finally, debugging, where necessary, is possible through &lt;a href=&#34;https://docs.python.org/2/library/pdb.html&#34;&gt;pdb&lt;/a&gt; and the odd
post to the mailing list is made using &lt;a href=&#34;http://www.mutt.org/&#34;&gt;mutt&lt;/a&gt;. pdb, like many of these
tools, does take a bit of time to get your head around, but, once up and
running, proves itself worth the effort. mutt has a similarly large learning
curve, but it doesn&amp;rsquo;t mess up the formatting of emails half as bad as Outlook
and its threading actually works.&lt;/p&gt;

&lt;h2 id=&#34;future-plans&#34;&gt;Future Plans&lt;/h2&gt;

&lt;p&gt;There are a couple of tools that have been recommended to me, that I just
haven&amp;rsquo;t got around to trying yet.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dolph/next-review&#34;&gt;git-next&lt;/a&gt;: Developed by the awesome Dolph Matthews, this simple
tool should be configured with your favourite OpenStack project. Once done, you
can run it provide you with the next patch that you should review.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/openstack/gertty&#34;&gt;gertty&lt;/a&gt;: This is another OpenStack-provided project. This tool
provides a CLI for Gerrit tool, and allows you to do things like review code
offline. The latter feature isn&amp;rsquo;t so useful when working remotely all the time,
but if/when I start developing locally, I&amp;rsquo;ll be sure to use this.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/davidhalter/jedi&#34;&gt;Jedi&lt;/a&gt;: As mentioned above, how I navigate the code base could do with
a bit of work. Jedi brings autocomplete and some other stuff to editors like
Vim.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/pycharm/&#34;&gt;PyCharm&lt;/a&gt;: This is another one to throw in the &amp;ldquo;if I ever develop
locally&amp;rdquo; bag. I don&amp;rsquo;t use this now, but if it becomes an option then I&amp;rsquo;ll
definitely try it. I do wish the open source alternatives weren&amp;rsquo;t quite
so&amp;hellip;Java&amp;rsquo;y though.&lt;/li&gt;
&lt;li&gt;???: Who knows what else I&amp;rsquo;ll discover in the coming years?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;bonus-ssh-configuration&#34;&gt;Bonus: SSH Configuration&lt;/h2&gt;

&lt;p&gt;How I actually connect to the machines is probably worth calling out also. For
this, I use the PuTTY family of tools. To begin with, I have
&lt;a href=&#34;https://github.com/FauxFaux/PuTTYTray&#34;&gt;PuTTYTray&lt;/a&gt; installed and pinned to my taskbar to enable quick
access to some tools in the suite (&lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html&#34;&gt;PuTTY, Pageant, PuTTYGen&lt;/a&gt;).&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/how-i-work-6.png&#34; alt=&#34;Screenshot of PuTTYTray&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;PuTTYTray in action&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;The out-of-the-box experience for PuTTY itself is rather poor, so I rely on the
&lt;a href=&#34;https://github.com/jblaine/solarized-and-modern-putty&#34;&gt;Solarized Modern PuTTY Defaults project&lt;/a&gt; to bring things into the
21st century.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/how-i-work-7.png&#34; alt=&#34;Screenshot of PuTTY&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Pretty colours. Not so pretty test results.&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;I don&amp;rsquo;t fancy typing in a password each time, so I &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-use-ssh-keys-with-putty-on-digitalocean-droplets-windows-users&#34;&gt;generate SSH keys using
Pageant&lt;/a&gt;, then I make sure Pageant &lt;a href=&#34;http://blog.shvetsov.com/2010/03/making-pageant-automatically-load-keys.html&#34;&gt;starts automatically&lt;/a&gt;
each time I boot my machine. I&amp;rsquo;ll probably do a more in-depth write up of this
process at some point.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Resizing pinned instances to unpinned</title>
      <link>https://that.guru/blog/resizing-pinned-to-unpinned/</link>
      <pubDate>Thu, 30 Jun 2016 10:55:58 +0100</pubDate>
      
      <guid>https://that.guru/blog/resizing-pinned-to-unpinned/</guid>
      <description>

&lt;p&gt;OpenStack Nova provides support for &lt;a href=&#34;http://docs.openstack.org/user-guide/cli_change_the_size_of_your_server.html&#34;&gt;resize operations&lt;/a&gt;, or the
changing of the &lt;a href=&#34;http://docs.openstack.org/admin-guide/compute-flavors.html&#34;&gt;flavor&lt;/a&gt; associated with instance. This allows you to
add or remove resources from the instance, in addition to modifying other
configuration associated with the flavor.&lt;/p&gt;

&lt;p&gt;There were reports that resizing an instance from a &lt;a href=&#34;http://docs.openstack.org/admin-guide/compute-numa-cpu-pinning.html&#34;&gt;pinned
flavor&lt;/a&gt; to a unpinned one did not result in the pinning being
removed. The opposite was also reportedly true. I investigated this to see if
this was the case.&lt;/p&gt;

&lt;h1 id=&#34;steps&#34;&gt;Steps&lt;/h1&gt;

&lt;h2 id=&#34;create-the-required-flavors&#34;&gt;Create the required flavors&lt;/h2&gt;

&lt;p&gt;The first step we&amp;rsquo;ll do is create two new flavors - &lt;code&gt;test.unpinned&lt;/code&gt; and
&lt;code&gt;test.pinned&lt;/code&gt;. Begin by creating these:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ openstack flavor create test.unpinned \
  --id 100 --ram 2048 --disk 0 --vcpus 2
$ openstack flavor create test.pinned \
  --id 101 --ram 2048 --disk 0 --vcpus 2
$ openstack flavor set test.pinned --property &amp;quot;hw:cpu_policy=dedicated&amp;quot;

$ openstack flavor list
+-----+---------------+-------+------+-----------+-------+-----------+
| ID  | Name          |   RAM | Disk | Ephemeral | VCPUs | Is Public |
+-----+---------------+-------+------+-----------+-------+-----------+
| 1   | m1.tiny       |   512 |    1 |         0 |     1 | True      |
| 101 | test.unpinned |  2048 |    0 |         0 |     2 | True      |
| 101 | test.pinned   |  2048 |    0 |         0 |     2 | True      |
| 2   | m1.small      |  2048 |   20 |         0 |     1 | True      |
| 3   | m1.medium     |  4096 |   40 |         0 |     2 | True      |
| 4   | m1.large      |  8192 |   80 |         0 |     4 | True      |
| 42  | m1.nano       |    64 |    0 |         0 |     1 | True      |
| 5   | m1.xlarge     | 16384 |  160 |         0 |     8 | True      |
| 84  | m1.micro      |   128 |    0 |         0 |     1 | True      |
+-----+---------------+-------+------+-----------+-------+-----------+
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;create-a-new-instance&#34;&gt;Create a new instance&lt;/h2&gt;

&lt;p&gt;Now create the new instance, based on the &lt;code&gt;test.pinned&lt;/code&gt; flavor:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ openstack image list
+--------------------------------------+---------------------------------+--------+
| ID                                   | Name                            | Status |
+--------------------------------------+---------------------------------+--------+
| c44bba29-653e-4ddf-963d-442af4c33a13 | cirros-0.3.4-x86_64-uec         | active |
| 8b0284ee-ae6c-4e80-b5ee-26895d574717 | cirros-0.3.4-x86_64-uec-ramdisk | active |
| 855c2971-aedc-4d5f-a366-73bb14707965 | cirros-0.3.4-x86_64-uec-kernel  | active |
+--------------------------------------+---------------------------------+--------+

$ openstack server create --flavor=test.pinned \
  --image=cirros-0.3.4-x86_64-uec --wait test1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;validate-that-the-instance-is-pinned&#34;&gt;Validate that the instance is pinned&lt;/h2&gt;

&lt;p&gt;Ensure the instance is actually pinned in the first place before we resize
anything:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ openstack server list
+--------------------------------------+-------+--------+--------------------------------------------------------+
| ID                                   | Name  | Status | Networks                                               |
+--------------------------------------+-------+--------+--------------------------------------------------------+
| 857597cb-266b-4032-8030-e3cc76ebf0e7 | test1 | ACTIVE | private=10.0.0.3, fd2a:ec16:99e1:0:f816:3eff:fe99:df9f |
+--------------------------------------+-------+--------+--------------------------------------------------------+

$ sudo virsh list
 Id    Name                           State
----------------------------------------------------
 1     instance-00000001              running

$ sudo virsh dumpxml instance-00000001
&amp;lt;domain type=&#39;kvm&#39; id=&#39;1&#39;&amp;gt;
  &amp;lt;name&amp;gt;instance-00000001&amp;lt;/name&amp;gt;
  ...
  &amp;lt;vcpu placement=&#39;static&#39;&amp;gt;2&amp;lt;/vcpu&amp;gt;
  &amp;lt;cputune&amp;gt;
    &amp;lt;shares&amp;gt;2048&amp;lt;/shares&amp;gt;
    &amp;lt;vcpupin vcpu=&#39;0&#39; cpuset=&#39;1&#39;/&amp;gt;
    &amp;lt;vcpupin vcpu=&#39;1&#39; cpuset=&#39;21&#39;/&amp;gt;
    &amp;lt;emulatorpin cpuset=&#39;1,21&#39;/&amp;gt;
  &amp;lt;/cputune&amp;gt;
  &amp;lt;numatune&amp;gt;
    &amp;lt;memory mode=&#39;strict&#39; nodeset=&#39;0&#39;/&amp;gt;
    &amp;lt;memnode cellid=&#39;0&#39; mode=&#39;strict&#39; nodeset=&#39;0&#39;/&amp;gt;
  &amp;lt;/numatune&amp;gt;
  ...
  &amp;lt;cpu&amp;gt;
    &amp;lt;topology sockets=&#39;1&#39; cores=&#39;1&#39; threads=&#39;2&#39;/&amp;gt;
    &amp;lt;numa&amp;gt;
      &amp;lt;cell id=&#39;0&#39; cpus=&#39;0-1&#39; memory=&#39;2097152&#39; unit=&#39;KiB&#39;/&amp;gt;
    &amp;lt;/numa&amp;gt;
  &amp;lt;/cpu&amp;gt;
  ...
&amp;lt;/domain&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;resize-the-instance-to-the-unpinned-flavor&#34;&gt;Resize the instance to the unpinned flavor&lt;/h2&gt;

&lt;p&gt;Seeing as pinning was in effect, we can now resize to the &lt;code&gt;test.unpinned&lt;/code&gt;
flavor:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ openstack server resize test1 --flavor test.unpinned --wait
complete

$ openstack server list
+--------------------------------------+-------+---------------+--------------------------------------------------------+
| ID                                   | Name  | Status        | Networks                                               |
+--------------------------------------+-------+---------------+--------------------------------------------------------+
| 857597cb-266b-4032-8030-e3cc76ebf0e7 | test1 | VERIFY_RESIZE | private=10.0.0.3, fd2a:ec16:99e1:0:f816:3eff:fe99:df9f |
+--------------------------------------+-------+---------------+--------------------------------------------------------+

$ openstack server resize test1 --confirm
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;validate-that-the-instance-is-no-longer-pinned&#34;&gt;Validate that the instance is no longer pinned&lt;/h2&gt;

&lt;p&gt;Once resized, check to see if the instance has been unpinned:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ openstack server list
+--------------------------------------+-------+--------+--------------------------------------------------------+
| ID                                   | Name  | Status | Networks                                               |
+--------------------------------------+-------+--------+--------------------------------------------------------+
| 857597cb-266b-4032-8030-e3cc76ebf0e7 | test1 | ACTIVE | private=10.0.0.3, fd2a:ec16:99e1:0:f816:3eff:fe99:df9f |
+--------------------------------------+-------+--------+--------------------------------------------------------+

$ sudo virsh list
 Id    Name                           State
----------------------------------------------------
 2     instance-00000001              running

$ sudo virsh dumpxml instance-00000001
&amp;lt;domain type=&#39;kvm&#39; id=&#39;2&#39;&amp;gt;
  &amp;lt;name&amp;gt;instance-00000002&amp;lt;/name&amp;gt;
  ...
  &amp;lt;vcpu placement=&#39;static&#39;&amp;gt;2&amp;lt;/vcpu&amp;gt;
  &amp;lt;cputune&amp;gt;
    &amp;lt;shares&amp;gt;2048&amp;lt;/shares&amp;gt;
  &amp;lt;/cputune&amp;gt;
  ...
&amp;lt;/domain&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;resize-the-instance-back-to-the-pinned-flavor&#34;&gt;Resize the instance back to the pinned flavor&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s go back the other way, and resize back to the &lt;code&gt;test.pinned&lt;/code&gt; flavor:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ openstack server resize test1 --flavor test.pinned --wait
complete

$ openstack server list
+--------------------------------------+-------+---------------+--------------------------------------------------------+
| ID                                   | Name  | Status        | Networks                                               |
+--------------------------------------+-------+---------------+--------------------------------------------------------+
| 857597cb-266b-4032-8030-e3cc76ebf0e7 | test1 | VERIFY_RESIZE | private=10.0.0.3, fd2a:ec16:99e1:0:f816:3eff:fe99:df9f |
+--------------------------------------+-------+---------------+--------------------------------------------------------+

$ openstack server resize test1 --confirm
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;validate-that-the-instance-is-pinned-once-more&#34;&gt;Validate that the instance is pinned once more&lt;/h2&gt;

&lt;p&gt;Finally, ensure the instance is once again pinned:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ openstack server list
+--------------------------------------+-------+--------+--------------------------------------------------------+
| ID                                   | Name  | Status | Networks                                               |
+--------------------------------------+-------+--------+--------------------------------------------------------+
| 857597cb-266b-4032-8030-e3cc76ebf0e7 | test1 | ACTIVE | private=10.0.0.3, fd2a:ec16:99e1:0:f816:3eff:fe99:df9f |
+--------------------------------------+-------+--------+--------------------------------------------------------+

$ sudo virsh list
 Id    Name                           State
----------------------------------------------------
 3     instance-00000001              running

$ sudo virsh dumpxml instance-00000001
&amp;lt;domain type=&#39;kvm&#39; id=&#39;3&#39;&amp;gt;
  &amp;lt;name&amp;gt;instance-00000001&amp;lt;/name&amp;gt;
  ...
  &amp;lt;vcpu placement=&#39;static&#39;&amp;gt;2&amp;lt;/vcpu&amp;gt;
  &amp;lt;cputune&amp;gt;
    &amp;lt;shares&amp;gt;2048&amp;lt;/shares&amp;gt;
    &amp;lt;vcpupin vcpu=&#39;0&#39; cpuset=&#39;1&#39;/&amp;gt;
    &amp;lt;vcpupin vcpu=&#39;1&#39; cpuset=&#39;21&#39;/&amp;gt;
    &amp;lt;emulatorpin cpuset=&#39;1,21&#39;/&amp;gt;
  &amp;lt;/cputune&amp;gt;
  &amp;lt;numatune&amp;gt;
    &amp;lt;memory mode=&#39;strict&#39; nodeset=&#39;0&#39;/&amp;gt;
    &amp;lt;memnode cellid=&#39;0&#39; mode=&#39;strict&#39; nodeset=&#39;0&#39;/&amp;gt;
  &amp;lt;/numatune&amp;gt;
  ...
  &amp;lt;cpu&amp;gt;
    &amp;lt;topology sockets=&#39;1&#39; cores=&#39;1&#39; threads=&#39;2&#39;/&amp;gt;
    &amp;lt;numa&amp;gt;
      &amp;lt;cell id=&#39;0&#39; cpus=&#39;0-1&#39; memory=&#39;2097152&#39; unit=&#39;KiB&#39;/&amp;gt;
    &amp;lt;/numa&amp;gt;
  &amp;lt;/cpu&amp;gt;
  ...
&amp;lt;/domain&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;result&#34;&gt;Result&lt;/h1&gt;

&lt;p&gt;It is possible to resize from pinned to unpinned, and from unpinned to pinned.
No issues here.&lt;/p&gt;

&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.openstack.org/admin-guide/compute-flavors.html&#34;&gt;OpenStack Administrator Guide: Compute flavors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.openstack.org/admin-guide/compute-numa-cpu-pinning.html&#34;&gt;OpenStack Administrator Guide: Enabling advanced CPU topologies in
guests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>CPU pinning with image metadata</title>
      <link>https://that.guru/blog/cpu-pinning-with-image-metadata/</link>
      <pubDate>Wed, 29 Jun 2016 17:52:20 +0100</pubDate>
      
      <guid>https://that.guru/blog/cpu-pinning-with-image-metadata/</guid>
      <description>

&lt;p&gt;OpenStack Nova allows the specification of &lt;a href=&#34;http://docs.openstack.org/image-guide/image-metadata.html&#34;&gt;image metadata&lt;/a&gt; to
provide per-instance metadata. This is similar to the &lt;a href=&#34;http://docs.openstack.org/admin-guide/compute-flavors.html&#34;&gt;flavor&lt;/a&gt; &lt;a href=&#34;http://docs.openstack.org/admin-guide/compute-flavors.html#extra-specs&#34;&gt;extra
specs&lt;/a&gt;. The CPU pinning feature makes use of this to allow for
configuration of CPU policies and CPU thread policies via such metdata.&lt;/p&gt;

&lt;p&gt;Someone suggested to me that CPU policies many not be being applied correctly
when stored as image metadata rather than flavor properties. I decided to
investigate this claim.&lt;/p&gt;

&lt;p&gt;Commit &lt;a href=&#34;https://github.com/openstack/nova/tree/8bafc9&#34;&gt;&lt;code&gt;8bafc9&lt;/code&gt;&lt;/a&gt; of Nova was used for this testing. Much of
this feature has been &lt;a href=&#34;http://docs.openstack.org/admin-guide/compute-numa-cpu-pinning.html&#34;&gt;documented upstreamed&lt;/a&gt; since conducting
this testing.&lt;/p&gt;

&lt;h1 id=&#34;steps&#34;&gt;Steps&lt;/h1&gt;

&lt;h2 id=&#34;create-a-custom-image-with-metadata&#34;&gt;Create a custom image with metadata&lt;/h2&gt;

&lt;p&gt;The first step is to create a new image and save metadata against this image.
To do this, we&amp;rsquo;ll duplicate an existing image and modify this duplicate. Begin
by duplicating the image:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ openstack image list
+--------------------------------------+---------------------------------+--------+
| ID                                   | Name                            | Status |
+--------------------------------------+---------------------------------+--------+
| a3450a21-f012-4807-a514-0838750d430e | cirros-0.3.4-x86_64-uec         | active |
| 742bc914-e60c-4eab-9e5b-0a1c19ec1a84 | cirros-0.3.4-x86_64-uec-ramdisk | active |
| 3e507ab7-080d-4eea-845a-69950ec139b8 | cirros-0.3.4-x86_64-uec-kernel  | active |
+--------------------------------------+---------------------------------+--------+

$ openstack image save --file cirros.img a3450a21-f012-4807-a514-0838750d430e

$ openstack image create --file cirros.img cirros-0.3.4-x86_64-pinned
+------------------+------------------------------------------------------+
| Field            | Value                                                |
+------------------+------------------------------------------------------+
| checksum         | eb9139e4942121f22bbc2afc0400b2a4                     |
| container_format | bare                                                 |
| created_at       | 2016-02-16T09:40:12Z                                 |
| disk_format      | raw                                                  |
| file             | /v2/images/e3e7d5a5-b044-493a-b3e1-fa9ba6225ed6/file |
| id               | e3e7d5a5-b044-493a-b3e1-fa9ba6225ed6                 |
| min_disk         | 0                                                    |
| min_ram          | 0                                                    |
| name             | cirros-0.3.4-x86_64-pinned                           |
| owner            | c1e8c7671b0f4016a9250a8787de6930                     |
| protected        | False                                                |
| schema           | /v2/schemas/image                                    |
| size             | 25165824                                             |
| status           | active                                               |
| tags             |                                                      |
| updated_at       | 2016-02-16T09:40:12Z                                 |
| virtual_size     | None                                                 |
| visibility       | private                                              |
+------------------+------------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next up, add the metadata to the image. We&amp;rsquo;ll only worry about CPU pinning, by
way of CPU policies, ignoring CPU thread pinning for now.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ openstack image set cirros-0.3.4-x86_64-pinned --property hw_cpu_policy=dedicated

$ openstack image list
+--------------------------------------+---------------------------------+--------+
| ID                                   | Name                            | Status |
+--------------------------------------+---------------------------------+--------+
| e3e7d5a5-b044-493a-b3e1-fa9ba6225ed6 | cirros-0.3.4-x86_64-pinned      | active |
| a3450a21-f012-4807-a514-0838750d430e | cirros-0.3.4-x86_64-uec         | active |
| 742bc914-e60c-4eab-9e5b-0a1c19ec1a84 | cirros-0.3.4-x86_64-uec-ramdisk | active |
| 3e507ab7-080d-4eea-845a-69950ec139b8 | cirros-0.3.4-x86_64-uec-kernel  | active |
+--------------------------------------+---------------------------------+--------+

$ openstack image show cirros-0.3.4-x86_64-pinned
+------------------+------------------------------------------------------+
| Field            | Value                                                |
+------------------+------------------------------------------------------+
| checksum         | eb9139e4942121f22bbc2afc0400b2a4                     |
| container_format | bare                                                 |
| created_at       | 2016-02-16T09:40:12Z                                 |
| disk_format      | raw                                                  |
| file             | /v2/images/e3e7d5a5-b044-493a-b3e1-fa9ba6225ed6/file |
| id               | e3e7d5a5-b044-493a-b3e1-fa9ba6225ed6                 |
| min_disk         | 0                                                    |
| min_ram          | 0                                                    |
| name             | cirros-0.3.4-x86_64-pinned                           |
| owner            | c1e8c7671b0f4016a9250a8787de6930                     |
| properties       | hw_cpu_policy=&#39;dedicated&#39;                            |
| protected        | False                                                |
| schema           | /v2/schemas/image                                    |
| size             | 25165824                                             |
| status           | active                                               |
| tags             |                                                      |
| updated_at       | 2016-02-16T09:41:42Z                                 |
| virtual_size     | None                                                 |
| visibility       | private                                              |
+------------------+------------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;create-a-new-instance&#34;&gt;Create a new instance&lt;/h2&gt;

&lt;p&gt;Now create the flavor. There&amp;rsquo;s no need to specify any metadata on the flavors:
it&amp;rsquo;s already specified in the image:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ openstack flavor list
+----+-----------+-------+------+-----------+-------+-----------+
| ID | Name      |   RAM | Disk | Ephemeral | VCPUs | Is Public |
+----+-----------+-------+------+-----------+-------+-----------+
| 1  | m1.tiny   |   512 |    1 |         0 |     1 | True      |
| 2  | m1.small  |  2048 |   20 |         0 |     1 | True      |
| 3  | m1.medium |  4096 |   40 |         0 |     2 | True      |
| 4  | m1.large  |  8192 |   80 |         0 |     4 | True      |
| 42 | m1.nano   |    64 |    0 |         0 |     1 | True      |
| 5  | m1.xlarge | 16384 |  160 |         0 |     8 | True      |
| 84 | m1.micro  |   128 |    0 |         0 |     1 | True      |
+----+-----------+-------+------+-----------+-------+-----------+

$ openstack server create --flavor=m1.small --image=cirros-0.3.4-x86_64-pinned --wait test1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;validate-that-the-instance-has-been-created&#34;&gt;Validate that the instance has been created&lt;/h2&gt;

&lt;p&gt;Finally, ensure that things behave as expected. Instances should define an NUMA
topology and CPU pinning in the libvirt XML file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ openstack server list
+--------------------------------------+-------+--------+--------------------------------------------------------+
| ID                                   | Name  | Status | Networks                                               |
+--------------------------------------+-------+--------+--------------------------------------------------------+
| 22c1afeb-06d8-4f6d-a8d8-7ea40ea9ff47 | test1 | ACTIVE | private=fd4d:adb9:5ebe:0:f816:3eff:fecd:a674, 10.0.0.3 |
+--------------------------------------+-------+--------+--------------------------------------------------------+

$ sudo virsh list
 Id    Name                           State
----------------------------------------------------
 4     instance-00000002              running

$ sudo virsh dumpxml 4
&amp;lt;domain type=&#39;kvm&#39; id=&#39;4&#39;&amp;gt;
  &amp;lt;name&amp;gt;instance-00000002&amp;lt;/name&amp;gt;
  &amp;lt;vcpu placement=&#39;static&#39;&amp;gt;1&amp;lt;/vcpu&amp;gt;
  ...
  &amp;lt;cputune&amp;gt;
    &amp;lt;shares&amp;gt;1024&amp;lt;/shares&amp;gt;
    &amp;lt;vcpupin vcpu=&#39;0&#39; cpuset=&#39;1&#39;/&amp;gt;
    &amp;lt;emulatorpin cpuset=&#39;1&#39;/&amp;gt;
  &amp;lt;/cputune&amp;gt;
  &amp;lt;numatune&amp;gt;
    &amp;lt;memory mode=&#39;strict&#39; nodeset=&#39;0&#39;/&amp;gt;
    &amp;lt;memnode cellid=&#39;0&#39; mode=&#39;strict&#39; nodeset=&#39;0&#39;/&amp;gt;
  &amp;lt;/numatune&amp;gt;
  ...
&amp;lt;/domain&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;result&#34;&gt;Result&lt;/h1&gt;

&lt;p&gt;The image metadata is being loaded as expected. No issues here.&lt;/p&gt;

&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.openstack.org/admin-guide/compute-flavors.html&#34;&gt;OpenStack Administrator Guide: Compute flavors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.openstack.org/admin-guide/compute-numa-cpu-pinning.html&#34;&gt;OpenStack Administrator Guide: Enabling advanced CPU topologies in
guests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.openstack.org/image-guide/image-metadata.html&#34;&gt;OpenStack Virtual Machine Image Guide: Image metadata&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Configuring ZNC with HexChat</title>
      <link>https://that.guru/blog/znc-sasl-server-pass/</link>
      <pubDate>Sun, 26 Jun 2016 14:00:39 +0100</pubDate>
      
      <guid>https://that.guru/blog/znc-sasl-server-pass/</guid>
      <description>

&lt;h1 id=&#34;configuring-znc-with-hexchat&#34;&gt;Configuring ZNC with HexChat&lt;/h1&gt;

&lt;p&gt;I recently set up ZNC instance to capture whatever I may miss when not
connected to any of the many &lt;a href=&#34;https://wiki.openstack.org/wiki/IRC&#34;&gt;OpenStack IRC&lt;/a&gt; channels. One
tricky part of this configuration was my use of multiple authentication layers.
I have ZNC configured to use a server password, but I also have my nick
&lt;a href=&#34;https://freenode.net/kb/answer/registration&#34;&gt;registered on freenode&lt;/a&gt; and I would like to use
&lt;a href=&#34;https://freenode.net/kb/answer/sasl&#34;&gt;SASL&lt;/a&gt; to authenticate this. It turns out that this is
relatively easy to do.&lt;/p&gt;

&lt;h2 id=&#34;configure-server-password-pass-authentication&#34;&gt;Configure server password (/PASS) authentication&lt;/h2&gt;

&lt;p&gt;You should first configure the connection to your ZNC server. Create a new
server profile (&lt;em&gt;HexChat&lt;/em&gt; &amp;gt; &lt;em&gt;Network List&lt;/em&gt;, or &lt;code&gt;&amp;lt;Ctrl&amp;gt;&lt;/code&gt; + &lt;code&gt;S&lt;/code&gt;) and
configure it like so:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/znc-sasl-server-pass-1.png&#34;  /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Configuring server password authentication&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;



&lt;p&gt;Most of this configuration doesn&amp;rsquo;t differ from the many guides available on
configuring HexChat with ZNC. I&amp;rsquo;m using SSL, so I enable that (and accept my
&amp;ldquo;invalid&amp;rdquo;, self-signed key), and I select this as the server to automatically
connect to when I open HexChat. The interesting bit is the &lt;code&gt;Server Password
&amp;lt;/PASS password&lt;/code&gt; section. In here, I have my username and server password
stored in format &lt;code&gt;[username]:[password]&lt;/code&gt;, e.g. &lt;code&gt;admin:password&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once done, I also need to configure a channels you want to connect to on the
&lt;em&gt;Autojoin channels&lt;/em&gt; tab:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://that.guru/media/znc-sasl-server-pass-2.png&#34;  /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Configuring autojoin channels&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;



&lt;p&gt;I&amp;rsquo;m mostly concerned with &lt;code&gt;#openstack-xxx&lt;/code&gt; channels, but your configuration
will differ.&lt;/p&gt;

&lt;h2 id=&#34;configure-sasl-authentication&#34;&gt;Configure SASL authentication&lt;/h2&gt;

&lt;p&gt;Now we should be able to connect to the ZNC server without gettings an &lt;code&gt;Invalid
password&lt;/code&gt; errors. However, looking at the logs for the &lt;em&gt;freenode&lt;/em&gt; server
connection, we can see that we&amp;rsquo;re being asked to authenticate our registered
nick:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TODO&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Time for SASL. Many of these steps are documented on the &lt;a href=&#34;http://wiki.znc.in/Sasl&#34;&gt;ZNC wiki&lt;/a&gt;,
but they&amp;rsquo;re documented here for posterity.&lt;/p&gt;

&lt;p&gt;First, &lt;a href=&#34;http://wiki.znc.in/Modules#Managing_Modules&#34;&gt;load the module&lt;/a&gt; on ZNC:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/msg *status loadmodule sasl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, set the mechanism. We use &lt;code&gt;PLAIN&lt;/code&gt; (plaintext), which is a-OK as we&amp;rsquo;re
using SSL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/msg *sasl mechanism PLAIN
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, supply your username and password:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/msg *sasl set &amp;lt;username&amp;gt; &amp;lt;password&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That should be the end the need to run pesky &lt;code&gt;nickserv&lt;/code&gt; commands.&lt;/p&gt;

&lt;h2 id=&#34;wrap-up&#34;&gt;Wrap up&lt;/h2&gt;

&lt;p&gt;We now have authentication against the server, using a server password, and
authentication against the nickserv, using SASL. Pretty much hassle free.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>